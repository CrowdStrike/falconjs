/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    DomainAPIError,
    DomainBatchExecuteCommandRequest,
    DomainBatchGetCmdStatusResponse,
    DomainBatchGetCommandRequest,
    DomainBatchGetCommandResponse,
    DomainBatchInitSessionRequest,
    DomainBatchInitSessionResponse,
    DomainBatchRefreshSessionRequest,
    DomainBatchRefreshSessionResponse,
    DomainCommandExecuteRequest,
    DomainCommandExecuteResponseWrapper,
    DomainInitRequest,
    DomainInitResponseWrapper,
    DomainListFilesResponseWrapper,
    DomainListFilesV2ResponseWrapper,
    DomainListSessionsResponseMsa,
    DomainMultiCommandExecuteResponseWrapper,
    DomainQueuedSessionResponseWrapper,
    DomainSessionResponseWrapper,
    DomainStatusResponseWrapper,
    MsaAggregateQueryRequest,
    MsaAggregatesResponse,
    MsaErrorsOnly,
    MsaIdsRequest,
    MsaReplyMetaOnly,
} from "../models/index";
import {
    DomainAPIErrorFromJSON,
    DomainAPIErrorToJSON,
    DomainBatchExecuteCommandRequestFromJSON,
    DomainBatchExecuteCommandRequestToJSON,
    DomainBatchGetCmdStatusResponseFromJSON,
    DomainBatchGetCmdStatusResponseToJSON,
    DomainBatchGetCommandRequestFromJSON,
    DomainBatchGetCommandRequestToJSON,
    DomainBatchGetCommandResponseFromJSON,
    DomainBatchGetCommandResponseToJSON,
    DomainBatchInitSessionRequestFromJSON,
    DomainBatchInitSessionRequestToJSON,
    DomainBatchInitSessionResponseFromJSON,
    DomainBatchInitSessionResponseToJSON,
    DomainBatchRefreshSessionRequestFromJSON,
    DomainBatchRefreshSessionRequestToJSON,
    DomainBatchRefreshSessionResponseFromJSON,
    DomainBatchRefreshSessionResponseToJSON,
    DomainCommandExecuteRequestFromJSON,
    DomainCommandExecuteRequestToJSON,
    DomainCommandExecuteResponseWrapperFromJSON,
    DomainCommandExecuteResponseWrapperToJSON,
    DomainInitRequestFromJSON,
    DomainInitRequestToJSON,
    DomainInitResponseWrapperFromJSON,
    DomainInitResponseWrapperToJSON,
    DomainListFilesResponseWrapperFromJSON,
    DomainListFilesResponseWrapperToJSON,
    DomainListFilesV2ResponseWrapperFromJSON,
    DomainListFilesV2ResponseWrapperToJSON,
    DomainListSessionsResponseMsaFromJSON,
    DomainListSessionsResponseMsaToJSON,
    DomainMultiCommandExecuteResponseWrapperFromJSON,
    DomainMultiCommandExecuteResponseWrapperToJSON,
    DomainQueuedSessionResponseWrapperFromJSON,
    DomainQueuedSessionResponseWrapperToJSON,
    DomainSessionResponseWrapperFromJSON,
    DomainSessionResponseWrapperToJSON,
    DomainStatusResponseWrapperFromJSON,
    DomainStatusResponseWrapperToJSON,
    MsaAggregateQueryRequestFromJSON,
    MsaAggregateQueryRequestToJSON,
    MsaAggregatesResponseFromJSON,
    MsaAggregatesResponseToJSON,
    MsaErrorsOnlyFromJSON,
    MsaErrorsOnlyToJSON,
    MsaIdsRequestFromJSON,
    MsaIdsRequestToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface RealTimeResponseApiBatchActiveResponderCmdRequest {
    body: DomainBatchExecuteCommandRequest;
    timeout?: number;
    timeoutDuration?: string;
    hostTimeoutDuration?: string;
}

export interface RealTimeResponseApiBatchCmdRequest {
    body: DomainBatchExecuteCommandRequest;
    timeout?: number;
    timeoutDuration?: string;
    hostTimeoutDuration?: string;
}

export interface RealTimeResponseApiBatchGetCmdRequest {
    body: DomainBatchGetCommandRequest;
    timeout?: number;
    timeoutDuration?: string;
    hostTimeoutDuration?: string;
}

export interface RealTimeResponseApiBatchGetCmdStatusRequest {
    batchGetCmdReqId: string;
    timeout?: number;
    timeoutDuration?: string;
}

export interface RealTimeResponseApiBatchInitSessionsRequest {
    body: DomainBatchInitSessionRequest;
    timeout?: number;
    timeoutDuration?: string;
    hostTimeoutDuration?: string;
}

export interface RealTimeResponseApiBatchRefreshSessionsRequest {
    body: DomainBatchRefreshSessionRequest;
    timeout?: number;
    timeoutDuration?: string;
}

export interface RealTimeResponseApiRTRAggregateSessionsRequest {
    body: Array<MsaAggregateQueryRequest>;
}

export interface RealTimeResponseApiRTRCheckActiveResponderCommandStatusRequest {
    cloudRequestId: string;
    sequenceId: number;
}

export interface RealTimeResponseApiRTRCheckCommandStatusRequest {
    cloudRequestId: string;
    sequenceId: number;
}

export interface RealTimeResponseApiRTRDeleteFileRequest {
    ids: string;
    sessionId: string;
}

export interface RealTimeResponseApiRTRDeleteFileV2Request {
    ids: string;
    sessionId: string;
}

export interface RealTimeResponseApiRTRDeleteQueuedSessionRequest {
    sessionId: string;
    cloudRequestId: string;
}

export interface RealTimeResponseApiRTRDeleteSessionRequest {
    sessionId: string;
}

export interface RealTimeResponseApiRTRExecuteActiveResponderCommandRequest {
    body: DomainCommandExecuteRequest;
}

export interface RealTimeResponseApiRTRExecuteCommandRequest {
    body: DomainCommandExecuteRequest;
}

export interface RealTimeResponseApiRTRGetExtractedFileContentsRequest {
    sessionId: string;
    sha256: string;
    filename?: string;
}

export interface RealTimeResponseApiRTRInitSessionRequest {
    body: DomainInitRequest;
    timeout?: number;
    timeoutDuration?: string;
}

export interface RealTimeResponseApiRTRListAllSessionsRequest {
    offset?: string;
    limit?: number;
    sort?: string;
    filter?: string;
}

export interface RealTimeResponseApiRTRListFilesRequest {
    sessionId: string;
}

export interface RealTimeResponseApiRTRListFilesV2Request {
    sessionId: string;
}

export interface RealTimeResponseApiRTRListQueuedSessionsRequest {
    body: MsaIdsRequest;
}

export interface RealTimeResponseApiRTRListSessionsRequest {
    body: MsaIdsRequest;
}

export interface RealTimeResponseApiRTRPulseSessionRequest {
    body: DomainInitRequest;
}

/**
 *
 */
export class RealTimeResponseApi extends runtime.BaseAPI {
    /**
     * Batch executes a RTR active-responder command across the hosts mapped to the given batch ID.
     */
    async batchActiveResponderCmdRaw(
        requestParameters: RealTimeResponseApiBatchActiveResponderCmdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainMultiCommandExecuteResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling batchActiveResponderCmd().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        if (requestParameters["hostTimeoutDuration"] != null) {
            queryParameters["host_timeout_duration"] = requestParameters["hostTimeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-active-responder-command/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainBatchExecuteCommandRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainMultiCommandExecuteResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Batch executes a RTR active-responder command across the hosts mapped to the given batch ID.
     */
    async batchActiveResponderCmd(
        body: DomainBatchExecuteCommandRequest,
        timeout?: number,
        timeoutDuration?: string,
        hostTimeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainMultiCommandExecuteResponseWrapper> {
        const response = await this.batchActiveResponderCmdRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration, hostTimeoutDuration: hostTimeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Batch executes a RTR read-only command across the hosts mapped to the given batch ID.
     */
    async batchCmdRaw(
        requestParameters: RealTimeResponseApiBatchCmdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainMultiCommandExecuteResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling batchCmd().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        if (requestParameters["hostTimeoutDuration"] != null) {
            queryParameters["host_timeout_duration"] = requestParameters["hostTimeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-command/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainBatchExecuteCommandRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainMultiCommandExecuteResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Batch executes a RTR read-only command across the hosts mapped to the given batch ID.
     */
    async batchCmd(
        body: DomainBatchExecuteCommandRequest,
        timeout?: number,
        timeoutDuration?: string,
        hostTimeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainMultiCommandExecuteResponseWrapper> {
        const response = await this.batchCmdRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration, hostTimeoutDuration: hostTimeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Batch executes `get` command across hosts to retrieve files. After this call is made `GET /real-time-response/combined/batch-get-command/v1` is used to query for the results.
     */
    async batchGetCmdRaw(
        requestParameters: RealTimeResponseApiBatchGetCmdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainBatchGetCommandResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling batchGetCmd().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        if (requestParameters["hostTimeoutDuration"] != null) {
            queryParameters["host_timeout_duration"] = requestParameters["hostTimeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-get-command/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainBatchGetCommandRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBatchGetCommandResponseFromJSON(jsonValue));
    }

    /**
     * Batch executes `get` command across hosts to retrieve files. After this call is made `GET /real-time-response/combined/batch-get-command/v1` is used to query for the results.
     */
    async batchGetCmd(
        body: DomainBatchGetCommandRequest,
        timeout?: number,
        timeoutDuration?: string,
        hostTimeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainBatchGetCommandResponse> {
        const response = await this.batchGetCmdRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration, hostTimeoutDuration: hostTimeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the status of the specified batch get command.  Will return successful files when they are finished processing.
     */
    async batchGetCmdStatusRaw(
        requestParameters: RealTimeResponseApiBatchGetCmdStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainBatchGetCmdStatusResponse>> {
        if (requestParameters["batchGetCmdReqId"] == null) {
            throw new runtime.RequiredError("batchGetCmdReqId", 'Required parameter "batchGetCmdReqId" was null or undefined when calling batchGetCmdStatus().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        if (requestParameters["batchGetCmdReqId"] != null) {
            queryParameters["batch_get_cmd_req_id"] = requestParameters["batchGetCmdReqId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-get-command/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBatchGetCmdStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the status of the specified batch get command.  Will return successful files when they are finished processing.
     */
    async batchGetCmdStatus(
        batchGetCmdReqId: string,
        timeout?: number,
        timeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainBatchGetCmdStatusResponse> {
        const response = await this.batchGetCmdStatusRaw({ batchGetCmdReqId: batchGetCmdReqId, timeout: timeout, timeoutDuration: timeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Batch initialize a RTR session on multiple hosts.  Before any RTR commands can be used, an active session is needed on the host.
     */
    async batchInitSessionsRaw(
        requestParameters: RealTimeResponseApiBatchInitSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainBatchInitSessionResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling batchInitSessions().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        if (requestParameters["hostTimeoutDuration"] != null) {
            queryParameters["host_timeout_duration"] = requestParameters["hostTimeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-init-session/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainBatchInitSessionRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBatchInitSessionResponseFromJSON(jsonValue));
    }

    /**
     * Batch initialize a RTR session on multiple hosts.  Before any RTR commands can be used, an active session is needed on the host.
     */
    async batchInitSessions(
        body: DomainBatchInitSessionRequest,
        timeout?: number,
        timeoutDuration?: string,
        hostTimeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainBatchInitSessionResponse> {
        const response = await this.batchInitSessionsRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration, hostTimeoutDuration: hostTimeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Batch refresh a RTR session on multiple hosts. RTR sessions will expire after 10 minutes unless refreshed.
     */
    async batchRefreshSessionsRaw(
        requestParameters: RealTimeResponseApiBatchRefreshSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainBatchRefreshSessionResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling batchRefreshSessions().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/combined/batch-refresh-session/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainBatchRefreshSessionRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBatchRefreshSessionResponseFromJSON(jsonValue));
    }

    /**
     * Batch refresh a RTR session on multiple hosts. RTR sessions will expire after 10 minutes unless refreshed.
     */
    async batchRefreshSessions(
        body: DomainBatchRefreshSessionRequest,
        timeout?: number,
        timeoutDuration?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DomainBatchRefreshSessionResponse> {
        const response = await this.batchRefreshSessionsRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Get aggregates on session data.
     */
    async rTRAggregateSessionsRaw(
        requestParameters: RealTimeResponseApiRTRAggregateSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRAggregateSessions().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/aggregates/sessions/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(MsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Get aggregates on session data.
     */
    async rTRAggregateSessions(body: Array<MsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaAggregatesResponse> {
        const response = await this.rTRAggregateSessionsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get status of an executed active-responder command on a single host.
     */
    async rTRCheckActiveResponderCommandStatusRaw(
        requestParameters: RealTimeResponseApiRTRCheckActiveResponderCommandStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainStatusResponseWrapper>> {
        if (requestParameters["cloudRequestId"] == null) {
            throw new runtime.RequiredError("cloudRequestId", 'Required parameter "cloudRequestId" was null or undefined when calling rTRCheckActiveResponderCommandStatus().');
        }

        if (requestParameters["sequenceId"] == null) {
            throw new runtime.RequiredError("sequenceId", 'Required parameter "sequenceId" was null or undefined when calling rTRCheckActiveResponderCommandStatus().');
        }

        const queryParameters: any = {};

        if (requestParameters["cloudRequestId"] != null) {
            queryParameters["cloud_request_id"] = requestParameters["cloudRequestId"];
        }

        if (requestParameters["sequenceId"] != null) {
            queryParameters["sequence_id"] = requestParameters["sequenceId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/active-responder-command/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainStatusResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get status of an executed active-responder command on a single host.
     */
    async rTRCheckActiveResponderCommandStatus(cloudRequestId: string, sequenceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainStatusResponseWrapper> {
        const response = await this.rTRCheckActiveResponderCommandStatusRaw({ cloudRequestId: cloudRequestId, sequenceId: sequenceId }, initOverrides);
        return await response.value();
    }

    /**
     * Get status of an executed command on a single host.
     */
    async rTRCheckCommandStatusRaw(
        requestParameters: RealTimeResponseApiRTRCheckCommandStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainStatusResponseWrapper>> {
        if (requestParameters["cloudRequestId"] == null) {
            throw new runtime.RequiredError("cloudRequestId", 'Required parameter "cloudRequestId" was null or undefined when calling rTRCheckCommandStatus().');
        }

        if (requestParameters["sequenceId"] == null) {
            throw new runtime.RequiredError("sequenceId", 'Required parameter "sequenceId" was null or undefined when calling rTRCheckCommandStatus().');
        }

        const queryParameters: any = {};

        if (requestParameters["cloudRequestId"] != null) {
            queryParameters["cloud_request_id"] = requestParameters["cloudRequestId"];
        }

        if (requestParameters["sequenceId"] != null) {
            queryParameters["sequence_id"] = requestParameters["sequenceId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/command/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainStatusResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get status of an executed command on a single host.
     */
    async rTRCheckCommandStatus(cloudRequestId: string, sequenceId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainStatusResponseWrapper> {
        const response = await this.rTRCheckCommandStatusRaw({ cloudRequestId: cloudRequestId, sequenceId: sequenceId }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a RTR session file.
     */
    async rTRDeleteFileRaw(requestParameters: RealTimeResponseApiRTRDeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling rTRDeleteFile().');
        }

        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRDeleteFile().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/file/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Delete a RTR session file.
     */
    async rTRDeleteFile(ids: string, sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaReplyMetaOnly> {
        const response = await this.rTRDeleteFileRaw({ ids: ids, sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a RTR session file.
     */
    async rTRDeleteFileV2Raw(requestParameters: RealTimeResponseApiRTRDeleteFileV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling rTRDeleteFileV2().');
        }

        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRDeleteFileV2().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/file/v2`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Delete a RTR session file.
     */
    async rTRDeleteFileV2(ids: string, sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaReplyMetaOnly> {
        const response = await this.rTRDeleteFileV2Raw({ ids: ids, sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a queued session command
     */
    async rTRDeleteQueuedSessionRaw(
        requestParameters: RealTimeResponseApiRTRDeleteQueuedSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRDeleteQueuedSession().');
        }

        if (requestParameters["cloudRequestId"] == null) {
            throw new runtime.RequiredError("cloudRequestId", 'Required parameter "cloudRequestId" was null or undefined when calling rTRDeleteQueuedSession().');
        }

        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        if (requestParameters["cloudRequestId"] != null) {
            queryParameters["cloud_request_id"] = requestParameters["cloudRequestId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/queued-sessions/command/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Delete a queued session command
     */
    async rTRDeleteQueuedSession(sessionId: string, cloudRequestId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaReplyMetaOnly> {
        const response = await this.rTRDeleteQueuedSessionRaw({ sessionId: sessionId, cloudRequestId: cloudRequestId }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a session.
     */
    async rTRDeleteSessionRaw(
        requestParameters: RealTimeResponseApiRTRDeleteSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRDeleteSession().');
        }

        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/sessions/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Delete a session.
     */
    async rTRDeleteSession(sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaReplyMetaOnly> {
        const response = await this.rTRDeleteSessionRaw({ sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Execute an active responder command on a single host.
     */
    async rTRExecuteActiveResponderCommandRaw(
        requestParameters: RealTimeResponseApiRTRExecuteActiveResponderCommandRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCommandExecuteResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRExecuteActiveResponderCommand().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/active-responder-command/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCommandExecuteRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCommandExecuteResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Execute an active responder command on a single host.
     */
    async rTRExecuteActiveResponderCommand(body: DomainCommandExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCommandExecuteResponseWrapper> {
        const response = await this.rTRExecuteActiveResponderCommandRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Execute a command on a single host.
     */
    async rTRExecuteCommandRaw(
        requestParameters: RealTimeResponseApiRTRExecuteCommandRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCommandExecuteResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRExecuteCommand().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/command/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCommandExecuteRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCommandExecuteResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Execute a command on a single host.
     */
    async rTRExecuteCommand(body: DomainCommandExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCommandExecuteResponseWrapper> {
        const response = await this.rTRExecuteCommandRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get RTR extracted file contents for specified session and sha256.
     */
    async rTRGetExtractedFileContentsRaw(
        requestParameters: RealTimeResponseApiRTRGetExtractedFileContentsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRGetExtractedFileContents().');
        }

        if (requestParameters["sha256"] == null) {
            throw new runtime.RequiredError("sha256", 'Required parameter "sha256" was null or undefined when calling rTRGetExtractedFileContents().');
        }

        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        if (requestParameters["sha256"] != null) {
            queryParameters["sha256"] = requestParameters["sha256"];
        }

        if (requestParameters["filename"] != null) {
            queryParameters["filename"] = requestParameters["filename"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/extracted-file-contents/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get RTR extracted file contents for specified session and sha256.
     */
    async rTRGetExtractedFileContents(sessionId: string, sha256: string, filename?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.rTRGetExtractedFileContentsRaw({ sessionId: sessionId, sha256: sha256, filename: filename }, initOverrides);
        return await response.value();
    }

    /**
     * Initialize a new session with the RTR cloud.
     */
    async rTRInitSessionRaw(
        requestParameters: RealTimeResponseApiRTRInitSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainInitResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRInitSession().');
        }

        const queryParameters: any = {};

        if (requestParameters["timeout"] != null) {
            queryParameters["timeout"] = requestParameters["timeout"];
        }

        if (requestParameters["timeoutDuration"] != null) {
            queryParameters["timeout_duration"] = requestParameters["timeoutDuration"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/sessions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainInitRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainInitResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Initialize a new session with the RTR cloud.
     */
    async rTRInitSession(body: DomainInitRequest, timeout?: number, timeoutDuration?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainInitResponseWrapper> {
        const response = await this.rTRInitSessionRaw({ body: body, timeout: timeout, timeoutDuration: timeoutDuration }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of session_ids.
     */
    async rTRListAllSessionsRaw(
        requestParameters: RealTimeResponseApiRTRListAllSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainListSessionsResponseMsa>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/queries/sessions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainListSessionsResponseMsaFromJSON(jsonValue));
    }

    /**
     * Get a list of session_ids.
     */
    async rTRListAllSessions(offset?: string, limit?: number, sort?: string, filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainListSessionsResponseMsa> {
        const response = await this.rTRListAllSessionsRaw({ offset: offset, limit: limit, sort: sort, filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of files for the specified RTR session.
     */
    async rTRListFilesRaw(
        requestParameters: RealTimeResponseApiRTRListFilesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainListFilesResponseWrapper>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRListFiles().');
        }

        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/file/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainListFilesResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get a list of files for the specified RTR session.
     */
    async rTRListFiles(sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainListFilesResponseWrapper> {
        const response = await this.rTRListFilesRaw({ sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of files for the specified RTR session.
     */
    async rTRListFilesV2Raw(
        requestParameters: RealTimeResponseApiRTRListFilesV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainListFilesV2ResponseWrapper>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError("sessionId", 'Required parameter "sessionId" was null or undefined when calling rTRListFilesV2().');
        }

        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["session_id"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/file/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainListFilesV2ResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get a list of files for the specified RTR session.
     */
    async rTRListFilesV2(sessionId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainListFilesV2ResponseWrapper> {
        const response = await this.rTRListFilesV2Raw({ sessionId: sessionId }, initOverrides);
        return await response.value();
    }

    /**
     * Get queued session metadata by session ID.
     */
    async rTRListQueuedSessionsRaw(
        requestParameters: RealTimeResponseApiRTRListQueuedSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainQueuedSessionResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRListQueuedSessions().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/queued-sessions/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaIdsRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainQueuedSessionResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get queued session metadata by session ID.
     */
    async rTRListQueuedSessions(body: MsaIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainQueuedSessionResponseWrapper> {
        const response = await this.rTRListQueuedSessionsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get session metadata by session id.
     */
    async rTRListSessionsRaw(
        requestParameters: RealTimeResponseApiRTRListSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainSessionResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRListSessions().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/sessions/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaIdsRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainSessionResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get session metadata by session id.
     */
    async rTRListSessions(body: MsaIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainSessionResponseWrapper> {
        const response = await this.rTRListSessionsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Refresh a session timeout on a single host.
     */
    async rTRPulseSessionRaw(
        requestParameters: RealTimeResponseApiRTRPulseSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainInitResponseWrapper>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling rTRPulseSession().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/real-time-response/entities/refresh-session/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainInitRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainInitResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Refresh a session timeout on a single host.
     */
    async rTRPulseSession(body: DomainInitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainInitResponseWrapper> {
        const response = await this.rTRPulseSessionRaw({ body: body }, initOverrides);
        return await response.value();
    }
}
