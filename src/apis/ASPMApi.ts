/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MsaReplyMetaOnly,
  TypesCreateIntegrationRequest,
  TypesCreateIntegrationTaskRequest,
  TypesEditTagRequest,
  TypesEditUniqueTagRequest,
  TypesErrorMessage,
  TypesExecutorNode,
  TypesGenericUserFacingRequest,
  TypesGetServicesRequest,
  TypesGetViolationTypesResponse,
  TypesIntegrationResponse,
  TypesIntegrationTaskResponse,
  TypesIntegrationTaskTestConnectionResponse,
  TypesListExecutorNodesResponse,
  TypesListIntegrationTasksResponse,
  TypesListIntegrationTypesResponse,
  TypesListIntegrationsResponse,
  TypesQueryRequest,
  TypesQueryResult,
  TypesRunIntegrationTaskRequest,
  TypesServiceNowDeploymentsResponse,
  TypesServiceNowServicesResponse,
  TypesTagsDataResponse,
  TypesUpdateIntegrationRequest,
  TypesUpdateIntegrationTaskRequest,
  TypesUpsertBusinessApplicationRequest,
} from '../models/index';
import {
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    TypesCreateIntegrationRequestFromJSON,
    TypesCreateIntegrationRequestToJSON,
    TypesCreateIntegrationTaskRequestFromJSON,
    TypesCreateIntegrationTaskRequestToJSON,
    TypesEditTagRequestFromJSON,
    TypesEditTagRequestToJSON,
    TypesEditUniqueTagRequestFromJSON,
    TypesEditUniqueTagRequestToJSON,
    TypesErrorMessageFromJSON,
    TypesErrorMessageToJSON,
    TypesExecutorNodeFromJSON,
    TypesExecutorNodeToJSON,
    TypesGenericUserFacingRequestFromJSON,
    TypesGenericUserFacingRequestToJSON,
    TypesGetServicesRequestFromJSON,
    TypesGetServicesRequestToJSON,
    TypesGetViolationTypesResponseFromJSON,
    TypesGetViolationTypesResponseToJSON,
    TypesIntegrationResponseFromJSON,
    TypesIntegrationResponseToJSON,
    TypesIntegrationTaskResponseFromJSON,
    TypesIntegrationTaskResponseToJSON,
    TypesIntegrationTaskTestConnectionResponseFromJSON,
    TypesIntegrationTaskTestConnectionResponseToJSON,
    TypesListExecutorNodesResponseFromJSON,
    TypesListExecutorNodesResponseToJSON,
    TypesListIntegrationTasksResponseFromJSON,
    TypesListIntegrationTasksResponseToJSON,
    TypesListIntegrationTypesResponseFromJSON,
    TypesListIntegrationTypesResponseToJSON,
    TypesListIntegrationsResponseFromJSON,
    TypesListIntegrationsResponseToJSON,
    TypesQueryRequestFromJSON,
    TypesQueryRequestToJSON,
    TypesQueryResultFromJSON,
    TypesQueryResultToJSON,
    TypesRunIntegrationTaskRequestFromJSON,
    TypesRunIntegrationTaskRequestToJSON,
    TypesServiceNowDeploymentsResponseFromJSON,
    TypesServiceNowDeploymentsResponseToJSON,
    TypesServiceNowServicesResponseFromJSON,
    TypesServiceNowServicesResponseToJSON,
    TypesTagsDataResponseFromJSON,
    TypesTagsDataResponseToJSON,
    TypesUpdateIntegrationRequestFromJSON,
    TypesUpdateIntegrationRequestToJSON,
    TypesUpdateIntegrationTaskRequestFromJSON,
    TypesUpdateIntegrationTaskRequestToJSON,
    TypesUpsertBusinessApplicationRequestFromJSON,
    TypesUpsertBusinessApplicationRequestToJSON,
} from '../models/index';

export interface CreateExecutorNodeRequest {
    body: TypesExecutorNode;
}

export interface CreateIntegrationRequest {
    body: TypesCreateIntegrationRequest;
}

export interface CreateIntegrationTaskRequest {
    body: TypesCreateIntegrationTaskRequest;
}

export interface DeleteExecutorNodeRequest {
    iD: number;
}

export interface DeleteIntegrationRequest {
    iD: number;
}

export interface DeleteIntegrationTaskRequest {
    iD: number;
}

export interface DeleteTagsRequest {
    body: TypesEditTagRequest;
}

export interface ExecuteQueryRequest {
    body: TypesQueryRequest;
}

export interface GetExecutorNodesRequest {
    nodeType: string;
    integrationType?: number;
}

export interface GetIntegrationTasksRequest {
    integrationTaskType?: number;
    category?: string;
}

export interface GetIntegrationsRequest {
    integrationType?: number;
    category?: string;
}

export interface GetServiceViolationTypesRequest {
    body: TypesGenericUserFacingRequest;
}

export interface GetServicesCountRequest {
    body: TypesGetServicesRequest;
}

export interface GetTagsRequest {
    isUnique?: boolean;
    tagName?: string;
    limit?: number;
    offset?: number;
    name?: Array<string>;
}

export interface RunIntegrationTaskRequest {
    iD: number;
    body: TypesRunIntegrationTaskRequest;
    category?: string;
}

export interface ServiceNowGetDeploymentsRequest {
    qlFilters?: string;
    limit?: number;
    offset?: number;
    orderBy?: string;
    direction?: string;
}

export interface ServiceNowGetServicesRequest {
    qlFilters?: string;
    limit?: number;
    offset?: number;
    orderBy?: string;
    direction?: string;
}

export interface UpdateExecutorNodeRequest {
    body: TypesExecutorNode;
}

export interface UpdateIntegrationRequest {
    iD: number;
    body: TypesUpdateIntegrationRequest;
}

export interface UpdateIntegrationTaskRequest {
    iD: number;
    body: TypesUpdateIntegrationTaskRequest;
}

export interface UpsertBusinessApplicationsRequest {
    body: TypesUpsertBusinessApplicationRequest;
}

export interface UpsertTagsRequest {
    body: TypesEditUniqueTagRequest;
}

/**
 * 
 */
export class ASPMApi extends runtime.BaseAPI {

    /**
     * Create a new relay node
     */
    async createExecutorNodeRaw(requestParameters: CreateExecutorNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesExecutorNode>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createExecutorNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/executor_nodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesExecutorNodeToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesExecutorNodeFromJSON(jsonValue));
    }

    /**
     * Create a new relay node
     */
    async createExecutorNode(body: TypesExecutorNode, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesExecutorNode> {
        const response = await this.createExecutorNodeRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new integration
     */
    async createIntegrationRaw(requestParameters: CreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesIntegrationResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateIntegrationRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesIntegrationResponseFromJSON(jsonValue));
    }

    /**
     * Create a new integration
     */
    async createIntegration(body: TypesCreateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesIntegrationResponse> {
        const response = await this.createIntegrationRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create new integration task.
     */
    async createIntegrationTaskRaw(requestParameters: CreateIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesIntegrationTaskResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createIntegrationTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesCreateIntegrationTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesIntegrationTaskResponseFromJSON(jsonValue));
    }

    /**
     * Create new integration task.
     */
    async createIntegrationTask(body: TypesCreateIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesIntegrationTaskResponse> {
        const response = await this.createIntegrationTaskRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a relay node
     */
    async deleteExecutorNodeRaw(requestParameters: DeleteExecutorNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling deleteExecutorNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/executor_nodes/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a relay node
     */
    async deleteExecutorNode(iD: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExecutorNodeRaw({ iD: iD }, initOverrides);
    }

    /**
     * Delete an existing integration by its ID
     */
    async deleteIntegrationRaw(requestParameters: DeleteIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling deleteIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integrations/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing integration by its ID
     */
    async deleteIntegration(iD: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw({ iD: iD }, initOverrides);
    }

    /**
     * Delete an existing integration task by its ID
     */
    async deleteIntegrationTaskRaw(requestParameters: DeleteIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling deleteIntegrationTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_tasks/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing integration task by its ID
     */
    async deleteIntegrationTask(iD: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationTaskRaw({ iD: iD }, initOverrides);
    }

    /**
     * Remove existing tags
     */
    async deleteTagsRaw(requestParameters: DeleteTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling deleteTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-user:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesEditTagRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove existing tags
     */
    async deleteTags(body: TypesEditTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagsRaw({ body: body }, initOverrides);
    }

    /**
     * Execute a query. The syntax used is identical to that of the query page.
     */
    async executeQueryRaw(requestParameters: ExecuteQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesQueryResult>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling executeQuery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesQueryRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesQueryResultFromJSON(jsonValue));
    }

    /**
     * Execute a query. The syntax used is identical to that of the query page.
     */
    async executeQuery(body: TypesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesQueryResult> {
        const response = await this.executeQueryRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get all the relay nodes
     */
    async getExecutorNodesRaw(requestParameters: GetExecutorNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesListExecutorNodesResponse>> {
        if (requestParameters['nodeType'] == null) {
            throw new runtime.RequiredError(
                'nodeType',
                'Required parameter "nodeType" was null or undefined when calling getExecutorNodes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['nodeType'] != null) {
            queryParameters['node_type'] = requestParameters['nodeType'];
        }

        if (requestParameters['integrationType'] != null) {
            queryParameters['integration_type'] = requestParameters['integrationType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/executor_nodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesListExecutorNodesResponseFromJSON(jsonValue));
    }

    /**
     * Get all the relay nodes
     */
    async getExecutorNodes(nodeType: string, integrationType?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesListExecutorNodesResponse> {
        const response = await this.getExecutorNodesRaw({ nodeType: nodeType, integrationType: integrationType }, initOverrides);
        return await response.value();
    }

    /**
     * Get all the integration tasks
     */
    async getIntegrationTasksRaw(requestParameters: GetIntegrationTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesListIntegrationTasksResponse>> {
        const queryParameters: any = {};

        if (requestParameters['integrationTaskType'] != null) {
            queryParameters['integration_task_type'] = requestParameters['integrationTaskType'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesListIntegrationTasksResponseFromJSON(jsonValue));
    }

    /**
     * Get all the integration tasks
     */
    async getIntegrationTasks(integrationTaskType?: number, category?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesListIntegrationTasksResponse> {
        const response = await this.getIntegrationTasksRaw({ integrationTaskType: integrationTaskType, category: category }, initOverrides);
        return await response.value();
    }

    /**
     * Get all the integration types
     */
    async getIntegrationTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesListIntegrationTypesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesListIntegrationTypesResponseFromJSON(jsonValue));
    }

    /**
     * Get all the integration types
     */
    async getIntegrationTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesListIntegrationTypesResponse> {
        const response = await this.getIntegrationTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all the integrations
     */
    async getIntegrationsRaw(requestParameters: GetIntegrationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesListIntegrationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['integrationType'] != null) {
            queryParameters['integration_type'] = requestParameters['integrationType'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesListIntegrationsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all the integrations
     */
    async getIntegrations(integrationType?: number, category?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesListIntegrationsResponse> {
        const response = await this.getIntegrationsRaw({ integrationType: integrationType, category: category }, initOverrides);
        return await response.value();
    }

    /**
     * Get the different types of violation
     */
    async getServiceViolationTypesRaw(requestParameters: GetServiceViolationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesGetViolationTypesResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getServiceViolationTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/services/violations/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: TypesGenericUserFacingRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesGetViolationTypesResponseFromJSON(jsonValue));
    }

    /**
     * Get the different types of violation
     */
    async getServiceViolationTypes(body: TypesGenericUserFacingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesGetViolationTypesResponse> {
        const response = await this.getServiceViolationTypesRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get the total amount of existing services
     */
    async getServicesCountRaw(requestParameters: GetServicesCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getServicesCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/services/count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesGetServicesRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the total amount of existing services
     */
    async getServicesCount(body: TypesGetServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getServicesCountRaw({ body: body }, initOverrides);
    }

    /**
     * Get all the tags
     */
    async getTagsRaw(requestParameters: GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesTagsDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters['isUnique'] != null) {
            queryParameters['isUnique'] = requestParameters['isUnique'];
        }

        if (requestParameters['tagName'] != null) {
            queryParameters['tagName'] = requestParameters['tagName'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesTagsDataResponseFromJSON(jsonValue));
    }

    /**
     * Get all the tags
     */
    async getTags(isUnique?: boolean, tagName?: string, limit?: number, offset?: number, name?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesTagsDataResponse> {
        const response = await this.getTagsRaw({ isUnique: isUnique, tagName: tagName, limit: limit, offset: offset, name: name }, initOverrides);
        return await response.value();
    }

    /**
     * Run an integration task by its ID
     */
    async runIntegrationTaskRaw(requestParameters: RunIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesIntegrationTaskTestConnectionResponse>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling runIntegrationTask().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling runIntegrationTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-user:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_tasks/{ID}/run`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesRunIntegrationTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesIntegrationTaskTestConnectionResponseFromJSON(jsonValue));
    }

    /**
     * Run an integration task by its ID
     */
    async runIntegrationTask(iD: number, body: TypesRunIntegrationTaskRequest, category?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesIntegrationTaskTestConnectionResponse> {
        const response = await this.runIntegrationTaskRaw({ iD: iD, body: body, category: category }, initOverrides);
        return await response.value();
    }

    /**
     */
    async serviceNowGetDeploymentsRaw(requestParameters: ServiceNowGetDeploymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesServiceNowDeploymentsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['qlFilters'] != null) {
            queryParameters['ql_filters'] = requestParameters['qlFilters'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/servicenow/deployments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesServiceNowDeploymentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async serviceNowGetDeployments(qlFilters?: string, limit?: number, offset?: number, orderBy?: string, direction?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesServiceNowDeploymentsResponse> {
        const response = await this.serviceNowGetDeploymentsRaw({ qlFilters: qlFilters, limit: limit, offset: offset, orderBy: orderBy, direction: direction }, initOverrides);
        return await response.value();
    }

    /**
     */
    async serviceNowGetServicesRaw(requestParameters: ServiceNowGetServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesServiceNowServicesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['qlFilters'] != null) {
            queryParameters['ql_filters'] = requestParameters['qlFilters'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-viewer:read"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/servicenow/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesServiceNowServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async serviceNowGetServices(qlFilters?: string, limit?: number, offset?: number, orderBy?: string, direction?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesServiceNowServicesResponse> {
        const response = await this.serviceNowGetServicesRaw({ qlFilters: qlFilters, limit: limit, offset: offset, orderBy: orderBy, direction: direction }, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing relay node
     */
    async updateExecutorNodeRaw(requestParameters: UpdateExecutorNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesExecutorNode>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateExecutorNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/executor_nodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesExecutorNodeToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesExecutorNodeFromJSON(jsonValue));
    }

    /**
     * Update an existing relay node
     */
    async updateExecutorNode(body: TypesExecutorNode, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesExecutorNode> {
        const response = await this.updateExecutorNodeRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration by its ID
     */
    async updateIntegrationRaw(requestParameters: UpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesIntegrationResponse>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling updateIntegration().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateIntegration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integrations/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateIntegrationRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesIntegrationResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing integration by its ID
     */
    async updateIntegration(iD: number, body: TypesUpdateIntegrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesIntegrationResponse> {
        const response = await this.updateIntegrationRaw({ iD: iD, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing integration task by its ID
     */
    async updateIntegrationTaskRaw(requestParameters: UpdateIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesIntegrationTaskResponse>> {
        if (requestParameters['iD'] == null) {
            throw new runtime.RequiredError(
                'iD',
                'Required parameter "iD" was null or undefined when calling updateIntegrationTask().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateIntegrationTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-admin:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/integration_tasks/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters['iD']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpdateIntegrationTaskRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesIntegrationTaskResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing integration task by its ID
     */
    async updateIntegrationTask(iD: number, body: TypesUpdateIntegrationTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesIntegrationTaskResponse> {
        const response = await this.updateIntegrationTaskRaw({ iD: iD, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create or Update Business Applications
     */
    async upsertBusinessApplicationsRaw(requestParameters: UpsertBusinessApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling upsertBusinessApplications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-user:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/business_applications`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesUpsertBusinessApplicationRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create or Update Business Applications
     */
    async upsertBusinessApplications(body: TypesUpsertBusinessApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.upsertBusinessApplicationsRaw({ body: body }, initOverrides);
    }

    /**
     * Create new or update existing tag. You can update unique tags table or regular tags table
     */
    async upsertTagsRaw(requestParameters: UpsertTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling upsertTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["aspm-user:write"]);
        }

        const response = await this.request({
            path: `/aspm-api-gateway/api/v1/tags`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TypesEditUniqueTagRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new or update existing tag. You can update unique tags table or regular tags table
     */
    async upsertTags(body: TypesEditUniqueTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.upsertTagsRaw({ body: body }, initOverrides);
    }

}
