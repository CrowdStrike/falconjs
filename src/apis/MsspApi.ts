/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    DomainCIDGroupMembersRequestV1,
    DomainCIDGroupMembersResponseV1,
    DomainCIDGroupsRequestV1,
    DomainCIDGroupsResponseV1,
    DomainChildrenResponseV1,
    DomainMSSPRoleRequestV1,
    DomainMSSPRoleResponseV1,
    DomainUserGroupMembersRequestV1,
    DomainUserGroupMembersResponseV1,
    DomainUserGroupsRequestV1,
    DomainUserGroupsResponseV1,
    MsaEntitiesResponse,
    MsaErrorsOnly,
    MsaQueryResponse,
    MsaReplyMetaOnly,
    MsaspecIdsRequest,
    MsaspecQueryResponse,
    MsaspecResponseFields,
} from "../models/index";
import {
    DomainCIDGroupMembersRequestV1FromJSON,
    DomainCIDGroupMembersRequestV1ToJSON,
    DomainCIDGroupMembersResponseV1FromJSON,
    DomainCIDGroupMembersResponseV1ToJSON,
    DomainCIDGroupsRequestV1FromJSON,
    DomainCIDGroupsRequestV1ToJSON,
    DomainCIDGroupsResponseV1FromJSON,
    DomainCIDGroupsResponseV1ToJSON,
    DomainChildrenResponseV1FromJSON,
    DomainChildrenResponseV1ToJSON,
    DomainMSSPRoleRequestV1FromJSON,
    DomainMSSPRoleRequestV1ToJSON,
    DomainMSSPRoleResponseV1FromJSON,
    DomainMSSPRoleResponseV1ToJSON,
    DomainUserGroupMembersRequestV1FromJSON,
    DomainUserGroupMembersRequestV1ToJSON,
    DomainUserGroupMembersResponseV1FromJSON,
    DomainUserGroupMembersResponseV1ToJSON,
    DomainUserGroupsRequestV1FromJSON,
    DomainUserGroupsRequestV1ToJSON,
    DomainUserGroupsResponseV1FromJSON,
    DomainUserGroupsResponseV1ToJSON,
    MsaEntitiesResponseFromJSON,
    MsaEntitiesResponseToJSON,
    MsaErrorsOnlyFromJSON,
    MsaErrorsOnlyToJSON,
    MsaQueryResponseFromJSON,
    MsaQueryResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecIdsRequestFromJSON,
    MsaspecIdsRequestToJSON,
    MsaspecQueryResponseFromJSON,
    MsaspecQueryResponseToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
} from "../models/index";

export interface AddCIDGroupMembersRequest {
    body: DomainCIDGroupMembersRequestV1;
}

export interface AddRoleRequest {
    body: DomainMSSPRoleRequestV1;
}

export interface AddUserGroupMembersRequest {
    body: DomainUserGroupMembersRequestV1;
}

export interface CreateCIDGroupsRequest {
    body: DomainCIDGroupsRequestV1;
}

export interface CreateUserGroupsRequest {
    body: DomainUserGroupsRequestV1;
}

export interface DeleteCIDGroupMembersRequest {
    body: DomainCIDGroupMembersRequestV1;
}

export interface DeleteCIDGroupMembersV2Request {
    body: DomainCIDGroupMembersRequestV1;
}

export interface DeleteCIDGroupsRequest {
    cidGroupIds: Array<string>;
}

export interface DeleteUserGroupMembersRequest {
    body: DomainUserGroupMembersRequestV1;
}

export interface DeleteUserGroupsRequest {
    userGroupIds: Array<string>;
}

export interface DeletedRolesRequest {
    body: DomainMSSPRoleRequestV1;
}

export interface GetCIDGroupByIdRequest {
    cidGroupIds: Array<string>;
}

export interface GetCIDGroupByIdV2Request {
    ids: Array<string>;
}

export interface GetCIDGroupMembersByRequest {
    cidGroupIds: Array<string>;
}

export interface GetCIDGroupMembersByV2Request {
    ids: Array<string>;
}

export interface GetChildrenRequest {
    ids: Array<string>;
}

export interface GetChildrenV2Request {
    body: MsaspecIdsRequest;
}

export interface GetRolesByIDRequest {
    ids: Array<string>;
}

export interface GetUserGroupMembersByIDRequest {
    userGroupIds: Array<string>;
}

export interface GetUserGroupMembersByIDV2Request {
    ids: Array<string>;
}

export interface GetUserGroupsByIDRequest {
    userGroupIds: Array<string>;
}

export interface GetUserGroupsByIDV2Request {
    ids: Array<string>;
}

export interface QueryCIDGroupMembersRequest {
    cid: string;
    sort?: QueryCIDGroupMembersSortEnum;
    offset?: number;
    limit?: number;
}

export interface QueryCIDGroupsRequest {
    name?: string;
    sort?: QueryCIDGroupsSortEnum;
    offset?: number;
    limit?: number;
}

export interface QueryChildrenRequest {
    filter?: string;
    sort?: QueryChildrenSortEnum;
    offset?: number;
    limit?: number;
}

export interface QueryRolesRequest {
    userGroupId?: string;
    cidGroupId?: string;
    roleId?: string;
    sort?: QueryRolesSortEnum;
    offset?: number;
    limit?: number;
}

export interface QueryUserGroupMembersRequest {
    userUuid: string;
    sort?: QueryUserGroupMembersSortEnum;
    offset?: number;
    limit?: number;
}

export interface QueryUserGroupsRequest {
    name?: string;
    sort?: QueryUserGroupsSortEnum;
    offset?: number;
    limit?: number;
}

export interface UpdateCIDGroupsRequest {
    body: DomainCIDGroupsRequestV1;
}

export interface UpdateUserGroupsRequest {
    body: DomainUserGroupsRequestV1;
}

/**
 *
 */
export class MsspApi extends runtime.BaseAPI {
    /**
     * Add new CID group member.
     */
    async addCIDGroupMembersRaw(
        requestParameters: AddCIDGroupMembersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCIDGroupMembersResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling addCIDGroupMembers.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-group-members/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCIDGroupMembersRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Add new CID group member.
     */
    async addCIDGroupMembers(body: DomainCIDGroupMembersRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupMembersResponseV1> {
        const response = await this.addCIDGroupMembersRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create a link between user group and CID group, with zero or more additional roles. The call does not replace any existing link between them. User group ID and CID group ID have to be specified in request.
     */
    async addRoleRaw(requestParameters: AddRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainMSSPRoleResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling addRole.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/mssp-roles/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainMSSPRoleRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainMSSPRoleResponseV1FromJSON(jsonValue));
    }

    /**
     * Create a link between user group and CID group, with zero or more additional roles. The call does not replace any existing link between them. User group ID and CID group ID have to be specified in request.
     */
    async addRole(body: DomainMSSPRoleRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainMSSPRoleResponseV1> {
        const response = await this.addRoleRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Add new user group member. Maximum 500 members allowed per user group.
     */
    async addUserGroupMembersRaw(
        requestParameters: AddUserGroupMembersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainUserGroupMembersResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling addUserGroupMembers.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-group-members/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserGroupMembersRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Add new user group member. Maximum 500 members allowed per user group.
     */
    async addUserGroupMembers(body: DomainUserGroupMembersRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupMembersResponseV1> {
        const response = await this.addUserGroupMembersRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create new CID groups. Name is a required field but description is an optional field. Maximum 500 CID groups allowed.
     */
    async createCIDGroupsRaw(requestParameters: CreateCIDGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCIDGroupsResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createCIDGroups.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-groups/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCIDGroupsRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Create new CID groups. Name is a required field but description is an optional field. Maximum 500 CID groups allowed.
     */
    async createCIDGroups(body: DomainCIDGroupsRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupsResponseV1> {
        const response = await this.createCIDGroupsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create new user groups. Name is a required field but description is an optional field. Maximum 500 user groups allowed per customer.
     */
    async createUserGroupsRaw(requestParameters: CreateUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainUserGroupsResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createUserGroups.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-groups/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserGroupsRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Create new user groups. Name is a required field but description is an optional field. Maximum 500 user groups allowed per customer.
     */
    async createUserGroups(body: DomainUserGroupsRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupsResponseV1> {
        const response = await this.createUserGroupsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use DELETE /entities/cid-group-members/v2. Delete CID group members.
     * @deprecated
     */
    async deleteCIDGroupMembersRaw(
        requestParameters: DeleteCIDGroupMembersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCIDGroupMembersResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling deleteCIDGroupMembers.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-group-members/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCIDGroupMembersRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use DELETE /entities/cid-group-members/v2. Delete CID group members.
     * @deprecated
     */
    async deleteCIDGroupMembers(body: DomainCIDGroupMembersRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupMembersResponseV1> {
        const response = await this.deleteCIDGroupMembersRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete CID group members. Prevents removal of a cid group a cid group if it is only part of one cid group.
     */
    async deleteCIDGroupMembersV2Raw(
        requestParameters: DeleteCIDGroupMembersV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCIDGroupMembersResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling deleteCIDGroupMembersV2.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-group-members/v2`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCIDGroupMembersRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Delete CID group members. Prevents removal of a cid group a cid group if it is only part of one cid group.
     */
    async deleteCIDGroupMembersV2(body: DomainCIDGroupMembersRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupMembersResponseV1> {
        const response = await this.deleteCIDGroupMembersV2Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete CID groups by ID.
     */
    async deleteCIDGroupsRaw(requestParameters: DeleteCIDGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaEntitiesResponse>> {
        if (requestParameters.cidGroupIds === null || requestParameters.cidGroupIds === undefined) {
            throw new runtime.RequiredError("cidGroupIds", "Required parameter requestParameters.cidGroupIds was null or undefined when calling deleteCIDGroups.");
        }

        const queryParameters: any = {};

        if (requestParameters.cidGroupIds) {
            queryParameters["cid_group_ids"] = requestParameters.cidGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-groups/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Delete CID groups by ID.
     */
    async deleteCIDGroups(cidGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaEntitiesResponse> {
        const response = await this.deleteCIDGroupsRaw({ cidGroupIds: cidGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Delete user group members entry.
     */
    async deleteUserGroupMembersRaw(
        requestParameters: DeleteUserGroupMembersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainUserGroupMembersResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling deleteUserGroupMembers.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-group-members/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserGroupMembersRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Delete user group members entry.
     */
    async deleteUserGroupMembers(body: DomainUserGroupMembersRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupMembersResponseV1> {
        const response = await this.deleteUserGroupMembersRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete user groups by ID.
     */
    async deleteUserGroupsRaw(requestParameters: DeleteUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaEntitiesResponse>> {
        if (requestParameters.userGroupIds === null || requestParameters.userGroupIds === undefined) {
            throw new runtime.RequiredError("userGroupIds", "Required parameter requestParameters.userGroupIds was null or undefined when calling deleteUserGroups.");
        }

        const queryParameters: any = {};

        if (requestParameters.userGroupIds) {
            queryParameters["user_group_ids"] = requestParameters.userGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-groups/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Delete user groups by ID.
     */
    async deleteUserGroups(userGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaEntitiesResponse> {
        const response = await this.deleteUserGroupsRaw({ userGroupIds: userGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Delete links or additional roles between user groups and CID groups. User group ID and CID group ID have to be specified in request. Only specified roles are removed if specified in request payload, else association between User Group and CID group is dissolved completely (if no roles specified).
     */
    async deletedRolesRaw(requestParameters: DeletedRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainMSSPRoleResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling deletedRoles.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/mssp-roles/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: DomainMSSPRoleRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainMSSPRoleResponseV1FromJSON(jsonValue));
    }

    /**
     * Delete links or additional roles between user groups and CID groups. User group ID and CID group ID have to be specified in request. Only specified roles are removed if specified in request payload, else association between User Group and CID group is dissolved completely (if no roles specified).
     */
    async deletedRoles(body: DomainMSSPRoleRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainMSSPRoleResponseV1> {
        const response = await this.deletedRolesRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /mssp/entities/cid-groups/v2. Get CID groups by ID.
     * @deprecated
     */
    async getCIDGroupByIdRaw(requestParameters: GetCIDGroupByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCIDGroupsResponseV1>> {
        if (requestParameters.cidGroupIds === null || requestParameters.cidGroupIds === undefined) {
            throw new runtime.RequiredError("cidGroupIds", "Required parameter requestParameters.cidGroupIds was null or undefined when calling getCIDGroupById.");
        }

        const queryParameters: any = {};

        if (requestParameters.cidGroupIds) {
            queryParameters["cid_group_ids"] = requestParameters.cidGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /mssp/entities/cid-groups/v2. Get CID groups by ID.
     * @deprecated
     */
    async getCIDGroupById(cidGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupsResponseV1> {
        const response = await this.getCIDGroupByIdRaw({ cidGroupIds: cidGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Get CID Groups by ID.
     */
    async getCIDGroupByIdV2Raw(requestParameters: GetCIDGroupByIdV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCIDGroupsResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getCIDGroupByIdV2.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-groups/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Get CID Groups by ID.
     */
    async getCIDGroupByIdV2(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupsResponseV1> {
        const response = await this.getCIDGroupByIdV2Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /mssp/entities/cid-group-members/v2. Get CID group members by CID group ID.
     * @deprecated
     */
    async getCIDGroupMembersByRaw(
        requestParameters: GetCIDGroupMembersByRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCIDGroupMembersResponseV1>> {
        if (requestParameters.cidGroupIds === null || requestParameters.cidGroupIds === undefined) {
            throw new runtime.RequiredError("cidGroupIds", "Required parameter requestParameters.cidGroupIds was null or undefined when calling getCIDGroupMembersBy.");
        }

        const queryParameters: any = {};

        if (requestParameters.cidGroupIds) {
            queryParameters["cid_group_ids"] = requestParameters.cidGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-group-members/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /mssp/entities/cid-group-members/v2. Get CID group members by CID group ID.
     * @deprecated
     */
    async getCIDGroupMembersBy(cidGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupMembersResponseV1> {
        const response = await this.getCIDGroupMembersByRaw({ cidGroupIds: cidGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Get CID group members by CID Group ID.
     */
    async getCIDGroupMembersByV2Raw(
        requestParameters: GetCIDGroupMembersByV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainCIDGroupMembersResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getCIDGroupMembersByV2.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-group-members/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Get CID group members by CID Group ID.
     */
    async getCIDGroupMembersByV2(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupMembersResponseV1> {
        const response = await this.getCIDGroupMembersByV2Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get link to child customer by child CID(s)
     */
    async getChildrenRaw(requestParameters: GetChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainChildrenResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getChildren.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/children/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainChildrenResponseV1FromJSON(jsonValue));
    }

    /**
     * Get link to child customer by child CID(s)
     */
    async getChildren(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainChildrenResponseV1> {
        const response = await this.getChildrenRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get link to child customer by child CID(s)
     */
    async getChildrenV2Raw(requestParameters: GetChildrenV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainChildrenResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling getChildrenV2.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/children/GET/v2`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaspecIdsRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainChildrenResponseV1FromJSON(jsonValue));
    }

    /**
     * Get link to child customer by child CID(s)
     */
    async getChildrenV2(body: MsaspecIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainChildrenResponseV1> {
        const response = await this.getChildrenV2Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get link between user group and CID group by ID. Link ID is a string consisting of multiple components, but should be treated as opaque.
     */
    async getRolesByIDRaw(requestParameters: GetRolesByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainMSSPRoleResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getRolesByID.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/mssp-roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainMSSPRoleResponseV1FromJSON(jsonValue));
    }

    /**
     * Get link between user group and CID group by ID. Link ID is a string consisting of multiple components, but should be treated as opaque.
     */
    async getRolesByID(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainMSSPRoleResponseV1> {
        const response = await this.getRolesByIDRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /mssp/entities/user-group-members/v2. Get user group members by user group ID.
     * @deprecated
     */
    async getUserGroupMembersByIDRaw(
        requestParameters: GetUserGroupMembersByIDRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainUserGroupMembersResponseV1>> {
        if (requestParameters.userGroupIds === null || requestParameters.userGroupIds === undefined) {
            throw new runtime.RequiredError("userGroupIds", "Required parameter requestParameters.userGroupIds was null or undefined when calling getUserGroupMembersByID.");
        }

        const queryParameters: any = {};

        if (requestParameters.userGroupIds) {
            queryParameters["user_group_ids"] = requestParameters.userGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-group-members/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /mssp/entities/user-group-members/v2. Get user group members by user group ID.
     * @deprecated
     */
    async getUserGroupMembersByID(userGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupMembersResponseV1> {
        const response = await this.getUserGroupMembersByIDRaw({ userGroupIds: userGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Get user group members by user group ID.
     */
    async getUserGroupMembersByIDV2Raw(
        requestParameters: GetUserGroupMembersByIDV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DomainUserGroupMembersResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getUserGroupMembersByIDV2.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-group-members/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupMembersResponseV1FromJSON(jsonValue));
    }

    /**
     * Get user group members by user group ID.
     */
    async getUserGroupMembersByIDV2(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupMembersResponseV1> {
        const response = await this.getUserGroupMembersByIDV2Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /entities/user-groups/v2. Get user groups by ID.
     * @deprecated
     */
    async getUserGroupsByIDRaw(requestParameters: GetUserGroupsByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainUserGroupsResponseV1>> {
        if (requestParameters.userGroupIds === null || requestParameters.userGroupIds === undefined) {
            throw new runtime.RequiredError("userGroupIds", "Required parameter requestParameters.userGroupIds was null or undefined when calling getUserGroupsByID.");
        }

        const queryParameters: any = {};

        if (requestParameters.userGroupIds) {
            queryParameters["user_group_ids"] = requestParameters.userGroupIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /entities/user-groups/v2. Get user groups by ID.
     * @deprecated
     */
    async getUserGroupsByID(userGroupIds: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupsResponseV1> {
        const response = await this.getUserGroupsByIDRaw({ userGroupIds: userGroupIds }, initOverrides);
        return await response.value();
    }

    /**
     * Get user groups by ID.
     */
    async getUserGroupsByIDV2Raw(requestParameters: GetUserGroupsByIDV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainUserGroupsResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getUserGroupsByIDV2.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-groups/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Get user groups by ID.
     */
    async getUserGroupsByIDV2(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupsResponseV1> {
        const response = await this.getUserGroupsByIDV2Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Query a CID groups members by associated CID.
     */
    async queryCIDGroupMembersRaw(requestParameters: QueryCIDGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        if (requestParameters.cid === null || requestParameters.cid === undefined) {
            throw new runtime.RequiredError("cid", "Required parameter requestParameters.cid was null or undefined when calling queryCIDGroupMembers.");
        }

        const queryParameters: any = {};

        if (requestParameters.cid !== undefined) {
            queryParameters["cid"] = requestParameters.cid;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/cid-group-members/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query a CID groups members by associated CID.
     */
    async queryCIDGroupMembers(
        cid: string,
        sort?: QueryCIDGroupMembersSortEnum,
        offset?: number,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaQueryResponse> {
        const response = await this.queryCIDGroupMembersRaw({ cid: cid, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query CID groups.
     */
    async queryCIDGroupsRaw(requestParameters: QueryCIDGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters["name"] = requestParameters.name;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/cid-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query CID groups.
     */
    async queryCIDGroups(name?: string, sort?: QueryCIDGroupsSortEnum, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.queryCIDGroupsRaw({ name: name, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query for customers linked as children
     */
    async queryChildrenRaw(requestParameters: QueryChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/children/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query for customers linked as children
     */
    async queryChildren(filter?: string, sort?: QueryChildrenSortEnum, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecQueryResponse> {
        const response = await this.queryChildrenRaw({ filter: filter, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query links between user groups and CID groups. At least one of CID group ID or user group ID should also be provided. Role ID is optional.
     */
    async queryRolesRaw(requestParameters: QueryRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userGroupId !== undefined) {
            queryParameters["user_group_id"] = requestParameters.userGroupId;
        }

        if (requestParameters.cidGroupId !== undefined) {
            queryParameters["cid_group_id"] = requestParameters.cidGroupId;
        }

        if (requestParameters.roleId !== undefined) {
            queryParameters["role_id"] = requestParameters.roleId;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/mssp-roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query links between user groups and CID groups. At least one of CID group ID or user group ID should also be provided. Role ID is optional.
     */
    async queryRoles(
        userGroupId?: string,
        cidGroupId?: string,
        roleId?: string,
        sort?: QueryRolesSortEnum,
        offset?: number,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaQueryResponse> {
        const response = await this.queryRolesRaw({ userGroupId: userGroupId, cidGroupId: cidGroupId, roleId: roleId, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query user group member by user UUID.
     */
    async queryUserGroupMembersRaw(requestParameters: QueryUserGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling queryUserGroupMembers.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/user-group-members/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query user group member by user UUID.
     */
    async queryUserGroupMembers(
        userUuid: string,
        sort?: QueryUserGroupMembersSortEnum,
        offset?: number,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaQueryResponse> {
        const response = await this.queryUserGroupMembersRaw({ userUuid: userUuid, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query user groups.
     */
    async queryUserGroupsRaw(requestParameters: QueryUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters["name"] = requestParameters.name;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/queries/user-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query user groups.
     */
    async queryUserGroups(name?: string, sort?: QueryUserGroupsSortEnum, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.queryUserGroupsRaw({ name: name, sort: sort, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Update existing CID groups. CID group ID is expected for each CID group definition provided in request body. Name is a required field but description is an optional field. Empty description will override existing value. CID group member(s) remain unaffected.
     */
    async updateCIDGroupsRaw(requestParameters: UpdateCIDGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainCIDGroupsResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateCIDGroups.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/cid-groups/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCIDGroupsRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainCIDGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Update existing CID groups. CID group ID is expected for each CID group definition provided in request body. Name is a required field but description is an optional field. Empty description will override existing value. CID group member(s) remain unaffected.
     */
    async updateCIDGroups(body: DomainCIDGroupsRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainCIDGroupsResponseV1> {
        const response = await this.updateCIDGroupsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update existing user group(s). User group ID is expected for each user group definition provided in request body. Name is a required field but description is an optional field. Empty description will override existing value. User group member(s) remain unaffected.
     */
    async updateUserGroupsRaw(requestParameters: UpdateUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainUserGroupsResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateUserGroups.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/mssp/entities/user-groups/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserGroupsRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainUserGroupsResponseV1FromJSON(jsonValue));
    }

    /**
     * Update existing user group(s). User group ID is expected for each user group definition provided in request body. Name is a required field but description is an optional field. Empty description will override existing value. User group member(s) remain unaffected.
     */
    async updateUserGroups(body: DomainUserGroupsRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainUserGroupsResponseV1> {
        const response = await this.updateUserGroupsRaw({ body: body }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const QueryCIDGroupMembersSortEnum = {
    Asc: "last_modified_timestamp|asc",
    Desc: "last_modified_timestamp|desc",
} as const;
export type QueryCIDGroupMembersSortEnum = (typeof QueryCIDGroupMembersSortEnum)[keyof typeof QueryCIDGroupMembersSortEnum];
/**
 * @export
 */
export const QueryCIDGroupsSortEnum = {
    LastModifiedTimestampAsc: "last_modified_timestamp|asc",
    LastModifiedTimestampDesc: "last_modified_timestamp|desc",
    NameAsc: "name|asc",
    NameDesc: "name|desc",
} as const;
export type QueryCIDGroupsSortEnum = (typeof QueryCIDGroupsSortEnum)[keyof typeof QueryCIDGroupsSortEnum];
/**
 * @export
 */
export const QueryChildrenSortEnum = {
    Asc: "last_modified_timestamp|asc",
    Desc: "last_modified_timestamp|desc",
} as const;
export type QueryChildrenSortEnum = (typeof QueryChildrenSortEnum)[keyof typeof QueryChildrenSortEnum];
/**
 * @export
 */
export const QueryRolesSortEnum = {
    Asc: "last_modified_timestamp|asc",
    Desc: "last_modified_timestamp|desc",
} as const;
export type QueryRolesSortEnum = (typeof QueryRolesSortEnum)[keyof typeof QueryRolesSortEnum];
/**
 * @export
 */
export const QueryUserGroupMembersSortEnum = {
    Asc: "last_modified_timestamp|asc",
    Desc: "last_modified_timestamp|desc",
} as const;
export type QueryUserGroupMembersSortEnum = (typeof QueryUserGroupMembersSortEnum)[keyof typeof QueryUserGroupMembersSortEnum];
/**
 * @export
 */
export const QueryUserGroupsSortEnum = {
    LastModifiedTimestampAsc: "last_modified_timestamp|asc",
    LastModifiedTimestampDesc: "last_modified_timestamp|desc",
    NameAsc: "name|asc",
    NameDesc: "name|desc",
} as const;
export type QueryUserGroupsSortEnum = (typeof QueryUserGroupsSortEnum)[keyof typeof QueryUserGroupsSortEnum];
