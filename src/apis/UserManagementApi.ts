/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiUserMetadataResponse,
    ApiUserRoleIDsResponse,
    ApiUserRoleResponse,
    DomainActionUserRolesRequest,
    DomainCreateUserRequest,
    DomainRoleIDs,
    DomainUpdateUserFields,
    DomainUpdateUserRequest,
    DomainUserActionRequest,
    DomainUserCreateRequest,
    FlightcontrolapiGetRolesResponse,
    FlightcontrolapiUserGrantResponse,
    FlightcontrolapiUserResponse,
    MsaEntitiesResponse,
    MsaQueryResponse,
    MsaReplyMetaOnly,
    MsaspecIdsRequest,
    MsaspecQueryResponse,
    MsaspecResponseFields,
} from "../models/index";
import {
    ApiUserMetadataResponseFromJSON,
    ApiUserMetadataResponseToJSON,
    ApiUserRoleIDsResponseFromJSON,
    ApiUserRoleIDsResponseToJSON,
    ApiUserRoleResponseFromJSON,
    ApiUserRoleResponseToJSON,
    DomainActionUserRolesRequestFromJSON,
    DomainActionUserRolesRequestToJSON,
    DomainCreateUserRequestFromJSON,
    DomainCreateUserRequestToJSON,
    DomainRoleIDsFromJSON,
    DomainRoleIDsToJSON,
    DomainUpdateUserFieldsFromJSON,
    DomainUpdateUserFieldsToJSON,
    DomainUpdateUserRequestFromJSON,
    DomainUpdateUserRequestToJSON,
    DomainUserActionRequestFromJSON,
    DomainUserActionRequestToJSON,
    DomainUserCreateRequestFromJSON,
    DomainUserCreateRequestToJSON,
    FlightcontrolapiGetRolesResponseFromJSON,
    FlightcontrolapiGetRolesResponseToJSON,
    FlightcontrolapiUserGrantResponseFromJSON,
    FlightcontrolapiUserGrantResponseToJSON,
    FlightcontrolapiUserResponseFromJSON,
    FlightcontrolapiUserResponseToJSON,
    MsaEntitiesResponseFromJSON,
    MsaEntitiesResponseToJSON,
    MsaQueryResponseFromJSON,
    MsaQueryResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecIdsRequestFromJSON,
    MsaspecIdsRequestToJSON,
    MsaspecQueryResponseFromJSON,
    MsaspecQueryResponseToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
} from "../models/index";

export interface CombinedUserRolesV1Request {
    userUuid: string;
    cid?: string;
    directOnly?: boolean;
    filter?: string;
    offset?: number;
    limit?: number;
    sort?: CombinedUserRolesV1SortEnum;
}

export interface CreateUserRequest {
    body: DomainUserCreateRequest;
}

export interface CreateUserV1Request {
    body: DomainCreateUserRequest;
    validateOnly?: boolean;
}

export interface DeleteUserRequest {
    userUuid: string;
}

export interface DeleteUserV1Request {
    userUuid: string;
}

export interface EntitiesRolesV1Request {
    ids: Array<string>;
    cid?: string;
}

export interface GetRolesRequest {
    ids: Array<string>;
}

export interface GetUserRoleIdsRequest {
    userUuid: string;
}

export interface GrantUserRoleIdsRequest {
    userUuid: string;
    body: DomainRoleIDs;
}

export interface QueriesRolesV1Request {
    cid?: string;
    userUuid?: string;
    action?: string;
}

export interface QueryUserV1Request {
    filter?: string;
    offset?: number;
    limit?: number;
    sort?: QueryUserV1SortEnum;
}

export interface RetrieveUserRequest {
    ids: Array<string>;
}

export interface RetrieveUserUUIDRequest {
    uid: Array<string>;
}

export interface RetrieveUsersGETV1Request {
    body: MsaspecIdsRequest;
}

export interface RevokeUserRoleIdsRequest {
    userUuid: string;
    ids: Array<string>;
}

export interface UpdateUserRequest {
    userUuid: string;
    body: DomainUpdateUserFields;
}

export interface UpdateUserV1Request {
    userUuid: string;
    body: DomainUpdateUserRequest;
}

export interface UserActionV1Request {
    body: DomainUserActionRequest;
}

export interface UserRolesActionV1Request {
    body: DomainActionUserRolesRequest;
}

/**
 *
 */
export class UserManagementApi extends runtime.BaseAPI {
    /**
     * Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
     */
    async combinedUserRolesV1Raw(
        requestParameters: CombinedUserRolesV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FlightcontrolapiUserGrantResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling combinedUserRolesV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        if (requestParameters.cid !== undefined) {
            queryParameters["cid"] = requestParameters.cid;
        }

        if (requestParameters.directOnly !== undefined) {
            queryParameters["direct_only"] = requestParameters.directOnly;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/combined/user-roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightcontrolapiUserGrantResponseFromJSON(jsonValue));
    }

    /**
     * Get User Grant(s). This endpoint lists both direct as well as flight control grants between a User and a Customer.
     */
    async combinedUserRolesV1(
        userUuid: string,
        cid?: string,
        directOnly?: boolean,
        filter?: string,
        offset?: number,
        limit?: number,
        sort?: CombinedUserRolesV1SortEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FlightcontrolapiUserGrantResponse> {
        const response = await this.combinedUserRolesV1Raw({ userUuid: userUuid, cid: cid, directOnly: directOnly, filter: filter, offset: offset, limit: limit, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/v1. Create a new user. After creating a user, assign one or more roles with POST /user-roles/entities/user-roles/v1
     * @deprecated
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserMetadataResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createUser.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/entities/users/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserCreateRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/v1. Create a new user. After creating a user, assign one or more roles with POST /user-roles/entities/user-roles/v1
     * @deprecated
     */
    async createUser(body: DomainUserCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserMetadataResponse> {
        const response = await this.createUserRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user. After creating a user, assign one or more roles with POST \'/user-management/entities/user-role-actions/v1\'
     */
    async createUserV1Raw(requestParameters: CreateUserV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlightcontrolapiUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createUserV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.validateOnly !== undefined) {
            queryParameters["validate_only"] = requestParameters.validateOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/users/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainCreateUserRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightcontrolapiUserResponseFromJSON(jsonValue));
    }

    /**
     * Create a new user. After creating a user, assign one or more roles with POST \'/user-management/entities/user-role-actions/v1\'
     */
    async createUserV1(body: DomainCreateUserRequest, validateOnly?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlightcontrolapiUserResponse> {
        const response = await this.createUserV1Raw({ body: body, validateOnly: validateOnly }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use DELETE /user-management/entities/users/v1. Delete a user permanently
     * @deprecated
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling deleteUser.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/entities/users/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use DELETE /user-management/entities/users/v1. Delete a user permanently
     * @deprecated
     */
    async deleteUser(userUuid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaReplyMetaOnly> {
        const response = await this.deleteUserRaw({ userUuid: userUuid }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user permanently.
     */
    async deleteUserV1Raw(requestParameters: DeleteUserV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecResponseFields>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling deleteUserV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/users/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Delete a user permanently.
     */
    async deleteUserV1(userUuid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecResponseFields> {
        const response = await this.deleteUserV1Raw({ userUuid: userUuid }, initOverrides);
        return await response.value();
    }

    /**
     * Get info about a role
     */
    async entitiesRolesV1Raw(requestParameters: EntitiesRolesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlightcontrolapiGetRolesResponse>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling entitiesRolesV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.cid !== undefined) {
            queryParameters["cid"] = requestParameters.cid;
        }

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightcontrolapiGetRolesResponseFromJSON(jsonValue));
    }

    /**
     * Get info about a role
     */
    async entitiesRolesV1(ids: Array<string>, cid?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlightcontrolapiGetRolesResponse> {
        const response = await this.entitiesRolesV1Raw({ ids: ids, cid: cid }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /user-management/queries/roles/v1. Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
     * @deprecated
     */
    async getAvailableRoleIdsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-roles/queries/user-role-ids-by-cid/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /user-management/queries/roles/v1. Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
     * @deprecated
     */
    async getAvailableRoleIds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.getAvailableRoleIdsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /user-management/entities/roles/v1. Get info about a role
     * @deprecated
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserRoleResponse>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getRoles.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-roles/entities/user-roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserRoleResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /user-management/entities/roles/v1. Get info about a role
     * @deprecated
     */
    async getRoles(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserRoleResponse> {
        const response = await this.getRolesRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /user-management/combined/user-roles/v1. Show role IDs of roles assigned to a user. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
     * @deprecated
     */
    async getUserRoleIdsRaw(requestParameters: GetUserRoleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling getUserRoleIds.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-roles/queries/user-role-ids-by-user-uuid/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /user-management/combined/user-roles/v1. Show role IDs of roles assigned to a user. For more information on each role, provide the role ID to `/customer/entities/roles/v1`.
     * @deprecated
     */
    async getUserRoleIds(userUuid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.getUserRoleIdsRaw({ userUuid: userUuid }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Assign one or more roles to a user
     * @deprecated
     */
    async grantUserRoleIdsRaw(requestParameters: GrantUserRoleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserRoleIDsResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling grantUserRoleIds.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling grantUserRoleIds.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-roles/entities/user-roles/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainRoleIDsToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserRoleIDsResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Assign one or more roles to a user
     * @deprecated
     */
    async grantUserRoleIds(userUuid: string, body: DomainRoleIDs, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserRoleIDsResponse> {
        const response = await this.grantUserRoleIdsRaw({ userUuid: userUuid, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/user-management/entities/roles/v1`.
     */
    async queriesRolesV1Raw(requestParameters: QueriesRolesV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cid !== undefined) {
            queryParameters["cid"] = requestParameters.cid;
        }

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        if (requestParameters.action !== undefined) {
            queryParameters["action"] = requestParameters.action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/queries/roles/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Show role IDs for all roles available in your customer account. For more information on each role, provide the role ID to `/user-management/entities/roles/v1`.
     */
    async queriesRolesV1(cid?: string, userUuid?: string, action?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecQueryResponse> {
        const response = await this.queriesRolesV1Raw({ cid: cid, userUuid: userUuid, action: action }, initOverrides);
        return await response.value();
    }

    /**
     * List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/user-management/entities/users/GET/v1`.
     */
    async queryUserV1Raw(requestParameters: QueryUserV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/queries/users/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/user-management/entities/users/GET/v1`.
     */
    async queryUserV1(filter?: string, offset?: number, limit?: number, sort?: QueryUserV1SortEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecQueryResponse> {
        const response = await this.queryUserV1Raw({ filter: filter, offset: offset, limit: limit, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/GET/v1. List the usernames (usually an email address) for all users in your customer account
     * @deprecated
     */
    async retrieveEmailsByCIDRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/queries/emails-by-cid/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/GET/v1. List the usernames (usually an email address) for all users in your customer account
     * @deprecated
     */
    async retrieveEmailsByCID(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.retrieveEmailsByCIDRaw(initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/GET/v1. Get info about a user
     * @deprecated
     */
    async retrieveUserRaw(requestParameters: RetrieveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserMetadataResponse>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling retrieveUser.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/entities/users/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use POST /user-management/entities/users/GET/v1. Get info about a user
     * @deprecated
     */
    async retrieveUser(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserMetadataResponse> {
        const response = await this.retrieveUserRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /user-management/queries/users/v1. Get a user\'s ID by providing a username (usually an email address)
     * @deprecated
     */
    async retrieveUserUUIDRaw(requestParameters: RetrieveUserUUIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError("uid", "Required parameter requestParameters.uid was null or undefined when calling retrieveUserUUID.");
        }

        const queryParameters: any = {};

        if (requestParameters.uid) {
            queryParameters["uid"] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/queries/user-uuids-by-email/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /user-management/queries/users/v1. Get a user\'s ID by providing a username (usually an email address)
     * @deprecated
     */
    async retrieveUserUUID(uid: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.retrieveUserUUIDRaw({ uid: uid }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use GET /user-management/queries/users/v1. List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/users/entities/user/v1`.
     * @deprecated
     */
    async retrieveUserUUIDsByCIDRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/queries/user-uuids-by-cid/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use GET /user-management/queries/users/v1. List user IDs for all users in your customer account. For more information on each user, provide the user ID to `/users/entities/user/v1`.
     * @deprecated
     */
    async retrieveUserUUIDsByCID(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.retrieveUserUUIDsByCIDRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get info about users including their name, UID and CID by providing user UUIDs
     */
    async retrieveUsersGETV1Raw(requestParameters: RetrieveUsersGETV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlightcontrolapiUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling retrieveUsersGETV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/users/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaspecIdsRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightcontrolapiUserResponseFromJSON(jsonValue));
    }

    /**
     * Get info about users including their name, UID and CID by providing user UUIDs
     */
    async retrieveUsersGETV1(body: MsaspecIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlightcontrolapiUserResponse> {
        const response = await this.retrieveUsersGETV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Revoke one or more roles from a user
     * @deprecated
     */
    async revokeUserRoleIdsRaw(requestParameters: RevokeUserRoleIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserRoleIDsResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling revokeUserRoleIds.");
        }

        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling revokeUserRoleIds.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-roles/entities/user-roles/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserRoleIDsResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use POST /user-management/entities/user-role-actions/v1. Revoke one or more roles from a user
     * @deprecated
     */
    async revokeUserRoleIds(userUuid: string, ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserRoleIDsResponse> {
        const response = await this.revokeUserRoleIdsRaw({ userUuid: userUuid, ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Deprecated : Please use PATCH /user-management/entities/users/v1. Modify an existing user\'s first or last name
     * @deprecated
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserMetadataResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling updateUser.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateUser.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/users/entities/users/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUpdateUserFieldsToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Deprecated : Please use PATCH /user-management/entities/users/v1. Modify an existing user\'s first or last name
     * @deprecated
     */
    async updateUser(userUuid: string, body: DomainUpdateUserFields, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserMetadataResponse> {
        const response = await this.updateUserRaw({ userUuid: userUuid, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Modify an existing user\'s first or last name.
     */
    async updateUserV1Raw(requestParameters: UpdateUserV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlightcontrolapiUserResponse>> {
        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError("userUuid", "Required parameter requestParameters.userUuid was null or undefined when calling updateUserV1.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateUserV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.userUuid !== undefined) {
            queryParameters["user_uuid"] = requestParameters.userUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/users/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUpdateUserRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightcontrolapiUserResponseFromJSON(jsonValue));
    }

    /**
     * Modify an existing user\'s first or last name.
     */
    async updateUserV1(userUuid: string, body: DomainUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlightcontrolapiUserResponse> {
        const response = await this.updateUserV1Raw({ userUuid: userUuid, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Apply actions to one or more User. Available action names: reset_2fa, reset_password. User UUIDs can be provided in `ids` param as part of request payload.
     */
    async userActionV1Raw(requestParameters: UserActionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecResponseFields>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling userActionV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/user-actions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUserActionRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Apply actions to one or more User. Available action names: reset_2fa, reset_password. User UUIDs can be provided in `ids` param as part of request payload.
     */
    async userActionV1(body: DomainUserActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecResponseFields> {
        const response = await this.userActionV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Grant or Revoke one or more role(s) to a user against a CID. User UUID, CID and Role ID(s) can be provided in request payload. Available Action(s) : grant, revoke
     */
    async userRolesActionV1Raw(requestParameters: UserRolesActionV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaspecResponseFields>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling userRolesActionV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/user-management/entities/user-role-actions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainActionUserRolesRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Grant or Revoke one or more role(s) to a user against a CID. User UUID, CID and Role ID(s) can be provided in request payload. Available Action(s) : grant, revoke
     */
    async userRolesActionV1(body: DomainActionUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaspecResponseFields> {
        const response = await this.userRolesActionV1Raw({ body: body }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const CombinedUserRolesV1SortEnum = {
    CidAsc: "cid|asc",
    CidDesc: "cid|desc",
    RoleNameAsc: "role_name|asc",
    RoleNameDesc: "role_name|desc",
    TypeAsc: "type|asc",
    TypeDesc: "type|desc",
} as const;
export type CombinedUserRolesV1SortEnum = (typeof CombinedUserRolesV1SortEnum)[keyof typeof CombinedUserRolesV1SortEnum];
/**
 * @export
 */
export const QueryUserV1SortEnum = {
    CidNameAsc: "cid_name|asc",
    CidNameDesc: "cid_name|desc",
    CreatedAtAsc: "created_at|asc",
    CreatedAtDesc: "created_at|desc",
    FirstNameAsc: "first_name|asc",
    FirstNameDesc: "first_name|desc",
    LastLoginAtAsc: "last_login_at|asc",
    LastLoginAtDesc: "last_login_at|desc",
    LastNameAsc: "last_name|asc",
    LastNameDesc: "last_name|desc",
    NameAsc: "name|asc",
    NameDesc: "name|desc",
    UidAsc: "uid|asc",
    UidDesc: "uid|desc",
} as const;
export type QueryUserV1SortEnum = (typeof QueryUserV1SortEnum)[keyof typeof QueryUserV1SortEnum];
