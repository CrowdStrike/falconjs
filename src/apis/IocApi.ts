/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiActionRespV1,
    ApiDeviceCountRespV1,
    ApiDevicesRanOnRespV1,
    ApiIndicatorCreateReqsV1,
    ApiIndicatorQueryRespV1,
    ApiIndicatorRespV1,
    ApiIndicatorUpdateReqsV1,
    ApiIndicatorsReportRequest,
    ApiProcessesRanOnRespV1,
    MsaAggregateQueryRequest,
    MsaAggregatesResponse,
    MsaEntitiesResponse,
    MsaReplyMetaOnly,
    MsaspecResponseFields,
} from "../models/index";
import {
    ApiActionRespV1FromJSON,
    ApiActionRespV1ToJSON,
    ApiDeviceCountRespV1FromJSON,
    ApiDeviceCountRespV1ToJSON,
    ApiDevicesRanOnRespV1FromJSON,
    ApiDevicesRanOnRespV1ToJSON,
    ApiIndicatorCreateReqsV1FromJSON,
    ApiIndicatorCreateReqsV1ToJSON,
    ApiIndicatorQueryRespV1FromJSON,
    ApiIndicatorQueryRespV1ToJSON,
    ApiIndicatorRespV1FromJSON,
    ApiIndicatorRespV1ToJSON,
    ApiIndicatorUpdateReqsV1FromJSON,
    ApiIndicatorUpdateReqsV1ToJSON,
    ApiIndicatorsReportRequestFromJSON,
    ApiIndicatorsReportRequestToJSON,
    ApiProcessesRanOnRespV1FromJSON,
    ApiProcessesRanOnRespV1ToJSON,
    MsaAggregateQueryRequestFromJSON,
    MsaAggregateQueryRequestToJSON,
    MsaAggregatesResponseFromJSON,
    MsaAggregatesResponseToJSON,
    MsaEntitiesResponseFromJSON,
    MsaEntitiesResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
} from "../models/index";

export interface IocApiActionGetV1Request {
    ids?: Array<string>;
}

export interface IocApiActionQueryV1Request {
    offset?: string;
    limit?: number;
}

export interface IocApiGetIndicatorsReportRequest {
    body: ApiIndicatorsReportRequest;
}

export interface IocApiIndicatorAggregateV1Request {
    body: MsaAggregateQueryRequest;
    filter?: string;
    fromParent?: boolean;
}

export interface IocApiIndicatorCombinedV1Request {
    filter?: string;
    offset?: number;
    limit?: number;
    sort?: IndicatorCombinedV1SortEnum;
    after?: string;
    fromParent?: boolean;
}

export interface IocApiIndicatorCreateV1Request {
    body: ApiIndicatorCreateReqsV1;
    retrodetects?: boolean;
    ignoreWarnings?: boolean;
}

export interface IocApiIndicatorDeleteV1Request {
    filter?: string;
    ids?: Array<string>;
    comment?: string;
    fromParent?: boolean;
}

export interface IocApiIndicatorGetDeviceCountV1Request {
    type: string;
    value: string;
}

export interface IocApiIndicatorGetDevicesRanOnV1Request {
    type: string;
    value: string;
    limit?: string;
    offset?: string;
}

export interface IocApiIndicatorGetProcessesRanOnV1Request {
    type: string;
    value: string;
    deviceId: string;
    limit?: string;
    offset?: string;
}

export interface IocApiIndicatorGetV1Request {
    ids: Array<string>;
}

export interface IocApiIndicatorSearchV1Request {
    filter?: string;
    offset?: number;
    limit?: number;
    sort?: IndicatorSearchV1SortEnum;
    after?: string;
    fromParent?: boolean;
}

export interface IocApiIndicatorUpdateV1Request {
    body: ApiIndicatorUpdateReqsV1;
    retrodetects?: boolean;
    ignoreWarnings?: boolean;
}

export interface IocApiIocTypeQueryV1Request {
    offset?: string;
    limit?: number;
}

export interface IocApiPlatformQueryV1Request {
    offset?: string;
    limit?: number;
}

export interface IocApiSeverityQueryV1Request {
    offset?: string;
    limit?: number;
}

/**
 *
 */
export class IocApi extends runtime.BaseAPI {
    /**
     * Get Actions by ids.
     */
    async actionGetV1Raw(requestParameters: IocApiActionGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiActionRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/actions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiActionRespV1FromJSON(jsonValue));
    }

    /**
     * Get Actions by ids.
     */
    async actionGetV1(ids?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiActionRespV1> {
        const response = await this.actionGetV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Query Actions.
     */
    async actionQueryV1Raw(requestParameters: IocApiActionQueryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/actions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Query Actions.
     */
    async actionQueryV1(offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.actionQueryV1Raw({ offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Launch an indicators report creation job
     */
    async getIndicatorsReportRaw(requestParameters: IocApiGetIndicatorsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaEntitiesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling getIndicatorsReport().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/indicators-reports/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiIndicatorsReportRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Launch an indicators report creation job
     */
    async getIndicatorsReport(body: ApiIndicatorsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaEntitiesResponse> {
        const response = await this.getIndicatorsReportRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get Indicators aggregates as specified via json in the request body.
     */
    async indicatorAggregateV1Raw(
        requestParameters: IocApiIndicatorAggregateV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling indicatorAggregateV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["fromParent"] != null) {
            queryParameters["from_parent"] = requestParameters["fromParent"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/aggregates/indicators/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaAggregateQueryRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Get Indicators aggregates as specified via json in the request body.
     */
    async indicatorAggregateV1(body: MsaAggregateQueryRequest, filter?: string, fromParent?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaAggregatesResponse> {
        const response = await this.indicatorAggregateV1Raw({ body: body, filter: filter, fromParent: fromParent }, initOverrides);
        return await response.value();
    }

    /**
     * Get Combined for Indicators.
     */
    async indicatorCombinedV1Raw(requestParameters: IocApiIndicatorCombinedV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["fromParent"] != null) {
            queryParameters["from_parent"] = requestParameters["fromParent"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/combined/indicator/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorRespV1FromJSON(jsonValue));
    }

    /**
     * Get Combined for Indicators.
     */
    async indicatorCombinedV1(
        filter?: string,
        offset?: number,
        limit?: number,
        sort?: IndicatorCombinedV1SortEnum,
        after?: string,
        fromParent?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApiIndicatorRespV1> {
        const response = await this.indicatorCombinedV1Raw({ filter: filter, offset: offset, limit: limit, sort: sort, after: after, fromParent: fromParent }, initOverrides);
        return await response.value();
    }

    /**
     * Create Indicators.
     */
    async indicatorCreateV1Raw(requestParameters: IocApiIndicatorCreateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorRespV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling indicatorCreateV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["retrodetects"] != null) {
            queryParameters["retrodetects"] = requestParameters["retrodetects"];
        }

        if (requestParameters["ignoreWarnings"] != null) {
            queryParameters["ignore_warnings"] = requestParameters["ignoreWarnings"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/indicators/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiIndicatorCreateReqsV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorRespV1FromJSON(jsonValue));
    }

    /**
     * Create Indicators.
     */
    async indicatorCreateV1(body: ApiIndicatorCreateReqsV1, retrodetects?: boolean, ignoreWarnings?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorRespV1> {
        const response = await this.indicatorCreateV1Raw({ body: body, retrodetects: retrodetects, ignoreWarnings: ignoreWarnings }, initOverrides);
        return await response.value();
    }

    /**
     * Delete Indicators by ids.
     */
    async indicatorDeleteV1Raw(requestParameters: IocApiIndicatorDeleteV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        if (requestParameters["fromParent"] != null) {
            queryParameters["from_parent"] = requestParameters["fromParent"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/indicators/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Delete Indicators by ids.
     */
    async indicatorDeleteV1(
        filter?: string,
        ids?: Array<string>,
        comment?: string,
        fromParent?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.indicatorDeleteV1Raw({ filter: filter, ids: ids, comment: comment, fromParent: fromParent }, initOverrides);
        return await response.value();
    }

    /**
     * Get the number of devices the indicator has run on
     */
    async indicatorGetDeviceCountV1Raw(
        requestParameters: IocApiIndicatorGetDeviceCountV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiDeviceCountRespV1>> {
        if (requestParameters["type"] == null) {
            throw new runtime.RequiredError("type", 'Required parameter "type" was null or undefined when calling indicatorGetDeviceCountV1().');
        }

        if (requestParameters["value"] == null) {
            throw new runtime.RequiredError("value", 'Required parameter "value" was null or undefined when calling indicatorGetDeviceCountV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["type"] != null) {
            queryParameters["type"] = requestParameters["type"];
        }

        if (requestParameters["value"] != null) {
            queryParameters["value"] = requestParameters["value"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/aggregates/indicators/device-count/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDeviceCountRespV1FromJSON(jsonValue));
    }

    /**
     * Get the number of devices the indicator has run on
     */
    async indicatorGetDeviceCountV1(type: string, value: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDeviceCountRespV1> {
        const response = await this.indicatorGetDeviceCountV1Raw({ type: type, value: value }, initOverrides);
        return await response.value();
    }

    /**
     * Get the IDs of devices the indicator has run on
     */
    async indicatorGetDevicesRanOnV1Raw(
        requestParameters: IocApiIndicatorGetDevicesRanOnV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiDevicesRanOnRespV1>> {
        if (requestParameters["type"] == null) {
            throw new runtime.RequiredError("type", 'Required parameter "type" was null or undefined when calling indicatorGetDevicesRanOnV1().');
        }

        if (requestParameters["value"] == null) {
            throw new runtime.RequiredError("value", 'Required parameter "value" was null or undefined when calling indicatorGetDevicesRanOnV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["type"] != null) {
            queryParameters["type"] = requestParameters["type"];
        }

        if (requestParameters["value"] != null) {
            queryParameters["value"] = requestParameters["value"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/indicators/devices/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDevicesRanOnRespV1FromJSON(jsonValue));
    }

    /**
     * Get the IDs of devices the indicator has run on
     */
    async indicatorGetDevicesRanOnV1(type: string, value: string, limit?: string, offset?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDevicesRanOnRespV1> {
        const response = await this.indicatorGetDevicesRanOnV1Raw({ type: type, value: value, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Get the number of processes the indicator has run on
     */
    async indicatorGetProcessesRanOnV1Raw(
        requestParameters: IocApiIndicatorGetProcessesRanOnV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiProcessesRanOnRespV1>> {
        if (requestParameters["type"] == null) {
            throw new runtime.RequiredError("type", 'Required parameter "type" was null or undefined when calling indicatorGetProcessesRanOnV1().');
        }

        if (requestParameters["value"] == null) {
            throw new runtime.RequiredError("value", 'Required parameter "value" was null or undefined when calling indicatorGetProcessesRanOnV1().');
        }

        if (requestParameters["deviceId"] == null) {
            throw new runtime.RequiredError("deviceId", 'Required parameter "deviceId" was null or undefined when calling indicatorGetProcessesRanOnV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["type"] != null) {
            queryParameters["type"] = requestParameters["type"];
        }

        if (requestParameters["value"] != null) {
            queryParameters["value"] = requestParameters["value"];
        }

        if (requestParameters["deviceId"] != null) {
            queryParameters["device_id"] = requestParameters["deviceId"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/indicators/processes/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiProcessesRanOnRespV1FromJSON(jsonValue));
    }

    /**
     * Get the number of processes the indicator has run on
     */
    async indicatorGetProcessesRanOnV1(
        type: string,
        value: string,
        deviceId: string,
        limit?: string,
        offset?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApiProcessesRanOnRespV1> {
        const response = await this.indicatorGetProcessesRanOnV1Raw({ type: type, value: value, deviceId: deviceId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Get Indicators by ids.
     */
    async indicatorGetV1Raw(requestParameters: IocApiIndicatorGetV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorRespV1>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling indicatorGetV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/indicators/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorRespV1FromJSON(jsonValue));
    }

    /**
     * Get Indicators by ids.
     */
    async indicatorGetV1(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorRespV1> {
        const response = await this.indicatorGetV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Search for Indicators.
     */
    async indicatorSearchV1Raw(requestParameters: IocApiIndicatorSearchV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["fromParent"] != null) {
            queryParameters["from_parent"] = requestParameters["fromParent"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/indicators/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Search for Indicators.
     */
    async indicatorSearchV1(
        filter?: string,
        offset?: number,
        limit?: number,
        sort?: IndicatorSearchV1SortEnum,
        after?: string,
        fromParent?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.indicatorSearchV1Raw({ filter: filter, offset: offset, limit: limit, sort: sort, after: after, fromParent: fromParent }, initOverrides);
        return await response.value();
    }

    /**
     * Update Indicators.
     */
    async indicatorUpdateV1Raw(requestParameters: IocApiIndicatorUpdateV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorRespV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling indicatorUpdateV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["retrodetects"] != null) {
            queryParameters["retrodetects"] = requestParameters["retrodetects"];
        }

        if (requestParameters["ignoreWarnings"] != null) {
            queryParameters["ignore_warnings"] = requestParameters["ignoreWarnings"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/entities/indicators/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: ApiIndicatorUpdateReqsV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorRespV1FromJSON(jsonValue));
    }

    /**
     * Update Indicators.
     */
    async indicatorUpdateV1(body: ApiIndicatorUpdateReqsV1, retrodetects?: boolean, ignoreWarnings?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorRespV1> {
        const response = await this.indicatorUpdateV1Raw({ body: body, retrodetects: retrodetects, ignoreWarnings: ignoreWarnings }, initOverrides);
        return await response.value();
    }

    /**
     * Query IOC Types.
     */
    async iocTypeQueryV1Raw(requestParameters: IocApiIocTypeQueryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/ioc-types/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Query IOC Types.
     */
    async iocTypeQueryV1(offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.iocTypeQueryV1Raw({ offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query Platforms.
     */
    async platformQueryV1Raw(requestParameters: IocApiPlatformQueryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/platforms/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Query Platforms.
     */
    async platformQueryV1(offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.platformQueryV1Raw({ offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Query Severities.
     */
    async severityQueryV1Raw(requestParameters: IocApiSeverityQueryV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiIndicatorQueryRespV1>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/iocs/queries/severities/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiIndicatorQueryRespV1FromJSON(jsonValue));
    }

    /**
     * Query Severities.
     */
    async severityQueryV1(offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiIndicatorQueryRespV1> {
        const response = await this.severityQueryV1Raw({ offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const IndicatorCombinedV1SortEnum = {
    Action: "action",
    AppliedGlobally: "applied_globally",
    MetadataAvHits: "metadata.av_hits",
    MetadataCompanyNameRaw: "metadata.company_name.raw",
    CreatedBy: "created_by",
    CreatedOn: "created_on",
    Expiration: "expiration",
    Expired: "expired",
    MetadataFilenameRaw: "metadata.filename.raw",
    ModifiedBy: "modified_by",
    ModifiedOn: "modified_on",
    MetadataOriginalFilenameRaw: "metadata.original_filename.raw",
    MetadataProductNameRaw: "metadata.product_name.raw",
    MetadataProductVersion: "metadata.product_version",
    SeverityNumber: "severity_number",
    Source: "source",
    Type: "type",
    Value: "value",
} as const;
export type IndicatorCombinedV1SortEnum = (typeof IndicatorCombinedV1SortEnum)[keyof typeof IndicatorCombinedV1SortEnum];
/**
 * @export
 */
export const IndicatorSearchV1SortEnum = {
    Action: "action",
    AppliedGlobally: "applied_globally",
    MetadataAvHits: "metadata.av_hits",
    MetadataCompanyNameRaw: "metadata.company_name.raw",
    CreatedBy: "created_by",
    CreatedOn: "created_on",
    Expiration: "expiration",
    Expired: "expired",
    MetadataFilenameRaw: "metadata.filename.raw",
    ModifiedBy: "modified_by",
    ModifiedOn: "modified_on",
    MetadataOriginalFilenameRaw: "metadata.original_filename.raw",
    MetadataProductNameRaw: "metadata.product_name.raw",
    MetadataProductVersion: "metadata.product_version",
    SeverityNumber: "severity_number",
    Source: "source",
    Type: "type",
    Value: "value",
} as const;
export type IndicatorSearchV1SortEnum = (typeof IndicatorSearchV1SortEnum)[keyof typeof IndicatorSearchV1SortEnum];
