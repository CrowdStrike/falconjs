/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CustomStorageObjectKeys, CustomStorageResponse, MsaReplyMetaOnly } from "../models/index";
import {
    CustomStorageObjectKeysFromJSON,
    CustomStorageObjectKeysToJSON,
    CustomStorageResponseFromJSON,
    CustomStorageResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface CustomStorageApiDeleteRequest {
    collectionName: string;
    objectKey: string;
    dryRun?: boolean;
}

export interface CustomStorageApiGetRequest {
    collectionName: string;
    objectKey: string;
}

export interface CustomStorageApiListRequest {
    collectionName: string;
    end?: string;
    limit?: number;
    start?: string;
}

export interface CustomStorageApiMetadataRequest {
    collectionName: string;
    objectKey: string;
}

export interface CustomStorageApiSearchRequest {
    collectionName: string;
    filter: string;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface CustomStorageApiUploadRequest {
    collectionName: string;
    objectKey: string;
    body: Blob;
    dryRun?: boolean;
    schemaVersion?: string;
}

/**
 *
 */
export class CustomStorageApi extends runtime.BaseAPI {
    /**
     * Delete the specified object
     */
    async _deleteRaw(requestParameters: CustomStorageApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomStorageResponse>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling _delete().');
        }

        if (requestParameters["objectKey"] == null) {
            throw new runtime.RequiredError("objectKey", 'Required parameter "objectKey" was null or undefined when calling _delete().');
        }

        const queryParameters: any = {};

        if (requestParameters["dryRun"] != null) {
            queryParameters["dry_run"] = requestParameters["dryRun"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:write"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"])))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters["objectKey"]))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomStorageResponseFromJSON(jsonValue));
    }

    /**
     * Delete the specified object
     */
    async _delete(collectionName: string, objectKey: string, dryRun?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomStorageResponse> {
        const response = await this._deleteRaw({ collectionName: collectionName, objectKey: objectKey, dryRun: dryRun }, initOverrides);
        return await response.value();
    }

    /**
     * Get the bytes for the specified object
     */
    async getRaw(requestParameters: CustomStorageApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling get().');
        }

        if (requestParameters["objectKey"] == null) {
            throw new runtime.RequiredError("objectKey", 'Required parameter "objectKey" was null or undefined when calling get().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:read"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"])))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters["objectKey"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the bytes for the specified object
     */
    async get(collectionName: string, objectKey: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getRaw({ collectionName: collectionName, objectKey: objectKey }, initOverrides);
        return await response.value();
    }

    /**
     * List the object keys in the specified collection in alphabetical order
     */
    async listRaw(requestParameters: CustomStorageApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomStorageObjectKeys>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling list().');
        }

        const queryParameters: any = {};

        if (requestParameters["end"] != null) {
            queryParameters["end"] = requestParameters["end"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["start"] != null) {
            queryParameters["start"] = requestParameters["start"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:read"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects`.replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomStorageObjectKeysFromJSON(jsonValue));
    }

    /**
     * List the object keys in the specified collection in alphabetical order
     */
    async list(collectionName: string, end?: string, limit?: number, start?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomStorageObjectKeys> {
        const response = await this.listRaw({ collectionName: collectionName, end: end, limit: limit, start: start }, initOverrides);
        return await response.value();
    }

    /**
     * Get the metadata for the specified object
     */
    async metadataRaw(requestParameters: CustomStorageApiMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomStorageResponse>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling metadata().');
        }

        if (requestParameters["objectKey"] == null) {
            throw new runtime.RequiredError("objectKey", 'Required parameter "objectKey" was null or undefined when calling metadata().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:read"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"])))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters["objectKey"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomStorageResponseFromJSON(jsonValue));
    }

    /**
     * Get the metadata for the specified object
     */
    async metadata(collectionName: string, objectKey: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomStorageResponse> {
        const response = await this.metadataRaw({ collectionName: collectionName, objectKey: objectKey }, initOverrides);
        return await response.value();
    }

    /**
     * Search for objects that match the specified filter criteria (returns metadata, not actual objects)
     */
    async searchRaw(requestParameters: CustomStorageApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomStorageResponse>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling search().');
        }

        if (requestParameters["filter"] == null) {
            throw new runtime.RequiredError("filter", 'Required parameter "filter" was null or undefined when calling search().');
        }

        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:read"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects`.replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"]))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomStorageResponseFromJSON(jsonValue));
    }

    /**
     * Search for objects that match the specified filter criteria (returns metadata, not actual objects)
     */
    async search(collectionName: string, filter: string, limit?: number, offset?: number, sort?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomStorageResponse> {
        const response = await this.searchRaw({ collectionName: collectionName, filter: filter, limit: limit, offset: offset, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     * Put the specified new object at the given key or overwrite an existing object at the given key
     */
    async uploadRaw(requestParameters: CustomStorageApiUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomStorageResponse>> {
        if (requestParameters["collectionName"] == null) {
            throw new runtime.RequiredError("collectionName", 'Required parameter "collectionName" was null or undefined when calling upload().');
        }

        if (requestParameters["objectKey"] == null) {
            throw new runtime.RequiredError("objectKey", 'Required parameter "objectKey" was null or undefined when calling upload().');
        }

        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling upload().');
        }

        const queryParameters: any = {};

        if (requestParameters["dryRun"] != null) {
            queryParameters["dry_run"] = requestParameters["dryRun"];
        }

        if (requestParameters["schemaVersion"] != null) {
            queryParameters["schema_version"] = requestParameters["schemaVersion"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/octet-stream";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom-storage:write"]);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters["collectionName"])))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters["objectKey"]))),
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"] as any,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomStorageResponseFromJSON(jsonValue));
    }

    /**
     * Put the specified new object at the given key or overwrite an existing object at the given key
     */
    async upload(
        collectionName: string,
        objectKey: string,
        body: Blob,
        dryRun?: boolean,
        schemaVersion?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CustomStorageResponse> {
        const response = await this.uploadRaw({ collectionName: collectionName, objectKey: objectKey, body: body, dryRun: dryRun, schemaVersion: schemaVersion }, initOverrides);
        return await response.value();
    }
}
