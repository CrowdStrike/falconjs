/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CustomType1255839303, CustomType3191042536, MsaReplyMetaOnly } from "../models/index";
import { CustomType1255839303FromJSON, CustomType1255839303ToJSON, CustomType3191042536FromJSON, CustomType3191042536ToJSON, MsaReplyMetaOnlyFromJSON, MsaReplyMetaOnlyToJSON } from "../models/index";

export interface DeleteObjectRequest {
    collectionName: string;
    objectKey: string;
    dryRun?: boolean;
}

export interface GetObjectRequest {
    collectionName: string;
    objectKey: string;
}

export interface GetObjectMetadataRequest {
    collectionName: string;
    objectKey: string;
}

export interface ListObjectsRequest {
    collectionName: string;
    end?: string;
    limit?: number;
    start?: string;
}

export interface PutObjectRequest {
    collectionName: string;
    objectKey: string;
    body: Blob;
    dryRun?: boolean;
    schemaVersion?: string;
}

export interface SearchObjectsRequest {
    collectionName: string;
    filter: string;
    limit?: number;
    offset?: number;
    sort?: string;
}

/**
 *
 */
export class CustomStorageApi extends runtime.BaseAPI {
    /**
     * Delete the specified object
     */
    async deleteObjectRaw(requestParameters: DeleteObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomType3191042536>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling deleteObject.");
        }

        if (requestParameters.objectKey === null || requestParameters.objectKey === undefined) {
            throw new runtime.RequiredError("objectKey", "Required parameter requestParameters.objectKey was null or undefined when calling deleteObject.");
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters["dry_run"] = requestParameters.dryRun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName)))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters.objectKey))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomType3191042536FromJSON(jsonValue));
    }

    /**
     * Delete the specified object
     */
    async deleteObject(collectionName: string, objectKey: string, dryRun?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomType3191042536> {
        const response = await this.deleteObjectRaw({ collectionName: collectionName, objectKey: objectKey, dryRun: dryRun }, initOverrides);
        return await response.value();
    }

    /**
     * Get the bytes for the specified object
     */
    async getObjectRaw(requestParameters: GetObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling getObject.");
        }

        if (requestParameters.objectKey === null || requestParameters.objectKey === undefined) {
            throw new runtime.RequiredError("objectKey", "Required parameter requestParameters.objectKey was null or undefined when calling getObject.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName)))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters.objectKey))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the bytes for the specified object
     */
    async getObject(collectionName: string, objectKey: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getObjectRaw({ collectionName: collectionName, objectKey: objectKey }, initOverrides);
        return await response.value();
    }

    /**
     * Get the metadata for the specified object
     */
    async getObjectMetadataRaw(requestParameters: GetObjectMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomType3191042536>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling getObjectMetadata.");
        }

        if (requestParameters.objectKey === null || requestParameters.objectKey === undefined) {
            throw new runtime.RequiredError("objectKey", "Required parameter requestParameters.objectKey was null or undefined when calling getObjectMetadata.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}/metadata`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName)))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters.objectKey))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomType3191042536FromJSON(jsonValue));
    }

    /**
     * Get the metadata for the specified object
     */
    async getObjectMetadata(collectionName: string, objectKey: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomType3191042536> {
        const response = await this.getObjectMetadataRaw({ collectionName: collectionName, objectKey: objectKey }, initOverrides);
        return await response.value();
    }

    /**
     * List the object keys in the specified collection in alphabetical order
     */
    async listObjectsRaw(requestParameters: ListObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomType1255839303>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling listObjects.");
        }

        const queryParameters: any = {};

        if (requestParameters.end !== undefined) {
            queryParameters["end"] = requestParameters.end;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.start !== undefined) {
            queryParameters["start"] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects`.replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomType1255839303FromJSON(jsonValue));
    }

    /**
     * List the object keys in the specified collection in alphabetical order
     */
    async listObjects(collectionName: string, end?: string, limit?: number, start?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomType1255839303> {
        const response = await this.listObjectsRaw({ collectionName: collectionName, end: end, limit: limit, start: start }, initOverrides);
        return await response.value();
    }

    /**
     * Put the specified new object at the given key or overwrite an existing object at the given key
     */
    async putObjectRaw(requestParameters: PutObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomType3191042536>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling putObject.");
        }

        if (requestParameters.objectKey === null || requestParameters.objectKey === undefined) {
            throw new runtime.RequiredError("objectKey", "Required parameter requestParameters.objectKey was null or undefined when calling putObject.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling putObject.");
        }

        const queryParameters: any = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters["dry_run"] = requestParameters.dryRun;
        }

        if (requestParameters.schemaVersion !== undefined) {
            queryParameters["schema_version"] = requestParameters.schemaVersion;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/octet-stream";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects/{object_key}`
                    .replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName)))
                    .replace(`{${"object_key"}}`, encodeURIComponent(String(requestParameters.objectKey))),
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body as any,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomType3191042536FromJSON(jsonValue));
    }

    /**
     * Put the specified new object at the given key or overwrite an existing object at the given key
     */
    async putObject(
        collectionName: string,
        objectKey: string,
        body: Blob,
        dryRun?: boolean,
        schemaVersion?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CustomType3191042536> {
        const response = await this.putObjectRaw({ collectionName: collectionName, objectKey: objectKey, body: body, dryRun: dryRun, schemaVersion: schemaVersion }, initOverrides);
        return await response.value();
    }

    /**
     * Search for objects that match the specified filter criteria (returns metadata, not actual objects)
     */
    async searchObjectsRaw(requestParameters: SearchObjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomType3191042536>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError("collectionName", "Required parameter requestParameters.collectionName was null or undefined when calling searchObjects.");
        }

        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError("filter", "Required parameter requestParameters.filter was null or undefined when calling searchObjects.");
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/customobjects/v1/collections/{collection_name}/objects`.replace(`{${"collection_name"}}`, encodeURIComponent(String(requestParameters.collectionName))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomType3191042536FromJSON(jsonValue));
    }

    /**
     * Search for objects that match the specified filter criteria (returns metadata, not actual objects)
     */
    async searchObjects(
        collectionName: string,
        filter: string,
        limit?: number,
        offset?: number,
        sort?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<CustomType3191042536> {
        const response = await this.searchObjectsRaw({ collectionName: collectionName, filter: filter, limit: limit, offset: offset, sort: sort }, initOverrides);
        return await response.value();
    }
}
