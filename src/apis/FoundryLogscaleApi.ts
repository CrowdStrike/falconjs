/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiEntitiesResponse,
    ApidomainDynamicExecuteSearchRequestV1,
    ApidomainQueryResponseWrapperV1,
    ApidomainRepoViewListItemWrapperV1,
    ApidomainSavedSearchExecuteRequestV1,
    ClientDataIngestResponseWrapperV1,
    MsaReplyMetaOnly,
    MsaspecResponseFields,
} from "../models/index";
import {
    ApiEntitiesResponseFromJSON,
    ApiEntitiesResponseToJSON,
    ApidomainDynamicExecuteSearchRequestV1FromJSON,
    ApidomainDynamicExecuteSearchRequestV1ToJSON,
    ApidomainQueryResponseWrapperV1FromJSON,
    ApidomainQueryResponseWrapperV1ToJSON,
    ApidomainRepoViewListItemWrapperV1FromJSON,
    ApidomainRepoViewListItemWrapperV1ToJSON,
    ApidomainSavedSearchExecuteRequestV1FromJSON,
    ApidomainSavedSearchExecuteRequestV1ToJSON,
    ClientDataIngestResponseWrapperV1FromJSON,
    ClientDataIngestResponseWrapperV1ToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
} from "../models/index";

export interface FoundryLogscaleApiCreateSavedSearchesDynamicExecuteAltV1Request {
    body: ApidomainDynamicExecuteSearchRequestV1;
    appId?: string;
    includeSchemaGeneration?: boolean;
    includeTestData?: boolean;
    inferJsonTypes?: boolean;
    matchResponseSchema?: boolean;
    metadata?: boolean;
    mode?: CreateSavedSearchesDynamicExecuteAltV1ModeEnum;
}

export interface FoundryLogscaleApiCreateSavedSearchesExecuteAltV1Request {
    body: ApidomainSavedSearchExecuteRequestV1;
    appId?: string;
    detailed?: boolean;
    includeTestData?: boolean;
    inferJsonTypes?: boolean;
    matchResponseSchema?: boolean;
    metadata?: boolean;
}

export interface FoundryLogscaleApiCreateSavedSearchesIngestAltV1Request {
    appId?: string;
}

export interface FoundryLogscaleApiDownloadResultsRequest {
    jobId: string;
    inferJsonTypes?: boolean;
    resultFormat?: DownloadResultsResultFormatEnum;
}

export interface FoundryLogscaleApiExecuteRequest {
    body: ApidomainSavedSearchExecuteRequestV1;
    appId?: string;
    detailed?: boolean;
    includeTestData?: boolean;
    inferJsonTypes?: boolean;
    matchResponseSchema?: boolean;
    metadata?: boolean;
}

export interface FoundryLogscaleApiExecuteDynamicRequest {
    body: ApidomainDynamicExecuteSearchRequestV1;
    appId?: string;
    includeSchemaGeneration?: boolean;
    includeTestData?: boolean;
    inferJsonTypes?: boolean;
    matchResponseSchema?: boolean;
    metadata?: boolean;
    mode?: ExecuteDynamicModeEnum;
}

export interface FoundryLogscaleApiGetSavedSearchesExecuteAltV1Request {
    jobId: string;
    appId?: string;
    inferJsonTypes?: boolean;
    jobStatusOnly?: boolean;
    limit?: string;
    matchResponseSchema?: boolean;
    metadata?: boolean;
    offset?: string;
}

export interface FoundryLogscaleApiGetSavedSearchesJobResultsDownloadAltV1Request {
    jobId: string;
    inferJsonTypes?: boolean;
    resultFormat?: GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum;
}

export interface FoundryLogscaleApiGetSearchResultsRequest {
    jobId: string;
    appId?: string;
    inferJsonTypes?: boolean;
    jobStatusOnly?: boolean;
    limit?: string;
    matchResponseSchema?: boolean;
    metadata?: boolean;
    offset?: string;
}

export interface FoundryLogscaleApiIngestDataRequest {
    dataContent?: string;
    dataFile?: Blob;
    tag?: Array<string>;
    tagSource?: string;
    testData?: boolean;
}

export interface FoundryLogscaleApiIngestDataAsyncV1Request {
    dataContent?: string;
    dataFile?: Blob;
    repo?: string;
    tag?: Array<string>;
    tagSource?: string;
    testData?: boolean;
}

export interface FoundryLogscaleApiListReposRequest {
    checkTestData?: boolean;
}

export interface FoundryLogscaleApiListViewsRequest {
    checkTestData?: boolean;
}

export interface FoundryLogscaleApiPopulateRequest {
    appId?: string;
}

/**
 *
 */
export class FoundryLogscaleApi extends runtime.BaseAPI {
    /**
     * Execute a dynamic saved search
     */
    async createSavedSearchesDynamicExecuteAltV1Raw(
        requestParameters: FoundryLogscaleApiCreateSavedSearchesDynamicExecuteAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createSavedSearchesDynamicExecuteAltV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["includeSchemaGeneration"] != null) {
            queryParameters["include_schema_generation"] = requestParameters["includeSchemaGeneration"];
        }

        if (requestParameters["includeTestData"] != null) {
            queryParameters["include_test_data"] = requestParameters["includeTestData"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        if (requestParameters["mode"] != null) {
            queryParameters["mode"] = requestParameters["mode"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-dynamic-execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainDynamicExecuteSearchRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a dynamic saved search
     */
    async createSavedSearchesDynamicExecuteAltV1(
        body: ApidomainDynamicExecuteSearchRequestV1,
        appId?: string,
        includeSchemaGeneration?: boolean,
        includeTestData?: boolean,
        inferJsonTypes?: boolean,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        mode?: CreateSavedSearchesDynamicExecuteAltV1ModeEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.createSavedSearchesDynamicExecuteAltV1Raw(
            {
                body: body,
                appId: appId,
                includeSchemaGeneration: includeSchemaGeneration,
                includeTestData: includeTestData,
                inferJsonTypes: inferJsonTypes,
                matchResponseSchema: matchResponseSchema,
                metadata: metadata,
                mode: mode,
            },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Execute a saved search
     */
    async createSavedSearchesExecuteAltV1Raw(
        requestParameters: FoundryLogscaleApiCreateSavedSearchesExecuteAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createSavedSearchesExecuteAltV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["detailed"] != null) {
            queryParameters["detailed"] = requestParameters["detailed"];
        }

        if (requestParameters["includeTestData"] != null) {
            queryParameters["include_test_data"] = requestParameters["includeTestData"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainSavedSearchExecuteRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a saved search
     */
    async createSavedSearchesExecuteAltV1(
        body: ApidomainSavedSearchExecuteRequestV1,
        appId?: string,
        detailed?: boolean,
        includeTestData?: boolean,
        inferJsonTypes?: boolean,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.createSavedSearchesExecuteAltV1Raw(
            { body: body, appId: appId, detailed: detailed, includeTestData: includeTestData, inferJsonTypes: inferJsonTypes, matchResponseSchema: matchResponseSchema, metadata: metadata },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Populate a saved search
     */
    async createSavedSearchesIngestAltV1Raw(
        requestParameters: FoundryLogscaleApiCreateSavedSearchesIngestAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Populate a saved search
     */
    async createSavedSearchesIngestAltV1(appId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.createSavedSearchesIngestAltV1Raw({ appId: appId }, initOverrides);
        return await response.value();
    }

    /**
     * Get the results of a saved search as a file
     */
    async downloadResultsRaw(requestParameters: FoundryLogscaleApiDownloadResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters["jobId"] == null) {
            throw new runtime.RequiredError("jobId", 'Required parameter "jobId" was null or undefined when calling downloadResults().');
        }

        const queryParameters: any = {};

        if (requestParameters["jobId"] != null) {
            queryParameters["job_id"] = requestParameters["jobId"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["resultFormat"] != null) {
            queryParameters["result_format"] = requestParameters["resultFormat"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/job-results-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the results of a saved search as a file
     */
    async downloadResults(jobId: string, inferJsonTypes?: boolean, resultFormat?: DownloadResultsResultFormatEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadResultsRaw({ jobId: jobId, inferJsonTypes: inferJsonTypes, resultFormat: resultFormat }, initOverrides);
        return await response.value();
    }

    /**
     * Execute a saved search
     */
    async executeRaw(requestParameters: FoundryLogscaleApiExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling execute().');
        }

        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["detailed"] != null) {
            queryParameters["detailed"] = requestParameters["detailed"];
        }

        if (requestParameters["includeTestData"] != null) {
            queryParameters["include_test_data"] = requestParameters["includeTestData"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainSavedSearchExecuteRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a saved search
     */
    async execute(
        body: ApidomainSavedSearchExecuteRequestV1,
        appId?: string,
        detailed?: boolean,
        includeTestData?: boolean,
        inferJsonTypes?: boolean,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.executeRaw(
            { body: body, appId: appId, detailed: detailed, includeTestData: includeTestData, inferJsonTypes: inferJsonTypes, matchResponseSchema: matchResponseSchema, metadata: metadata },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Execute a dynamic saved search
     */
    async executeDynamicRaw(
        requestParameters: FoundryLogscaleApiExecuteDynamicRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling executeDynamic().');
        }

        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["includeSchemaGeneration"] != null) {
            queryParameters["include_schema_generation"] = requestParameters["includeSchemaGeneration"];
        }

        if (requestParameters["includeTestData"] != null) {
            queryParameters["include_test_data"] = requestParameters["includeTestData"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        if (requestParameters["mode"] != null) {
            queryParameters["mode"] = requestParameters["mode"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute-dynamic/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainDynamicExecuteSearchRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a dynamic saved search
     */
    async executeDynamic(
        body: ApidomainDynamicExecuteSearchRequestV1,
        appId?: string,
        includeSchemaGeneration?: boolean,
        includeTestData?: boolean,
        inferJsonTypes?: boolean,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        mode?: ExecuteDynamicModeEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.executeDynamicRaw(
            {
                body: body,
                appId: appId,
                includeSchemaGeneration: includeSchemaGeneration,
                includeTestData: includeTestData,
                inferJsonTypes: inferJsonTypes,
                matchResponseSchema: matchResponseSchema,
                metadata: metadata,
                mode: mode,
            },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get the results of a saved search
     */
    async getSavedSearchesExecuteAltV1Raw(
        requestParameters: FoundryLogscaleApiGetSavedSearchesExecuteAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["jobId"] == null) {
            throw new runtime.RequiredError("jobId", 'Required parameter "jobId" was null or undefined when calling getSavedSearchesExecuteAltV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["jobId"] != null) {
            queryParameters["job_id"] = requestParameters["jobId"];
        }

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["jobStatusOnly"] != null) {
            queryParameters["job_status_only"] = requestParameters["jobStatusOnly"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-execute/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Get the results of a saved search
     */
    async getSavedSearchesExecuteAltV1(
        jobId: string,
        appId?: string,
        inferJsonTypes?: boolean,
        jobStatusOnly?: boolean,
        limit?: string,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        offset?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.getSavedSearchesExecuteAltV1Raw(
            { jobId: jobId, appId: appId, inferJsonTypes: inferJsonTypes, jobStatusOnly: jobStatusOnly, limit: limit, matchResponseSchema: matchResponseSchema, metadata: metadata, offset: offset },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadAltV1Raw(
        requestParameters: FoundryLogscaleApiGetSavedSearchesJobResultsDownloadAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters["jobId"] == null) {
            throw new runtime.RequiredError("jobId", 'Required parameter "jobId" was null or undefined when calling getSavedSearchesJobResultsDownloadAltV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["jobId"] != null) {
            queryParameters["job_id"] = requestParameters["jobId"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["resultFormat"] != null) {
            queryParameters["result_format"] = requestParameters["resultFormat"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-job-results-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadAltV1(
        jobId: string,
        inferJsonTypes?: boolean,
        resultFormat?: GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Blob> {
        const response = await this.getSavedSearchesJobResultsDownloadAltV1Raw({ jobId: jobId, inferJsonTypes: inferJsonTypes, resultFormat: resultFormat }, initOverrides);
        return await response.value();
    }

    /**
     * Get the results of a saved search
     */
    async getSearchResultsRaw(
        requestParameters: FoundryLogscaleApiGetSearchResultsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters["jobId"] == null) {
            throw new runtime.RequiredError("jobId", 'Required parameter "jobId" was null or undefined when calling getSearchResults().');
        }

        const queryParameters: any = {};

        if (requestParameters["jobId"] != null) {
            queryParameters["job_id"] = requestParameters["jobId"];
        }

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        if (requestParameters["inferJsonTypes"] != null) {
            queryParameters["infer_json_types"] = requestParameters["inferJsonTypes"];
        }

        if (requestParameters["jobStatusOnly"] != null) {
            queryParameters["job_status_only"] = requestParameters["jobStatusOnly"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["matchResponseSchema"] != null) {
            queryParameters["match_response_schema"] = requestParameters["matchResponseSchema"];
        }

        if (requestParameters["metadata"] != null) {
            queryParameters["metadata"] = requestParameters["metadata"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Get the results of a saved search
     */
    async getSearchResults(
        jobId: string,
        appId?: string,
        inferJsonTypes?: boolean,
        jobStatusOnly?: boolean,
        limit?: string,
        matchResponseSchema?: boolean,
        metadata?: boolean,
        offset?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.getSearchResultsRaw(
            { jobId: jobId, appId: appId, inferJsonTypes: inferJsonTypes, jobStatusOnly: jobStatusOnly, limit: limit, matchResponseSchema: matchResponseSchema, metadata: metadata, offset: offset },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Synchronously ingest data into the application repository
     */
    async ingestDataRaw(
        requestParameters: FoundryLogscaleApiIngestDataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters["dataContent"] != null) {
            formParams.append("data_content", requestParameters["dataContent"] as any);
        }

        if (requestParameters["dataFile"] != null) {
            formParams.append("data_file", requestParameters["dataFile"] as any);
        }

        if (requestParameters["tag"] != null) {
            formParams.append("tag", requestParameters["tag"]!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters["tagSource"] != null) {
            formParams.append("tag_source", requestParameters["tagSource"] as any);
        }

        if (requestParameters["testData"] != null) {
            formParams.append("test_data", requestParameters["testData"] as any);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/data-ingestion/ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Synchronously ingest data into the application repository
     */
    async ingestData(
        dataContent?: string,
        dataFile?: Blob,
        tag?: Array<string>,
        tagSource?: string,
        testData?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.ingestDataRaw({ dataContent: dataContent, dataFile: dataFile, tag: tag, tagSource: tagSource, testData: testData }, initOverrides);
        return await response.value();
    }

    /**
     * Asynchronously ingest data into the application repository
     */
    async ingestDataAsyncV1Raw(
        requestParameters: FoundryLogscaleApiIngestDataAsyncV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters["dataContent"] != null) {
            formParams.append("data_content", requestParameters["dataContent"] as any);
        }

        if (requestParameters["dataFile"] != null) {
            formParams.append("data_file", requestParameters["dataFile"] as any);
        }

        if (requestParameters["repo"] != null) {
            formParams.append("repo", requestParameters["repo"] as any);
        }

        if (requestParameters["tag"] != null) {
            formParams.append("tag", requestParameters["tag"]!.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters["tagSource"] != null) {
            formParams.append("tag_source", requestParameters["tagSource"] as any);
        }

        if (requestParameters["testData"] != null) {
            formParams.append("test_data", requestParameters["testData"] as any);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/data-ingestion/ingest-async/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Asynchronously ingest data into the application repository
     */
    async ingestDataAsyncV1(
        dataContent?: string,
        dataFile?: Blob,
        repo?: string,
        tag?: Array<string>,
        tagSource?: string,
        testData?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.ingestDataAsyncV1Raw({ dataContent: dataContent, dataFile: dataFile, repo: repo, tag: tag, tagSource: tagSource, testData: testData }, initOverrides);
        return await response.value();
    }

    /**
     * Lists available repositories and views
     */
    async listReposRaw(
        requestParameters: FoundryLogscaleApiListReposRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainRepoViewListItemWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters["checkTestData"] != null) {
            queryParameters["check_test_data"] = requestParameters["checkTestData"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/combined/repos/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainRepoViewListItemWrapperV1FromJSON(jsonValue));
    }

    /**
     * Lists available repositories and views
     */
    async listRepos(checkTestData?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApidomainRepoViewListItemWrapperV1> {
        const response = await this.listReposRaw({ checkTestData: checkTestData }, initOverrides);
        return await response.value();
    }

    /**
     * List views
     */
    async listViewsRaw(
        requestParameters: FoundryLogscaleApiListViewsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainRepoViewListItemWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters["checkTestData"] != null) {
            queryParameters["check_test_data"] = requestParameters["checkTestData"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/views/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainRepoViewListItemWrapperV1FromJSON(jsonValue));
    }

    /**
     * List views
     */
    async listViews(checkTestData?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApidomainRepoViewListItemWrapperV1> {
        const response = await this.listViewsRaw({ checkTestData: checkTestData }, initOverrides);
        return await response.value();
    }

    /**
     * Populate a saved search
     */
    async populateRaw(
        requestParameters: FoundryLogscaleApiPopulateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters["appId"] != null) {
            queryParameters["app_id"] = requestParameters["appId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Populate a saved search
     */
    async populate(appId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.populateRaw({ appId: appId }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const CreateSavedSearchesDynamicExecuteAltV1ModeEnum = {
    Sync: "sync",
    Async: "async",
} as const;
export type CreateSavedSearchesDynamicExecuteAltV1ModeEnum = (typeof CreateSavedSearchesDynamicExecuteAltV1ModeEnum)[keyof typeof CreateSavedSearchesDynamicExecuteAltV1ModeEnum];
/**
 * @export
 */
export const DownloadResultsResultFormatEnum = {
    Json: "json",
    Csv: "csv",
} as const;
export type DownloadResultsResultFormatEnum = (typeof DownloadResultsResultFormatEnum)[keyof typeof DownloadResultsResultFormatEnum];
/**
 * @export
 */
export const ExecuteDynamicModeEnum = {
    Sync: "sync",
    Async: "async",
} as const;
export type ExecuteDynamicModeEnum = (typeof ExecuteDynamicModeEnum)[keyof typeof ExecuteDynamicModeEnum];
/**
 * @export
 */
export const GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum = {
    Json: "json",
    Csv: "csv",
} as const;
export type GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum =
    (typeof GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum)[keyof typeof GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum];
