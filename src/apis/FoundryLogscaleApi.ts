/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiEntitiesResponse,
    ApidomainDynamicExecuteSearchRequestV1,
    ApidomainQueryResponseWrapperV1,
    ApidomainRepoViewListItemWrapperV1,
    ApidomainSavedSearchExecuteRequestV1,
    ClientDataIngestResponseWrapperV1,
    MsaReplyMetaOnly,
} from "../models/index";
import {
    ApiEntitiesResponseFromJSON,
    ApiEntitiesResponseToJSON,
    ApidomainDynamicExecuteSearchRequestV1FromJSON,
    ApidomainDynamicExecuteSearchRequestV1ToJSON,
    ApidomainQueryResponseWrapperV1FromJSON,
    ApidomainQueryResponseWrapperV1ToJSON,
    ApidomainRepoViewListItemWrapperV1FromJSON,
    ApidomainRepoViewListItemWrapperV1ToJSON,
    ApidomainSavedSearchExecuteRequestV1FromJSON,
    ApidomainSavedSearchExecuteRequestV1ToJSON,
    ClientDataIngestResponseWrapperV1FromJSON,
    ClientDataIngestResponseWrapperV1ToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface CreateSavedSearchesDynamicExecuteV1Request {
    body: ApidomainDynamicExecuteSearchRequestV1;
    appId?: string;
    includeSchemaGeneration?: boolean;
    includeTestData?: boolean;
    metadata?: boolean;
    mode?: CreateSavedSearchesDynamicExecuteV1ModeEnum;
}

export interface CreateSavedSearchesExecuteV1Request {
    body: ApidomainSavedSearchExecuteRequestV1;
    appId?: string;
    detailed?: boolean;
    includeTestData?: boolean;
    metadata?: boolean;
}

export interface CreateSavedSearchesIngestV1Request {
    appId?: string;
}

export interface FoundryLogscaleApiExecuteRequest {
    body: ApidomainSavedSearchExecuteRequestV1;
    appId?: string;
    detailed?: boolean;
    includeTestData?: boolean;
    metadata?: boolean;
}

export interface ExecuteDynamicRequest {
    body: ApidomainDynamicExecuteSearchRequestV1;
    appId?: string;
    includeSchemaGeneration?: boolean;
    includeTestData?: boolean;
    metadata?: boolean;
    mode?: ExecuteDynamicModeEnum;
}

export interface GetSavedSearchesExecuteV1Request {
    jobId: string;
    appId?: string;
    limit?: string;
    metadata?: boolean;
    offset?: string;
}

export interface GetSavedSearchesJobResultsDownloadAltV1Request {
    jobId: string;
    resultFormat?: GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum;
}

export interface GetSavedSearchesJobResultsDownloadV1Request {
    jobId: string;
    resultFormat?: GetSavedSearchesJobResultsDownloadV1ResultFormatEnum;
}

export interface IngestRequest {
    appId?: string;
}

export interface IngestDataV1Request {
    dataFile: Blob;
    tag?: Array<string>;
    tagSource?: string;
    testData?: boolean;
}

export interface ListReposRequest {
    checkTestData?: boolean;
}

export interface ListViewsRequest {
    checkTestData?: boolean;
}

export interface ResultRequest {
    jobId: string;
    appId?: string;
    limit?: string;
    metadata?: boolean;
    offset?: string;
}

/**
 *
 */
export class FoundryLogscaleApi extends runtime.BaseAPI {
    /**
     * Execute a dynamic saved search
     */
    async createSavedSearchesDynamicExecuteV1Raw(
        requestParameters: CreateSavedSearchesDynamicExecuteV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createSavedSearchesDynamicExecuteV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.includeSchemaGeneration !== undefined) {
            queryParameters["include_schema_generation"] = requestParameters.includeSchemaGeneration;
        }

        if (requestParameters.includeTestData !== undefined) {
            queryParameters["include_test_data"] = requestParameters.includeTestData;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters["mode"] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute-dynamic/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainDynamicExecuteSearchRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a dynamic saved search
     */
    async createSavedSearchesDynamicExecuteV1(
        body: ApidomainDynamicExecuteSearchRequestV1,
        appId?: string,
        includeSchemaGeneration?: boolean,
        includeTestData?: boolean,
        metadata?: boolean,
        mode?: CreateSavedSearchesDynamicExecuteV1ModeEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.createSavedSearchesDynamicExecuteV1Raw(
            { body: body, appId: appId, includeSchemaGeneration: includeSchemaGeneration, includeTestData: includeTestData, metadata: metadata, mode: mode },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Execute a saved search
     */
    async createSavedSearchesExecuteV1Raw(
        requestParameters: CreateSavedSearchesExecuteV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createSavedSearchesExecuteV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.detailed !== undefined) {
            queryParameters["detailed"] = requestParameters.detailed;
        }

        if (requestParameters.includeTestData !== undefined) {
            queryParameters["include_test_data"] = requestParameters.includeTestData;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainSavedSearchExecuteRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a saved search
     */
    async createSavedSearchesExecuteV1(
        body: ApidomainSavedSearchExecuteRequestV1,
        appId?: string,
        detailed?: boolean,
        includeTestData?: boolean,
        metadata?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.createSavedSearchesExecuteV1Raw({ body: body, appId: appId, detailed: detailed, includeTestData: includeTestData, metadata: metadata }, initOverrides);
        return await response.value();
    }

    /**
     * Populate a saved search
     */
    async createSavedSearchesIngestV1Raw(
        requestParameters: CreateSavedSearchesIngestV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Populate a saved search
     */
    async createSavedSearchesIngestV1(appId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.createSavedSearchesIngestV1Raw({ appId: appId }, initOverrides);
        return await response.value();
    }

    /**
     * Execute a saved search
     */
    async executeRaw(requestParameters: FoundryLogscaleApiExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling execute.");
        }

        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.detailed !== undefined) {
            queryParameters["detailed"] = requestParameters.detailed;
        }

        if (requestParameters.includeTestData !== undefined) {
            queryParameters["include_test_data"] = requestParameters.includeTestData;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainSavedSearchExecuteRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a saved search
     */
    async execute(
        body: ApidomainSavedSearchExecuteRequestV1,
        appId?: string,
        detailed?: boolean,
        includeTestData?: boolean,
        metadata?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.executeRaw({ body: body, appId: appId, detailed: detailed, includeTestData: includeTestData, metadata: metadata }, initOverrides);
        return await response.value();
    }

    /**
     * Execute a dynamic saved search
     */
    async executeDynamicRaw(requestParameters: ExecuteDynamicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling executeDynamic.");
        }

        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.includeSchemaGeneration !== undefined) {
            queryParameters["include_schema_generation"] = requestParameters.includeSchemaGeneration;
        }

        if (requestParameters.includeTestData !== undefined) {
            queryParameters["include_test_data"] = requestParameters.includeTestData;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters["mode"] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-dynamic-execute/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApidomainDynamicExecuteSearchRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Execute a dynamic saved search
     */
    async executeDynamic(
        body: ApidomainDynamicExecuteSearchRequestV1,
        appId?: string,
        includeSchemaGeneration?: boolean,
        includeTestData?: boolean,
        metadata?: boolean,
        mode?: ExecuteDynamicModeEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.executeDynamicRaw(
            { body: body, appId: appId, includeSchemaGeneration: includeSchemaGeneration, includeTestData: includeTestData, metadata: metadata, mode: mode },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Get the results of a saved search
     */
    async getSavedSearchesExecuteV1Raw(
        requestParameters: GetSavedSearchesExecuteV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling getSavedSearchesExecuteV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.jobId !== undefined) {
            queryParameters["job_id"] = requestParameters.jobId;
        }

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/execute/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Get the results of a saved search
     */
    async getSavedSearchesExecuteV1(
        jobId: string,
        appId?: string,
        limit?: string,
        metadata?: boolean,
        offset?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.getSavedSearchesExecuteV1Raw({ jobId: jobId, appId: appId, limit: limit, metadata: metadata, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadAltV1Raw(
        requestParameters: GetSavedSearchesJobResultsDownloadAltV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling getSavedSearchesJobResultsDownloadAltV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.jobId !== undefined) {
            queryParameters["job_id"] = requestParameters.jobId;
        }

        if (requestParameters.resultFormat !== undefined) {
            queryParameters["result_format"] = requestParameters.resultFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-job-results-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadAltV1(
        jobId: string,
        resultFormat?: GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Blob> {
        const response = await this.getSavedSearchesJobResultsDownloadAltV1Raw({ jobId: jobId, resultFormat: resultFormat }, initOverrides);
        return await response.value();
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadV1Raw(
        requestParameters: GetSavedSearchesJobResultsDownloadV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling getSavedSearchesJobResultsDownloadV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.jobId !== undefined) {
            queryParameters["job_id"] = requestParameters.jobId;
        }

        if (requestParameters.resultFormat !== undefined) {
            queryParameters["result_format"] = requestParameters.resultFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches/job-results-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the results of a saved search as a file
     */
    async getSavedSearchesJobResultsDownloadV1(
        jobId: string,
        resultFormat?: GetSavedSearchesJobResultsDownloadV1ResultFormatEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Blob> {
        const response = await this.getSavedSearchesJobResultsDownloadV1Raw({ jobId: jobId, resultFormat: resultFormat }, initOverrides);
        return await response.value();
    }

    /**
     * Populate a saved search
     */
    async ingestRaw(requestParameters: IngestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Populate a saved search
     */
    async ingest(appId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.ingestRaw({ appId: appId }, initOverrides);
        return await response.value();
    }

    /**
     * Ingest data into the application repository
     */
    async ingestDataV1Raw(requestParameters: IngestDataV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientDataIngestResponseWrapperV1>> {
        if (requestParameters.dataFile === null || requestParameters.dataFile === undefined) {
            throw new runtime.RequiredError("dataFile", "Required parameter requestParameters.dataFile was null or undefined when calling ingestDataV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.dataFile !== undefined) {
            formParams.append("data_file", requestParameters.dataFile as any);
        }

        if (requestParameters.tag) {
            formParams.append("tag", requestParameters.tag.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.tagSource !== undefined) {
            formParams.append("tag_source", requestParameters.tagSource as any);
        }

        if (requestParameters.testData !== undefined) {
            formParams.append("test_data", requestParameters.testData as any);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/data-ingestion/ingest/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientDataIngestResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Ingest data into the application repository
     */
    async ingestDataV1(
        dataFile: Blob,
        tag?: Array<string>,
        tagSource?: string,
        testData?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ClientDataIngestResponseWrapperV1> {
        const response = await this.ingestDataV1Raw({ dataFile: dataFile, tag: tag, tagSource: tagSource, testData: testData }, initOverrides);
        return await response.value();
    }

    /**
     * Lists available repositories and views
     */
    async listReposRaw(requestParameters: ListReposRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainRepoViewListItemWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters.checkTestData !== undefined) {
            queryParameters["check_test_data"] = requestParameters.checkTestData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/combined/repos/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainRepoViewListItemWrapperV1FromJSON(jsonValue));
    }

    /**
     * Lists available repositories and views
     */
    async listRepos(checkTestData?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApidomainRepoViewListItemWrapperV1> {
        const response = await this.listReposRaw({ checkTestData: checkTestData }, initOverrides);
        return await response.value();
    }

    /**
     * List views
     */
    async listViewsRaw(requestParameters: ListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainRepoViewListItemWrapperV1>> {
        const queryParameters: any = {};

        if (requestParameters.checkTestData !== undefined) {
            queryParameters["check_test_data"] = requestParameters.checkTestData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/views/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainRepoViewListItemWrapperV1FromJSON(jsonValue));
    }

    /**
     * List views
     */
    async listViews(checkTestData?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApidomainRepoViewListItemWrapperV1> {
        const response = await this.listViewsRaw({ checkTestData: checkTestData }, initOverrides);
        return await response.value();
    }

    /**
     * Get the results of a saved search
     */
    async resultRaw(requestParameters: ResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApidomainQueryResponseWrapperV1>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError("jobId", "Required parameter requestParameters.jobId was null or undefined when calling result.");
        }

        const queryParameters: any = {};

        if (requestParameters.jobId !== undefined) {
            queryParameters["job_id"] = requestParameters.jobId;
        }

        if (requestParameters.appId !== undefined) {
            queryParameters["app_id"] = requestParameters.appId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.metadata !== undefined) {
            queryParameters["metadata"] = requestParameters.metadata;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/loggingapi/entities/saved-searches-execute/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApidomainQueryResponseWrapperV1FromJSON(jsonValue));
    }

    /**
     * Get the results of a saved search
     */
    async result(
        jobId: string,
        appId?: string,
        limit?: string,
        metadata?: boolean,
        offset?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<ApidomainQueryResponseWrapperV1> {
        const response = await this.resultRaw({ jobId: jobId, appId: appId, limit: limit, metadata: metadata, offset: offset }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const CreateSavedSearchesDynamicExecuteV1ModeEnum = {
    Sync: "sync",
    Async: "async",
} as const;
export type CreateSavedSearchesDynamicExecuteV1ModeEnum = (typeof CreateSavedSearchesDynamicExecuteV1ModeEnum)[keyof typeof CreateSavedSearchesDynamicExecuteV1ModeEnum];
/**
 * @export
 */
export const ExecuteDynamicModeEnum = {
    Sync: "sync",
    Async: "async",
} as const;
export type ExecuteDynamicModeEnum = (typeof ExecuteDynamicModeEnum)[keyof typeof ExecuteDynamicModeEnum];
/**
 * @export
 */
export const GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum = {
    Json: "json",
    Csv: "csv",
} as const;
export type GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum =
    (typeof GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum)[keyof typeof GetSavedSearchesJobResultsDownloadAltV1ResultFormatEnum];
/**
 * @export
 */
export const GetSavedSearchesJobResultsDownloadV1ResultFormatEnum = {
    Json: "json",
    Csv: "csv",
} as const;
export type GetSavedSearchesJobResultsDownloadV1ResultFormatEnum = (typeof GetSavedSearchesJobResultsDownloadV1ResultFormatEnum)[keyof typeof GetSavedSearchesJobResultsDownloadV1ResultFormatEnum];
