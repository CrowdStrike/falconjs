/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiCreateMigrationRequestV1,
    ApiCreateMigrationResponseV1,
    ApiGetHostMigrationResponseV1,
    ApiGetMigrationDestinationsRequestBodyV1,
    ApiGetMigrationDestinationsResponseV1,
    ApiGetMigrationsResponseV1,
    MsaAggregateQueryRequest,
    MsaAggregatesResponse,
    MsaEntityActionRequestV3,
    MsaIdsRequest,
    MsaReplyMetaOnly,
    MsaspecQueryResponse,
    MsaspecResponseFields,
} from "../models/index";
import {
    ApiCreateMigrationRequestV1FromJSON,
    ApiCreateMigrationRequestV1ToJSON,
    ApiCreateMigrationResponseV1FromJSON,
    ApiCreateMigrationResponseV1ToJSON,
    ApiGetHostMigrationResponseV1FromJSON,
    ApiGetHostMigrationResponseV1ToJSON,
    ApiGetMigrationDestinationsRequestBodyV1FromJSON,
    ApiGetMigrationDestinationsRequestBodyV1ToJSON,
    ApiGetMigrationDestinationsResponseV1FromJSON,
    ApiGetMigrationDestinationsResponseV1ToJSON,
    ApiGetMigrationsResponseV1FromJSON,
    ApiGetMigrationsResponseV1ToJSON,
    MsaAggregateQueryRequestFromJSON,
    MsaAggregateQueryRequestToJSON,
    MsaAggregatesResponseFromJSON,
    MsaAggregatesResponseToJSON,
    MsaEntityActionRequestV3FromJSON,
    MsaEntityActionRequestV3ToJSON,
    MsaIdsRequestFromJSON,
    MsaIdsRequestToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecQueryResponseFromJSON,
    MsaspecQueryResponseToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
} from "../models/index";

export interface HostMigrationApiCreateMigrationV1Request {
    body: ApiCreateMigrationRequestV1;
}

export interface HostMigrationApiGetHostMigrationIDsV1Request {
    id: string;
    offset?: number;
    limit?: number;
    sort?: GetHostMigrationIDsV1SortEnum;
    filter?: string;
}

export interface HostMigrationApiGetHostMigrationsV1Request {
    body: MsaIdsRequest;
}

export interface HostMigrationApiGetMigrationDestinationsV1Request {
    body: ApiGetMigrationDestinationsRequestBodyV1;
}

export interface HostMigrationApiGetMigrationIDsV1Request {
    offset?: number;
    limit?: number;
    sort?: GetMigrationIDsV1SortEnum;
    filter?: string;
}

export interface HostMigrationApiGetMigrationsV1Request {
    ids: Array<string>;
}

export interface HostMigrationApiHostMigrationAggregatesV1Request {
    body: Array<MsaAggregateQueryRequest>;
}

export interface HostMigrationApiHostMigrationsActionsV1Request {
    id: string;
    actionName: HostMigrationsActionsV1ActionNameEnum;
    body: MsaEntityActionRequestV3;
}

export interface HostMigrationApiMigrationAggregatesV1Request {
    body: Array<MsaAggregateQueryRequest>;
}

export interface HostMigrationApiMigrationsActionsV1Request {
    actionName: MigrationsActionsV1ActionNameEnum;
    body: MsaEntityActionRequestV3;
}

/**
 *
 */
export class HostMigrationApi extends runtime.BaseAPI {
    /**
     * `device_ids` and `filter` are mutually exclusive. Filter takes precedence.
     * Create a device migration job.
     */
    async createMigrationV1Raw(
        requestParameters: HostMigrationApiCreateMigrationV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiCreateMigrationResponseV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createMigrationV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/migrations/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiCreateMigrationRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCreateMigrationResponseV1FromJSON(jsonValue));
    }

    /**
     * `device_ids` and `filter` are mutually exclusive. Filter takes precedence.
     * Create a device migration job.
     */
    async createMigrationV1(body: ApiCreateMigrationRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCreateMigrationResponseV1> {
        const response = await this.createMigrationV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Query host migration IDs.
     * Query host migration IDs.
     */
    async getHostMigrationIDsV1Raw(
        requestParameters: HostMigrationApiGetHostMigrationIDsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling getHostMigrationIDsV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["id"] != null) {
            queryParameters["id"] = requestParameters["id"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/queries/host-migrations/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query host migration IDs.
     * Query host migration IDs.
     */
    async getHostMigrationIDsV1(
        id: string,
        offset?: number,
        limit?: number,
        sort?: GetHostMigrationIDsV1SortEnum,
        filter?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaspecQueryResponse> {
        const response = await this.getHostMigrationIDsV1Raw({ id: id, offset: offset, limit: limit, sort: sort, filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * # Events   The `events` field describes actions that have occurred to the host migration entity. Each object is defined by the `action` field. When `user` is present, it is the user who performed the action. `time` is when the action occurred.  ## Event actions  ### added  This action is emitted when the host migration is created.  ``` { \"action\": \"added\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### assigned_static_host_groups  This action is emitted when a user assigns static host groups to a host migration. `ids` are the ids of the new host groups that have been assigned.  ``` { \"action\": \"assigned_static_host_groups\", \"ids\": [\"foo\", \"bar\"],  \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### removed_static_host_groups  This action is emitted when a user removes static host groups from a host migration. `ids` are the ids of the host groups that have been removed.  ``` { \"action\": \"removed_static_host_groups\", \"ids\": [\"foo\", \"bar\"],  \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### queued  This action is emitted when the migration is started.  ``` { \"action\": \"queued\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### failed  This action is emitted when the host migration fails. `reason` is the reason for failure. `reason` can be `unsupported_sensor_version`, `unsupported_sensor_platform`, `host_missing`, `migration_expired`, or `internal_error`.  ``` { \"action\": \"failed\", \"reason\": \"unsupported_sensor_version\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### cancelled  This action is emitted when the migration has been cancelled.  ``` { \"action\": \"cancelled\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### completed  This action is emitted when the host has successfully migrated.  ``` { \"action\": \"completed\", \"time\": \"2024-01-01T00:00:00Z\" } ```  # Status Details  The `status_details` field is an optional field that provides some more details about the status of a failed host migration. It may be omitted or empty from a response.  ### internal_error  This status detail is provided when an internal occurs during a host migration.  ### canceled_by_user  This status detail is provided when a migration has been canceled by a user.  ### host_missing  This status detail is provided when a host migration is canceled because the source host can no longer be found.  ### migration_expired  This status detail is provided when a host migration is expired because the migration is too old.  ### migration_already_in_progress  This status detail is provided when attempting to start a host migration on a host that is already in progress in another migration.  ### source_host_unsupported_version  This status detail is provided when attempting to create or start a host migration when the sensor is on an unsupported version.  ### source_host_unsupported_platform  This status detail is provided when attempting to create or start a host migration when the sensor is an unsupported platform.
     * Get host migration details.
     */
    async getHostMigrationsV1Raw(
        requestParameters: HostMigrationApiGetHostMigrationsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiGetHostMigrationResponseV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling getHostMigrationsV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/host-migrations/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaIdsRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGetHostMigrationResponseV1FromJSON(jsonValue));
    }

    /**
     * # Events   The `events` field describes actions that have occurred to the host migration entity. Each object is defined by the `action` field. When `user` is present, it is the user who performed the action. `time` is when the action occurred.  ## Event actions  ### added  This action is emitted when the host migration is created.  ``` { \"action\": \"added\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### assigned_static_host_groups  This action is emitted when a user assigns static host groups to a host migration. `ids` are the ids of the new host groups that have been assigned.  ``` { \"action\": \"assigned_static_host_groups\", \"ids\": [\"foo\", \"bar\"],  \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### removed_static_host_groups  This action is emitted when a user removes static host groups from a host migration. `ids` are the ids of the host groups that have been removed.  ``` { \"action\": \"removed_static_host_groups\", \"ids\": [\"foo\", \"bar\"],  \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### queued  This action is emitted when the migration is started.  ``` { \"action\": \"queued\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### failed  This action is emitted when the host migration fails. `reason` is the reason for failure. `reason` can be `unsupported_sensor_version`, `unsupported_sensor_platform`, `host_missing`, `migration_expired`, or `internal_error`.  ``` { \"action\": \"failed\", \"reason\": \"unsupported_sensor_version\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### cancelled  This action is emitted when the migration has been cancelled.  ``` { \"action\": \"cancelled\", \"user\": \"example@example.com\", \"time\": \"2024-01-01T00:00:00Z\" } ```  ### completed  This action is emitted when the host has successfully migrated.  ``` { \"action\": \"completed\", \"time\": \"2024-01-01T00:00:00Z\" } ```  # Status Details  The `status_details` field is an optional field that provides some more details about the status of a failed host migration. It may be omitted or empty from a response.  ### internal_error  This status detail is provided when an internal occurs during a host migration.  ### canceled_by_user  This status detail is provided when a migration has been canceled by a user.  ### host_missing  This status detail is provided when a host migration is canceled because the source host can no longer be found.  ### migration_expired  This status detail is provided when a host migration is expired because the migration is too old.  ### migration_already_in_progress  This status detail is provided when attempting to start a host migration on a host that is already in progress in another migration.  ### source_host_unsupported_version  This status detail is provided when attempting to create or start a host migration when the sensor is on an unsupported version.  ### source_host_unsupported_platform  This status detail is provided when attempting to create or start a host migration when the sensor is an unsupported platform.
     * Get host migration details.
     */
    async getHostMigrationsV1(body: MsaIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGetHostMigrationResponseV1> {
        const response = await this.getHostMigrationsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * `device_ids` and `filter` are mutually exclusive.
     * Get destinations for a migration.
     */
    async getMigrationDestinationsV1Raw(
        requestParameters: HostMigrationApiGetMigrationDestinationsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiGetMigrationDestinationsResponseV1>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling getMigrationDestinationsV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/migration-destinations/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiGetMigrationDestinationsRequestBodyV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGetMigrationDestinationsResponseV1FromJSON(jsonValue));
    }

    /**
     * `device_ids` and `filter` are mutually exclusive.
     * Get destinations for a migration.
     */
    async getMigrationDestinationsV1(body: ApiGetMigrationDestinationsRequestBodyV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGetMigrationDestinationsResponseV1> {
        const response = await this.getMigrationDestinationsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Query migration jobs.
     */
    async getMigrationIDsV1Raw(
        requestParameters: HostMigrationApiGetMigrationIDsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/queries/migrations/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query migration jobs.
     */
    async getMigrationIDsV1(
        offset?: number,
        limit?: number,
        sort?: GetMigrationIDsV1SortEnum,
        filter?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaspecQueryResponse> {
        const response = await this.getMigrationIDsV1Raw({ offset: offset, limit: limit, sort: sort, filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Get migration job details.
     */
    async getMigrationsV1Raw(
        requestParameters: HostMigrationApiGetMigrationsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ApiGetMigrationsResponseV1>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getMigrationsV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/migrations/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiGetMigrationsResponseV1FromJSON(jsonValue));
    }

    /**
     * Get migration job details.
     */
    async getMigrationsV1(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiGetMigrationsResponseV1> {
        const response = await this.getMigrationsV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get host migration aggregates as specified via json in request body.  # Supported Types  Both types support the following FQL filter properties: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`, `created_time`.  The values `groups` and `hostgroups` are aliases for `static_host_groups`.  The value `host_migration_id` is an alias for `id`  ## Terms `\"type\": \"terms\"`  Supported `field` values: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`.  `sort` must be done on the same value as `field` and include a direction (`asc` or `desc`). Supports all FQL fields except for `groups`, `hostgroups`, or `static_host_groups`.  Examples sort value: `status|asc` or `created_by|desc`   ## Date Range `\"type\": \"date_range\"`  Supported `field` fields: `created_time`.  Does not support `sort`, `size`, or `from`.
     * Get host migration aggregates as specified via json in request body.
     */
    async hostMigrationAggregatesV1Raw(
        requestParameters: HostMigrationApiHostMigrationAggregatesV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling hostMigrationAggregatesV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/aggregates/host-migrations/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(MsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Get host migration aggregates as specified via json in request body.  # Supported Types  Both types support the following FQL filter properties: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`, `created_time`.  The values `groups` and `hostgroups` are aliases for `static_host_groups`.  The value `host_migration_id` is an alias for `id`  ## Terms `\"type\": \"terms\"`  Supported `field` values: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`.  `sort` must be done on the same value as `field` and include a direction (`asc` or `desc`). Supports all FQL fields except for `groups`, `hostgroups`, or `static_host_groups`.  Examples sort value: `status|asc` or `created_by|desc`   ## Date Range `\"type\": \"date_range\"`  Supported `field` fields: `created_time`.  Does not support `sort`, `size`, or `from`.
     * Get host migration aggregates as specified via json in request body.
     */
    async hostMigrationAggregatesV1(body: Array<MsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaAggregatesResponse> {
        const response = await this.hostMigrationAggregatesV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * The available actions are `add_host_groups`, `remove_host_groups`, and `remove_hosts`.  FQL filter supports the following fields: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`, `created_time`.  These actions only works if the migration has not started.  `add_host_groups` adds static host groups to the selected hosts in a migration. This action accepts the following action parameter: `{ \"name\": \"host_group\": \"value\": \"$host_group_id\" }`. Action parameters can be repeated to add multiple static host groups in a single request.  `remove_host_groups` removes static host groups from the selected hosts in a migration. This action accepts the following action parameter: `{ \"name\": \"host_group\": \"value\": \"$host_group_id\" }`. Action parameters can be repeated to remove multiple static host groups in a single request.  `remove_hosts` removes the selected hosts from a migration. This action does not accept any action parameters.
     * Perform an action on host migrations.
     */
    async hostMigrationsActionsV1Raw(
        requestParameters: HostMigrationApiHostMigrationsActionsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling hostMigrationsActionsV1().');
        }

        if (requestParameters["actionName"] == null) {
            throw new runtime.RequiredError("actionName", 'Required parameter "actionName" was null or undefined when calling hostMigrationsActionsV1().');
        }

        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling hostMigrationsActionsV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["id"] != null) {
            queryParameters["id"] = requestParameters["id"];
        }

        if (requestParameters["actionName"] != null) {
            queryParameters["action_name"] = requestParameters["actionName"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/host-migrations-actions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaEntityActionRequestV3ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * The available actions are `add_host_groups`, `remove_host_groups`, and `remove_hosts`.  FQL filter supports the following fields: `groups`, `hostgroups`, `static_host_groups`, `hostname`, `status`, `target_cid`, `source_cid`, `migration_id`, `id`, `host_migration_id`, `created_time`.  These actions only works if the migration has not started.  `add_host_groups` adds static host groups to the selected hosts in a migration. This action accepts the following action parameter: `{ \"name\": \"host_group\": \"value\": \"$host_group_id\" }`. Action parameters can be repeated to add multiple static host groups in a single request.  `remove_host_groups` removes static host groups from the selected hosts in a migration. This action accepts the following action parameter: `{ \"name\": \"host_group\": \"value\": \"$host_group_id\" }`. Action parameters can be repeated to remove multiple static host groups in a single request.  `remove_hosts` removes the selected hosts from a migration. This action does not accept any action parameters.
     * Perform an action on host migrations.
     */
    async hostMigrationsActionsV1(
        id: string,
        actionName: HostMigrationsActionsV1ActionNameEnum,
        body: MsaEntityActionRequestV3,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaspecQueryResponse> {
        const response = await this.hostMigrationsActionsV1Raw({ id: id, actionName: actionName, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get migration aggregates as specified via json in request body.  # Supported Types  Both types support the following FQL filter props: `name`, `id`, `migration_id`, `target_cid`, `status`, `migration_status`, `created_by`, `created_time`.  The value `migration_status` is an alias for `status`.  The value `migration_id` is an alias for `id`.  ## Terms `\"type\": \"terms\"`  Supported `field` values: `name`, `id`, `migration_id,` `target_cid`, `status`, `migration_status`, `created_by`.  `sort` on `terms` type must be done on the same value as `field` and include a direction (`asc` or `desc`). Supports all supported FQL fields.  Examples sort value: `status|asc` or `created_by|desc`.   ## Date Range `\"type\": \"date_range\"`  Supported `field` fields: `created_time`.  Does not support `sort`, `size`, or `from`.
     * Get migration aggregates as specified via json in request body.
     */
    async migrationAggregatesV1Raw(
        requestParameters: HostMigrationApiMigrationAggregatesV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling migrationAggregatesV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/aggregates/migrations/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(MsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Get migration aggregates as specified via json in request body.  # Supported Types  Both types support the following FQL filter props: `name`, `id`, `migration_id`, `target_cid`, `status`, `migration_status`, `created_by`, `created_time`.  The value `migration_status` is an alias for `status`.  The value `migration_id` is an alias for `id`.  ## Terms `\"type\": \"terms\"`  Supported `field` values: `name`, `id`, `migration_id,` `target_cid`, `status`, `migration_status`, `created_by`.  `sort` on `terms` type must be done on the same value as `field` and include a direction (`asc` or `desc`). Supports all supported FQL fields.  Examples sort value: `status|asc` or `created_by|desc`.   ## Date Range `\"type\": \"date_range\"`  Supported `field` fields: `created_time`.  Does not support `sort`, `size`, or `from`.
     * Get migration aggregates as specified via json in request body.
     */
    async migrationAggregatesV1(body: Array<MsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaAggregatesResponse> {
        const response = await this.migrationAggregatesV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * The available actions are `start_migration`, `cancel_migration`, `rename_migration`, and `delete_migration`.  `start_migration` starts the selected migrations. This action only works if the migration has not started. This action does not accept any action parameters. Only one migration may be started per request.  `cancel_migration` cancels the selected migrations. This actions only works if the migration has started and not completed. This action does not accept any action parameters.  `rename_migration` renames the selected migrations. This action can be called at any time. Only 1 action parameter may be supplied. Action parameters take the form of `{\"name\": \"migration_name\": \"value\": \"$new_migration_name\"}`.  `delete_migration` deletes the selected migrations. This action only works if the migration has not started. This action does not accept any action parameters.
     * Perform an action on a migration job.
     */
    async migrationsActionsV1Raw(
        requestParameters: HostMigrationApiMigrationsActionsV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaspecQueryResponse>> {
        if (requestParameters["actionName"] == null) {
            throw new runtime.RequiredError("actionName", 'Required parameter "actionName" was null or undefined when calling migrationsActionsV1().');
        }

        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling migrationsActionsV1().');
        }

        const queryParameters: any = {};

        if (requestParameters["actionName"] != null) {
            queryParameters["action_name"] = requestParameters["actionName"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/host-migration/entities/migrations-actions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaEntityActionRequestV3ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * The available actions are `start_migration`, `cancel_migration`, `rename_migration`, and `delete_migration`.  `start_migration` starts the selected migrations. This action only works if the migration has not started. This action does not accept any action parameters. Only one migration may be started per request.  `cancel_migration` cancels the selected migrations. This actions only works if the migration has started and not completed. This action does not accept any action parameters.  `rename_migration` renames the selected migrations. This action can be called at any time. Only 1 action parameter may be supplied. Action parameters take the form of `{\"name\": \"migration_name\": \"value\": \"$new_migration_name\"}`.  `delete_migration` deletes the selected migrations. This action only works if the migration has not started. This action does not accept any action parameters.
     * Perform an action on a migration job.
     */
    async migrationsActionsV1(
        actionName: MigrationsActionsV1ActionNameEnum,
        body: MsaEntityActionRequestV3,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MsaspecQueryResponse> {
        const response = await this.migrationsActionsV1Raw({ actionName: actionName, body: body }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const GetHostMigrationIDsV1SortEnum = {
    IdAsc: "id|asc",
    IdDesc: "id|desc",
    Id: "id",
    CreatedTimeAsc: "created_time|asc",
    CreatedTimeDesc: "created_time|desc",
    CreatedTime: "created_time",
    GroupsAsc: "groups|asc",
    GroupsDesc: "groups|desc",
    Groups: "groups",
    StaticHostGroupsAsc: "static_host_groups|asc",
    StaticHostGroupsDesc: "static_host_groups|desc",
    StaticHostGroups: "static_host_groups",
    TargetCidAsc: "target_cid|asc",
    TargetCidDesc: "target_cid|desc",
    TargetCid: "target_cid",
    SourceCidAsc: "source_cid|asc",
    SourceCidDesc: "source_cid|desc",
    SourceCid: "source_cid",
    MigrationIdAsc: "migration_id|asc",
    MigrationIdDesc: "migration_id|desc",
    MigrationId: "migration_id",
    HostgroupsAsc: "hostgroups|asc",
    HostgroupsDesc: "hostgroups|desc",
    Hostgroups: "hostgroups",
    HostnameAsc: "hostname|asc",
    HostnameDesc: "hostname|desc",
    Hostname: "hostname",
    StatusAsc: "status|asc",
    StatusDesc: "status|desc",
    Status: "status",
    HostMigrationIdAsc: "host_migration_id|asc",
    HostMigrationIdDesc: "host_migration_id|desc",
    HostMigrationId: "host_migration_id",
} as const;
export type GetHostMigrationIDsV1SortEnum = (typeof GetHostMigrationIDsV1SortEnum)[keyof typeof GetHostMigrationIDsV1SortEnum];
/**
 * @export
 */
export const GetMigrationIDsV1SortEnum = {
    TargetCidAsc: "target_cid|asc",
    TargetCidDesc: "target_cid|desc",
    TargetCid: "target_cid",
    StatusAsc: "status|asc",
    StatusDesc: "status|desc",
    Status: "status",
    MigrationStatusAsc: "migration_status|asc",
    MigrationStatusDesc: "migration_status|desc",
    MigrationStatus: "migration_status",
    CreatedByAsc: "created_by|asc",
    CreatedByDesc: "created_by|desc",
    CreatedBy: "created_by",
    CreatedTimeAsc: "created_time|asc",
    CreatedTimeDesc: "created_time|desc",
    CreatedTime: "created_time",
    NameAsc: "name|asc",
    NameDesc: "name|desc",
    Name: "name",
    IdAsc: "id|asc",
    IdDesc: "id|desc",
    Id: "id",
    MigrationIdAsc: "migration_id|asc",
    MigrationIdDesc: "migration_id|desc",
    MigrationId: "migration_id",
} as const;
export type GetMigrationIDsV1SortEnum = (typeof GetMigrationIDsV1SortEnum)[keyof typeof GetMigrationIDsV1SortEnum];
/**
 * @export
 */
export const HostMigrationsActionsV1ActionNameEnum = {
    RemoveHosts: "remove_hosts",
    RemoveHostGroups: "remove_host_groups",
    AddHostGroups: "add_host_groups",
} as const;
export type HostMigrationsActionsV1ActionNameEnum = (typeof HostMigrationsActionsV1ActionNameEnum)[keyof typeof HostMigrationsActionsV1ActionNameEnum];
/**
 * @export
 */
export const MigrationsActionsV1ActionNameEnum = {
    DeleteMigration: "delete_migration",
    RenameMigration: "rename_migration",
    StartMigration: "start_migration",
    CancelMigration: "cancel_migration",
} as const;
export type MigrationsActionsV1ActionNameEnum = (typeof MigrationsActionsV1ActionNameEnum)[keyof typeof MigrationsActionsV1ActionNameEnum];
