/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    MsaBaseEntitiesResponse,
    MsaMetaInfo,
    MsaReplyMetaOnly,
    MsaspecResponseFields,
    RegistrationAWSAccountConsoleURL,
    RegistrationAWSAccountCreateRequestExtV2,
    RegistrationAWSAccountPatchRequest,
    RegistrationAWSAccountResponseV2,
    RegistrationAWSProvisionGetAccountScriptResponseV2,
    RegistrationAzureAccountCreateRequestExternalV1,
    RegistrationAzureAccountResponseV1,
    RegistrationAzureDownloadCertificateResponseV1,
    RegistrationAzureProvisionGetUserScriptResponseV1,
    RegistrationAzureTenantConfigurationResponseV1,
    RegistrationAzureTenantDefaultSubscriptionIDResponseV1,
    RegistrationExternalIOAEventResponse,
    RegistrationExternalIOMEventResponse,
    RegistrationExternalIOMEventResponseV2,
    RegistrationIOMEventIDsResponseV2,
    RegistrationPolicyRequestExtV1,
    RegistrationPolicyResponseV1,
    RegistrationPolicySettingsResponseV1,
    RegistrationScanScheduleResponseV1,
    RegistrationScanScheduleUpdateRequestV1,
} from "../models/index";
import {
    MsaBaseEntitiesResponseFromJSON,
    MsaBaseEntitiesResponseToJSON,
    MsaMetaInfoFromJSON,
    MsaMetaInfoToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    MsaspecResponseFieldsFromJSON,
    MsaspecResponseFieldsToJSON,
    RegistrationAWSAccountConsoleURLFromJSON,
    RegistrationAWSAccountConsoleURLToJSON,
    RegistrationAWSAccountCreateRequestExtV2FromJSON,
    RegistrationAWSAccountCreateRequestExtV2ToJSON,
    RegistrationAWSAccountPatchRequestFromJSON,
    RegistrationAWSAccountPatchRequestToJSON,
    RegistrationAWSAccountResponseV2FromJSON,
    RegistrationAWSAccountResponseV2ToJSON,
    RegistrationAWSProvisionGetAccountScriptResponseV2FromJSON,
    RegistrationAWSProvisionGetAccountScriptResponseV2ToJSON,
    RegistrationAzureAccountCreateRequestExternalV1FromJSON,
    RegistrationAzureAccountCreateRequestExternalV1ToJSON,
    RegistrationAzureAccountResponseV1FromJSON,
    RegistrationAzureAccountResponseV1ToJSON,
    RegistrationAzureDownloadCertificateResponseV1FromJSON,
    RegistrationAzureDownloadCertificateResponseV1ToJSON,
    RegistrationAzureProvisionGetUserScriptResponseV1FromJSON,
    RegistrationAzureProvisionGetUserScriptResponseV1ToJSON,
    RegistrationAzureTenantConfigurationResponseV1FromJSON,
    RegistrationAzureTenantConfigurationResponseV1ToJSON,
    RegistrationAzureTenantDefaultSubscriptionIDResponseV1FromJSON,
    RegistrationAzureTenantDefaultSubscriptionIDResponseV1ToJSON,
    RegistrationExternalIOAEventResponseFromJSON,
    RegistrationExternalIOAEventResponseToJSON,
    RegistrationExternalIOMEventResponseFromJSON,
    RegistrationExternalIOMEventResponseToJSON,
    RegistrationExternalIOMEventResponseV2FromJSON,
    RegistrationExternalIOMEventResponseV2ToJSON,
    RegistrationIOMEventIDsResponseV2FromJSON,
    RegistrationIOMEventIDsResponseV2ToJSON,
    RegistrationPolicyRequestExtV1FromJSON,
    RegistrationPolicyRequestExtV1ToJSON,
    RegistrationPolicyResponseV1FromJSON,
    RegistrationPolicyResponseV1ToJSON,
    RegistrationPolicySettingsResponseV1FromJSON,
    RegistrationPolicySettingsResponseV1ToJSON,
    RegistrationScanScheduleResponseV1FromJSON,
    RegistrationScanScheduleResponseV1ToJSON,
    RegistrationScanScheduleUpdateRequestV1FromJSON,
    RegistrationScanScheduleUpdateRequestV1ToJSON,
} from "../models/index";

export interface AzureDownloadCertificateRequest {
    tenantId: Array<string>;
    refresh?: boolean;
    yearsValid?: string;
}

export interface CreateCSPMAwsAccountRequest {
    body: RegistrationAWSAccountCreateRequestExtV2;
}

export interface CreateCSPMAzureAccountRequest {
    body: RegistrationAzureAccountCreateRequestExternalV1;
}

export interface DeleteCSPMAwsAccountRequest {
    ids?: Array<string>;
    organizationIds?: Array<string>;
}

export interface DeleteCSPMAzureAccountRequest {
    ids?: Array<string>;
    tenantIds?: Array<string>;
    retainTenant?: string;
}

export interface GetBehaviorDetectionsRequest {
    cloudProvider?: GetBehaviorDetectionsCloudProviderEnum;
    service?: GetBehaviorDetectionsServiceEnum;
    accountId?: string;
    awsAccountId?: string;
    azureSubscriptionId?: string;
    azureTenantId?: string;
    state?: GetBehaviorDetectionsStateEnum;
    dateTimeSince?: string;
    since?: string;
    severity?: GetBehaviorDetectionsSeverityEnum;
    nextToken?: string;
    limit?: number;
    resourceId?: Array<string>;
    resourceUuid?: Array<string>;
}

export interface GetCSPMAwsAccountRequest {
    scanType?: string;
    ids?: Array<string>;
    iamRoleArns?: Array<string>;
    organizationIds?: Array<string>;
    status?: string;
    limit?: number;
    migrated?: GetCSPMAwsAccountMigratedEnum;
    offset?: number;
    groupBy?: GetCSPMAwsAccountGroupByEnum;
}

export interface GetCSPMAwsAccountScriptsAttachmentRequest {
    ids?: Array<string>;
}

export interface GetCSPMAwsConsoleSetupURLsRequest {
    ids?: Array<string>;
    useExistingCloudtrail?: GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum;
    region?: string;
}

export interface GetCSPMAzureAccountRequest {
    ids?: Array<string>;
    tenantIds?: Array<string>;
    scanType?: string;
    status?: string;
    limit?: number;
    offset?: number;
}

export interface GetCSPMAzureUserScriptsAttachmentRequest {
    tenantId?: string;
    subscriptionIds?: Array<string>;
    accountType?: GetCSPMAzureUserScriptsAttachmentAccountTypeEnum;
    template?: string;
}

export interface GetCSPMPoliciesDetailsRequest {
    ids: Array<number>;
}

export interface GetCSPMPolicyRequest {
    ids: number;
}

export interface GetCSPMPolicySettingsRequest {
    service?: GetCSPMPolicySettingsServiceEnum;
    policyId?: string;
    cloudPlatform?: GetCSPMPolicySettingsCloudPlatformEnum;
}

export interface GetCSPMScanScheduleRequest {
    cloudPlatform?: Array<string>;
}

export interface GetConfigurationDetectionEntitiesRequest {
    ids: Array<string>;
}

export interface GetConfigurationDetectionIDsV2Request {
    filter?: string;
    sort?: string;
    limit?: number;
    offset?: number;
    nextToken?: string;
}

export interface GetConfigurationDetectionsRequest {
    cloudProvider?: GetConfigurationDetectionsCloudProviderEnum;
    accountId?: string;
    azureSubscriptionId?: string;
    azureTenantId?: string;
    status?: GetConfigurationDetectionsStatusEnum;
    region?: string;
    severity?: GetConfigurationDetectionsSeverityEnum;
    service?: GetConfigurationDetectionsServiceEnum;
    nextToken?: string;
    limit?: number;
}

export interface PatchCSPMAwsAccountRequest {
    body: RegistrationAWSAccountPatchRequest;
}

export interface UpdateCSPMAzureAccountClientIDRequest {
    id: string;
    tenantId?: string;
}

export interface UpdateCSPMAzureTenantDefaultSubscriptionIDRequest {
    subscriptionId: string;
    tenantId?: string;
}

export interface UpdateCSPMPolicySettingsRequest {
    body: RegistrationPolicyRequestExtV1;
}

export interface UpdateCSPMScanScheduleRequest {
    body: RegistrationScanScheduleUpdateRequestV1;
}

/**
 *
 */
export class CspmRegistrationApi extends runtime.BaseAPI {
    /**
     * Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
     */
    async azureDownloadCertificateRaw(
        requestParameters: AzureDownloadCertificateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureDownloadCertificateResponseV1>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError("tenantId", "Required parameter requestParameters.tenantId was null or undefined when calling azureDownloadCertificate.");
        }

        const queryParameters: any = {};

        if (requestParameters.tenantId) {
            queryParameters["tenant_id"] = requestParameters.tenantId;
        }

        if (requestParameters.refresh !== undefined) {
            queryParameters["refresh"] = requestParameters.refresh;
        }

        if (requestParameters.yearsValid !== undefined) {
            queryParameters["years_valid"] = requestParameters.yearsValid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/download-certificate/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureDownloadCertificateResponseV1FromJSON(jsonValue));
    }

    /**
     * Returns JSON object(s) that contain the base64 encoded certificate for a service principal.
     */
    async azureDownloadCertificate(
        tenantId: Array<string>,
        refresh?: boolean,
        yearsValid?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAzureDownloadCertificateResponseV1> {
        const response = await this.azureDownloadCertificateRaw({ tenantId: tenantId, refresh: refresh, yearsValid: yearsValid }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
     */
    async createCSPMAwsAccountRaw(
        requestParameters: CreateCSPMAwsAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAWSAccountResponseV2>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createCSPMAwsAccount.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/account/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationAWSAccountCreateRequestExtV2ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAWSAccountResponseV2FromJSON(jsonValue));
    }

    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their AWS cloud environment to grant us access.
     */
    async createCSPMAwsAccount(body: RegistrationAWSAccountCreateRequestExtV2, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationAWSAccountResponseV2> {
        const response = await this.createCSPMAwsAccountRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
     */
    async createCSPMAzureAccountRaw(
        requestParameters: CreateCSPMAzureAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureAccountResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createCSPMAzureAccount.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/account/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationAzureAccountCreateRequestExternalV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
     */
    async createCSPMAzureAccount(body: RegistrationAzureAccountCreateRequestExternalV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationAzureAccountResponseV1> {
        const response = await this.createCSPMAzureAccountRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing AWS account or organization in our system.
     */
    async deleteCSPMAwsAccountRaw(requestParameters: DeleteCSPMAwsAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaBaseEntitiesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.organizationIds) {
            queryParameters["organization-ids"] = requestParameters.organizationIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/account/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaBaseEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an existing AWS account or organization in our system.
     */
    async deleteCSPMAwsAccount(ids?: Array<string>, organizationIds?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaBaseEntitiesResponse> {
        const response = await this.deleteCSPMAwsAccountRaw({ ids: ids, organizationIds: organizationIds }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Azure subscription from the system.
     */
    async deleteCSPMAzureAccountRaw(
        requestParameters: DeleteCSPMAzureAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MsaBaseEntitiesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.tenantIds) {
            queryParameters["tenant_ids"] = requestParameters.tenantIds;
        }

        if (requestParameters.retainTenant !== undefined) {
            queryParameters["retain_tenant"] = requestParameters.retainTenant;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/account/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaBaseEntitiesResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an Azure subscription from the system.
     */
    async deleteCSPMAzureAccount(ids?: Array<string>, tenantIds?: Array<string>, retainTenant?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaBaseEntitiesResponse> {
        const response = await this.deleteCSPMAzureAccountRaw({ ids: ids, tenantIds: tenantIds, retainTenant: retainTenant }, initOverrides);
        return await response.value();
    }

    /**
     * Get list of detected behaviors
     */
    async getBehaviorDetectionsRaw(
        requestParameters: GetBehaviorDetectionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationExternalIOAEventResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cloudProvider !== undefined) {
            queryParameters["cloud_provider"] = requestParameters.cloudProvider;
        }

        if (requestParameters.service !== undefined) {
            queryParameters["service"] = requestParameters.service;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters["account_id"] = requestParameters.accountId;
        }

        if (requestParameters.awsAccountId !== undefined) {
            queryParameters["aws_account_id"] = requestParameters.awsAccountId;
        }

        if (requestParameters.azureSubscriptionId !== undefined) {
            queryParameters["azure_subscription_id"] = requestParameters.azureSubscriptionId;
        }

        if (requestParameters.azureTenantId !== undefined) {
            queryParameters["azure_tenant_id"] = requestParameters.azureTenantId;
        }

        if (requestParameters.state !== undefined) {
            queryParameters["state"] = requestParameters.state;
        }

        if (requestParameters.dateTimeSince !== undefined) {
            queryParameters["date_time_since"] = requestParameters.dateTimeSince;
        }

        if (requestParameters.since !== undefined) {
            queryParameters["since"] = requestParameters.since;
        }

        if (requestParameters.severity !== undefined) {
            queryParameters["severity"] = requestParameters.severity;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters["next_token"] = requestParameters.nextToken;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.resourceId) {
            queryParameters["resource_id"] = requestParameters.resourceId;
        }

        if (requestParameters.resourceUuid) {
            queryParameters["resource_uuid"] = requestParameters.resourceUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/detects/entities/ioa/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationExternalIOAEventResponseFromJSON(jsonValue));
    }

    /**
     * Get list of detected behaviors
     */
    async getBehaviorDetections(
        cloudProvider?: GetBehaviorDetectionsCloudProviderEnum,
        service?: GetBehaviorDetectionsServiceEnum,
        accountId?: string,
        awsAccountId?: string,
        azureSubscriptionId?: string,
        azureTenantId?: string,
        state?: GetBehaviorDetectionsStateEnum,
        dateTimeSince?: string,
        since?: string,
        severity?: GetBehaviorDetectionsSeverityEnum,
        nextToken?: string,
        limit?: number,
        resourceId?: Array<string>,
        resourceUuid?: Array<string>,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationExternalIOAEventResponse> {
        const response = await this.getBehaviorDetectionsRaw(
            {
                cloudProvider: cloudProvider,
                service: service,
                accountId: accountId,
                awsAccountId: awsAccountId,
                azureSubscriptionId: azureSubscriptionId,
                azureTenantId: azureTenantId,
                state: state,
                dateTimeSince: dateTimeSince,
                since: since,
                severity: severity,
                nextToken: nextToken,
                limit: limit,
                resourceId: resourceId,
                resourceUuid: resourceUuid,
            },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Returns information about the current status of an AWS account.
     */
    async getCSPMAwsAccountRaw(
        requestParameters: GetCSPMAwsAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAWSAccountResponseV2>> {
        const queryParameters: any = {};

        if (requestParameters.scanType !== undefined) {
            queryParameters["scan-type"] = requestParameters.scanType;
        }

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.iamRoleArns) {
            queryParameters["iam_role_arns"] = requestParameters.iamRoleArns;
        }

        if (requestParameters.organizationIds) {
            queryParameters["organization-ids"] = requestParameters.organizationIds;
        }

        if (requestParameters.status !== undefined) {
            queryParameters["status"] = requestParameters.status;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.migrated !== undefined) {
            queryParameters["migrated"] = requestParameters.migrated;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.groupBy !== undefined) {
            queryParameters["group_by"] = requestParameters.groupBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/account/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAWSAccountResponseV2FromJSON(jsonValue));
    }

    /**
     * Returns information about the current status of an AWS account.
     */
    async getCSPMAwsAccount(
        scanType?: string,
        ids?: Array<string>,
        iamRoleArns?: Array<string>,
        organizationIds?: Array<string>,
        status?: string,
        limit?: number,
        migrated?: GetCSPMAwsAccountMigratedEnum,
        offset?: number,
        groupBy?: GetCSPMAwsAccountGroupByEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAWSAccountResponseV2> {
        const response = await this.getCSPMAwsAccountRaw(
            { scanType: scanType, ids: ids, iamRoleArns: iamRoleArns, organizationIds: organizationIds, status: status, limit: limit, migrated: migrated, offset: offset, groupBy: groupBy },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
     */
    async getCSPMAwsAccountScriptsAttachmentRaw(
        requestParameters: GetCSPMAwsAccountScriptsAttachmentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAWSProvisionGetAccountScriptResponseV2>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/user-scripts-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAWSProvisionGetAccountScriptResponseV2FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their AWS environment as a downloadable attachment.
     */
    async getCSPMAwsAccountScriptsAttachment(ids?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationAWSProvisionGetAccountScriptResponseV2> {
        const response = await this.getCSPMAwsAccountScriptsAttachmentRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
     */
    async getCSPMAwsConsoleSetupURLsRaw(
        requestParameters: GetCSPMAwsConsoleSetupURLsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAWSAccountConsoleURL>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.useExistingCloudtrail !== undefined) {
            queryParameters["use_existing_cloudtrail"] = requestParameters.useExistingCloudtrail;
        }

        if (requestParameters.region !== undefined) {
            queryParameters["region"] = requestParameters.region;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/console-setup-urls/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAWSAccountConsoleURLFromJSON(jsonValue));
    }

    /**
     * Return a URL for customer to visit in their cloud environment to grant us access to their AWS environment.
     */
    async getCSPMAwsConsoleSetupURLs(
        ids?: Array<string>,
        useExistingCloudtrail?: GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum,
        region?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAWSAccountConsoleURL> {
        const response = await this.getCSPMAwsConsoleSetupURLsRaw({ ids: ids, useExistingCloudtrail: useExistingCloudtrail, region: region }, initOverrides);
        return await response.value();
    }

    /**
     * Return information about Azure account registration
     */
    async getCSPMAzureAccountRaw(
        requestParameters: GetCSPMAzureAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureAccountResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.tenantIds) {
            queryParameters["tenant_ids"] = requestParameters.tenantIds;
        }

        if (requestParameters.scanType !== undefined) {
            queryParameters["scan-type"] = requestParameters.scanType;
        }

        if (requestParameters.status !== undefined) {
            queryParameters["status"] = requestParameters.status;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/account/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Return information about Azure account registration
     */
    async getCSPMAzureAccount(
        ids?: Array<string>,
        tenantIds?: Array<string>,
        scanType?: string,
        status?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAzureAccountResponseV1> {
        const response = await this.getCSPMAzureAccountRaw({ ids: ids, tenantIds: tenantIds, scanType: scanType, status: status, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
     */
    async getCSPMAzureUserScriptsAttachmentRaw(
        requestParameters: GetCSPMAzureUserScriptsAttachmentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureProvisionGetUserScriptResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters["tenant-id"] = requestParameters.tenantId;
        }

        if (requestParameters.subscriptionIds) {
            queryParameters["subscription_ids"] = requestParameters.subscriptionIds;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters["account_type"] = requestParameters.accountType;
        }

        if (requestParameters.template !== undefined) {
            queryParameters["template"] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/user-scripts-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureProvisionGetUserScriptResponseV1FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
     */
    async getCSPMAzureUserScriptsAttachment(
        tenantId?: string,
        subscriptionIds?: Array<string>,
        accountType?: GetCSPMAzureUserScriptsAttachmentAccountTypeEnum,
        template?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAzureProvisionGetUserScriptResponseV1> {
        const response = await this.getCSPMAzureUserScriptsAttachmentRaw({ tenantId: tenantId, subscriptionIds: subscriptionIds, accountType: accountType, template: template }, initOverrides);
        return await response.value();
    }

    /**
     * Given an array of policy IDs, returns detailed policies information.
     */
    async getCSPMPoliciesDetailsRaw(
        requestParameters: GetCSPMPoliciesDetailsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationPolicyResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getCSPMPoliciesDetails.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/entities/policy-details/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationPolicyResponseV1FromJSON(jsonValue));
    }

    /**
     * Given an array of policy IDs, returns detailed policies information.
     */
    async getCSPMPoliciesDetails(ids: Array<number>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationPolicyResponseV1> {
        const response = await this.getCSPMPoliciesDetailsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Given a policy ID, returns detailed policy information.
     */
    async getCSPMPolicyRaw(requestParameters: GetCSPMPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegistrationPolicyResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getCSPMPolicy.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/entities/policy-details/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationPolicyResponseV1FromJSON(jsonValue));
    }

    /**
     * Given a policy ID, returns detailed policy information.
     */
    async getCSPMPolicy(ids: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationPolicyResponseV1> {
        const response = await this.getCSPMPolicyRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about current policy settings.
     */
    async getCSPMPolicySettingsRaw(
        requestParameters: GetCSPMPolicySettingsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationPolicySettingsResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.service !== undefined) {
            queryParameters["service"] = requestParameters.service;
        }

        if (requestParameters.policyId !== undefined) {
            queryParameters["policy-id"] = requestParameters.policyId;
        }

        if (requestParameters.cloudPlatform !== undefined) {
            queryParameters["cloud-platform"] = requestParameters.cloudPlatform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/entities/policy/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationPolicySettingsResponseV1FromJSON(jsonValue));
    }

    /**
     * Returns information about current policy settings.
     */
    async getCSPMPolicySettings(
        service?: GetCSPMPolicySettingsServiceEnum,
        policyId?: string,
        cloudPlatform?: GetCSPMPolicySettingsCloudPlatformEnum,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationPolicySettingsResponseV1> {
        const response = await this.getCSPMPolicySettingsRaw({ service: service, policyId: policyId, cloudPlatform: cloudPlatform }, initOverrides);
        return await response.value();
    }

    /**
     * Returns scan schedule configuration for one or more cloud platforms.
     */
    async getCSPMScanScheduleRaw(
        requestParameters: GetCSPMScanScheduleRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationScanScheduleResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.cloudPlatform) {
            queryParameters["cloud-platform"] = requestParameters.cloudPlatform;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/scan-schedule/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationScanScheduleResponseV1FromJSON(jsonValue));
    }

    /**
     * Returns scan schedule configuration for one or more cloud platforms.
     */
    async getCSPMScanSchedule(cloudPlatform?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationScanScheduleResponseV1> {
        const response = await this.getCSPMScanScheduleRaw({ cloudPlatform: cloudPlatform }, initOverrides);
        return await response.value();
    }

    /**
     * Get misconfigurations based on the ID - including custom policy detections in addition to default policy detections.
     */
    async getConfigurationDetectionEntitiesRaw(
        requestParameters: GetConfigurationDetectionEntitiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationExternalIOMEventResponseV2>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getConfigurationDetectionEntities.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/detects/entities/iom/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationExternalIOMEventResponseV2FromJSON(jsonValue));
    }

    /**
     * Get misconfigurations based on the ID - including custom policy detections in addition to default policy detections.
     */
    async getConfigurationDetectionEntities(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationExternalIOMEventResponseV2> {
        const response = await this.getConfigurationDetectionEntitiesRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get list of active misconfiguration ids - including custom policy detections in addition to default policy detections.
     */
    async getConfigurationDetectionIDsV2Raw(
        requestParameters: GetConfigurationDetectionIDsV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationIOMEventIDsResponseV2>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters["next_token"] = requestParameters.nextToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/detects/queries/iom/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationIOMEventIDsResponseV2FromJSON(jsonValue));
    }

    /**
     * Get list of active misconfiguration ids - including custom policy detections in addition to default policy detections.
     */
    async getConfigurationDetectionIDsV2(
        filter?: string,
        sort?: string,
        limit?: number,
        offset?: number,
        nextToken?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationIOMEventIDsResponseV2> {
        const response = await this.getConfigurationDetectionIDsV2Raw({ filter: filter, sort: sort, limit: limit, offset: offset, nextToken: nextToken }, initOverrides);
        return await response.value();
    }

    /**
     * Get list of active misconfigurations
     */
    async getConfigurationDetectionsRaw(
        requestParameters: GetConfigurationDetectionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationExternalIOMEventResponse>> {
        const queryParameters: any = {};

        if (requestParameters.cloudProvider !== undefined) {
            queryParameters["cloud_provider"] = requestParameters.cloudProvider;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters["account_id"] = requestParameters.accountId;
        }

        if (requestParameters.azureSubscriptionId !== undefined) {
            queryParameters["azure_subscription_id"] = requestParameters.azureSubscriptionId;
        }

        if (requestParameters.azureTenantId !== undefined) {
            queryParameters["azure_tenant_id"] = requestParameters.azureTenantId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters["status"] = requestParameters.status;
        }

        if (requestParameters.region !== undefined) {
            queryParameters["region"] = requestParameters.region;
        }

        if (requestParameters.severity !== undefined) {
            queryParameters["severity"] = requestParameters.severity;
        }

        if (requestParameters.service !== undefined) {
            queryParameters["service"] = requestParameters.service;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters["next_token"] = requestParameters.nextToken;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/detects/entities/iom/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationExternalIOMEventResponseFromJSON(jsonValue));
    }

    /**
     * Get list of active misconfigurations
     */
    async getConfigurationDetections(
        cloudProvider?: GetConfigurationDetectionsCloudProviderEnum,
        accountId?: string,
        azureSubscriptionId?: string,
        azureTenantId?: string,
        status?: GetConfigurationDetectionsStatusEnum,
        region?: string,
        severity?: GetConfigurationDetectionsSeverityEnum,
        service?: GetConfigurationDetectionsServiceEnum,
        nextToken?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationExternalIOMEventResponse> {
        const response = await this.getConfigurationDetectionsRaw(
            {
                cloudProvider: cloudProvider,
                accountId: accountId,
                azureSubscriptionId: azureSubscriptionId,
                azureTenantId: azureTenantId,
                status: status,
                region: region,
                severity: severity,
                service: service,
                nextToken: nextToken,
                limit: limit,
            },
            initOverrides
        );
        return await response.value();
    }

    /**
     * Patches a existing account in our system for a customer.
     */
    async patchCSPMAwsAccountRaw(
        requestParameters: PatchCSPMAwsAccountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAWSAccountResponseV2>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling patchCSPMAwsAccount.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-aws/entities/account/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationAWSAccountPatchRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAWSAccountResponseV2FromJSON(jsonValue));
    }

    /**
     * Patches a existing account in our system for a customer.
     */
    async patchCSPMAwsAccount(body: RegistrationAWSAccountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationAWSAccountResponseV2> {
        const response = await this.patchCSPMAwsAccountRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update an Azure service account in our system by with the user-created client_id created with the public key we\'ve provided
     */
    async updateCSPMAzureAccountClientIDRaw(
        requestParameters: UpdateCSPMAzureAccountClientIDRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureTenantConfigurationResponseV1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling updateCSPMAzureAccountClientID.");
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters["id"] = requestParameters.id;
        }

        if (requestParameters.tenantId !== undefined) {
            queryParameters["tenant-id"] = requestParameters.tenantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/client-id/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureTenantConfigurationResponseV1FromJSON(jsonValue));
    }

    /**
     * Update an Azure service account in our system by with the user-created client_id created with the public key we\'ve provided
     */
    async updateCSPMAzureAccountClientID(id: string, tenantId?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationAzureTenantConfigurationResponseV1> {
        const response = await this.updateCSPMAzureAccountClientIDRaw({ id: id, tenantId: tenantId }, initOverrides);
        return await response.value();
    }

    /**
     * Update an Azure default subscription_id in our system for given tenant_id
     */
    async updateCSPMAzureTenantDefaultSubscriptionIDRaw(
        requestParameters: UpdateCSPMAzureTenantDefaultSubscriptionIDRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationAzureTenantDefaultSubscriptionIDResponseV1>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError("subscriptionId", "Required parameter requestParameters.subscriptionId was null or undefined when calling updateCSPMAzureTenantDefaultSubscriptionID.");
        }

        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters["tenant-id"] = requestParameters.tenantId;
        }

        if (requestParameters.subscriptionId !== undefined) {
            queryParameters["subscription_id"] = requestParameters.subscriptionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-cspm-azure/entities/default-subscription-id/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureTenantDefaultSubscriptionIDResponseV1FromJSON(jsonValue));
    }

    /**
     * Update an Azure default subscription_id in our system for given tenant_id
     */
    async updateCSPMAzureTenantDefaultSubscriptionID(
        subscriptionId: string,
        tenantId?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<RegistrationAzureTenantDefaultSubscriptionIDResponseV1> {
        const response = await this.updateCSPMAzureTenantDefaultSubscriptionIDRaw({ subscriptionId: subscriptionId, tenantId: tenantId }, initOverrides);
        return await response.value();
    }

    /**
     * Updates a policy setting - can be used to override policy severity or to disable a policy entirely.
     */
    async updateCSPMPolicySettingsRaw(
        requestParameters: UpdateCSPMPolicySettingsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationPolicySettingsResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateCSPMPolicySettings.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/entities/policy/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationPolicyRequestExtV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationPolicySettingsResponseV1FromJSON(jsonValue));
    }

    /**
     * Updates a policy setting - can be used to override policy severity or to disable a policy entirely.
     */
    async updateCSPMPolicySettings(body: RegistrationPolicyRequestExtV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationPolicySettingsResponseV1> {
        const response = await this.updateCSPMPolicySettingsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Updates scan schedule configuration for one or more cloud platforms.
     */
    async updateCSPMScanScheduleRaw(
        requestParameters: UpdateCSPMScanScheduleRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<RegistrationScanScheduleResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateCSPMScanSchedule.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/settings/scan-schedule/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationScanScheduleUpdateRequestV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationScanScheduleResponseV1FromJSON(jsonValue));
    }

    /**
     * Updates scan schedule configuration for one or more cloud platforms.
     */
    async updateCSPMScanSchedule(body: RegistrationScanScheduleUpdateRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegistrationScanScheduleResponseV1> {
        const response = await this.updateCSPMScanScheduleRaw({ body: body }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const GetBehaviorDetectionsCloudProviderEnum = {
    Aws: "aws",
    Azure: "azure",
} as const;
export type GetBehaviorDetectionsCloudProviderEnum = (typeof GetBehaviorDetectionsCloudProviderEnum)[keyof typeof GetBehaviorDetectionsCloudProviderEnum];
/**
 * @export
 */
export const GetBehaviorDetectionsServiceEnum = {
    Acm: "ACM",
    Acr: "ACR",
    Any: "Any",
    AppEngine: "App Engine",
    AppService: "AppService",
    BigQuery: "BigQuery",
    CloudLoadBalancing: "Cloud Load Balancing",
    CloudLogging: "Cloud Logging",
    CloudSql: "Cloud SQL",
    CloudStorage: "Cloud Storage",
    CloudFormation: "CloudFormation",
    CloudTrail: "CloudTrail",
    CloudWatchLogs: "CloudWatch Logs",
    Cloudfront: "Cloudfront",
    ComputeEngine: "Compute Engine",
    Config: "Config",
    Disk: "Disk",
    DynamoDb: "DynamoDB",
    Ebs: "EBS",
    Ec2: "EC2",
    Ecr: "ECR",
    Efs: "EFS",
    Eks: "EKS",
    Elb: "ELB",
    Emr: "EMR",
    Elasticache: "Elasticache",
    GuardDuty: "GuardDuty",
    Iam: "IAM",
    Identity: "Identity",
    Kms: "KMS",
    KeyVault: "KeyVault",
    Kinesis: "Kinesis",
    Kubernetes: "Kubernetes",
    Lambda: "Lambda",
    LoadBalancer: "LoadBalancer",
    Monitor: "Monitor",
    NlbAlb: "NLB/ALB",
    NetworkSecurityGroup: "NetworkSecurityGroup",
    PostgreSql: "PostgreSQL",
    Rds: "RDS",
    Redshift: "Redshift",
    S3: "S3",
    Ses: "SES",
    Sns: "SNS",
    SqlDatabase: "SQLDatabase",
    SqlServer: "SQLServer",
    Sqs: "SQS",
    Ssm: "SSM",
    ServerlessApplicationRepository: "Serverless Application Repository",
    StorageAccount: "StorageAccount",
    Subscriptions: "Subscriptions",
    Vpc: "VPC",
    VirtualMachine: "VirtualMachine",
    VirtualNetwork: "VirtualNetwork",
} as const;
export type GetBehaviorDetectionsServiceEnum = (typeof GetBehaviorDetectionsServiceEnum)[keyof typeof GetBehaviorDetectionsServiceEnum];
/**
 * @export
 */
export const GetBehaviorDetectionsStateEnum = {
    Closed: "closed",
    Open: "open",
} as const;
export type GetBehaviorDetectionsStateEnum = (typeof GetBehaviorDetectionsStateEnum)[keyof typeof GetBehaviorDetectionsStateEnum];
/**
 * @export
 */
export const GetBehaviorDetectionsSeverityEnum = {
    Critical: "Critical",
    High: "High",
    Informational: "Informational",
    Medium: "Medium",
} as const;
export type GetBehaviorDetectionsSeverityEnum = (typeof GetBehaviorDetectionsSeverityEnum)[keyof typeof GetBehaviorDetectionsSeverityEnum];
/**
 * @export
 */
export const GetCSPMAwsAccountMigratedEnum = {
    False: "false",
    True: "true",
} as const;
export type GetCSPMAwsAccountMigratedEnum = (typeof GetCSPMAwsAccountMigratedEnum)[keyof typeof GetCSPMAwsAccountMigratedEnum];
/**
 * @export
 */
export const GetCSPMAwsAccountGroupByEnum = {
    Organization: "organization",
} as const;
export type GetCSPMAwsAccountGroupByEnum = (typeof GetCSPMAwsAccountGroupByEnum)[keyof typeof GetCSPMAwsAccountGroupByEnum];
/**
 * @export
 */
export const GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum = {
    False: "false",
    True: "true",
} as const;
export type GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum = (typeof GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum)[keyof typeof GetCSPMAwsConsoleSetupURLsUseExistingCloudtrailEnum];
/**
 * @export
 */
export const GetCSPMAzureUserScriptsAttachmentAccountTypeEnum = {
    Commercial: "commercial",
    Gov: "gov",
} as const;
export type GetCSPMAzureUserScriptsAttachmentAccountTypeEnum = (typeof GetCSPMAzureUserScriptsAttachmentAccountTypeEnum)[keyof typeof GetCSPMAzureUserScriptsAttachmentAccountTypeEnum];
/**
 * @export
 */
export const GetCSPMPolicySettingsServiceEnum = {
    Acm: "ACM",
    Acr: "ACR",
    Any: "Any",
    AppEngine: "App Engine",
    AppService: "AppService",
    BigQuery: "BigQuery",
    CloudLoadBalancing: "Cloud Load Balancing",
    CloudLogging: "Cloud Logging",
    CloudSql: "Cloud SQL",
    CloudStorage: "Cloud Storage",
    CloudFormation: "CloudFormation",
    CloudTrail: "CloudTrail",
    CloudWatchLogs: "CloudWatch Logs",
    Cloudfront: "Cloudfront",
    ComputeEngine: "Compute Engine",
    Config: "Config",
    Disk: "Disk",
    DynamoDb: "DynamoDB",
    Ebs: "EBS",
    Ec2: "EC2",
    Ecr: "ECR",
    Efs: "EFS",
    Eks: "EKS",
    Elb: "ELB",
    Emr: "EMR",
    Elasticache: "Elasticache",
    GuardDuty: "GuardDuty",
    Iam: "IAM",
    Identity: "Identity",
    Kms: "KMS",
    KeyVault: "KeyVault",
    Kinesis: "Kinesis",
    Kubernetes: "Kubernetes",
    Lambda: "Lambda",
    LoadBalancer: "LoadBalancer",
    Monitor: "Monitor",
    NlbAlb: "NLB/ALB",
    NetworkSecurityGroup: "NetworkSecurityGroup",
    PostgreSql: "PostgreSQL",
    Rds: "RDS",
    Redshift: "Redshift",
    S3: "S3",
    Ses: "SES",
    Sns: "SNS",
    SqlDatabase: "SQLDatabase",
    SqlServer: "SQLServer",
    Sqs: "SQS",
    Ssm: "SSM",
    ServerlessApplicationRepository: "Serverless Application Repository",
    StorageAccount: "StorageAccount",
    Subscriptions: "Subscriptions",
    Vpc: "VPC",
    VirtualMachine: "VirtualMachine",
    VirtualNetwork: "VirtualNetwork",
} as const;
export type GetCSPMPolicySettingsServiceEnum = (typeof GetCSPMPolicySettingsServiceEnum)[keyof typeof GetCSPMPolicySettingsServiceEnum];
/**
 * @export
 */
export const GetCSPMPolicySettingsCloudPlatformEnum = {
    Aws: "aws",
    Azure: "azure",
    Gcp: "gcp",
} as const;
export type GetCSPMPolicySettingsCloudPlatformEnum = (typeof GetCSPMPolicySettingsCloudPlatformEnum)[keyof typeof GetCSPMPolicySettingsCloudPlatformEnum];
/**
 * @export
 */
export const GetConfigurationDetectionsCloudProviderEnum = {
    Aws: "aws",
    Azure: "azure",
    Gcp: "gcp",
} as const;
export type GetConfigurationDetectionsCloudProviderEnum = (typeof GetConfigurationDetectionsCloudProviderEnum)[keyof typeof GetConfigurationDetectionsCloudProviderEnum];
/**
 * @export
 */
export const GetConfigurationDetectionsStatusEnum = {
    All: "all",
    New: "new",
    Reoccurring: "reoccurring",
} as const;
export type GetConfigurationDetectionsStatusEnum = (typeof GetConfigurationDetectionsStatusEnum)[keyof typeof GetConfigurationDetectionsStatusEnum];
/**
 * @export
 */
export const GetConfigurationDetectionsSeverityEnum = {
    Critical: "Critical",
    High: "High",
    Informational: "Informational",
    Medium: "Medium",
} as const;
export type GetConfigurationDetectionsSeverityEnum = (typeof GetConfigurationDetectionsSeverityEnum)[keyof typeof GetConfigurationDetectionsSeverityEnum];
/**
 * @export
 */
export const GetConfigurationDetectionsServiceEnum = {
    Acm: "ACM",
    Acr: "ACR",
    Any: "Any",
    AppEngine: "App Engine",
    AppService: "AppService",
    BigQuery: "BigQuery",
    CloudLoadBalancing: "Cloud Load Balancing",
    CloudLogging: "Cloud Logging",
    CloudSql: "Cloud SQL",
    CloudStorage: "Cloud Storage",
    CloudFormation: "CloudFormation",
    CloudTrail: "CloudTrail",
    CloudWatchLogs: "CloudWatch Logs",
    Cloudfront: "Cloudfront",
    ComputeEngine: "Compute Engine",
    Config: "Config",
    Disk: "Disk",
    DynamoDb: "DynamoDB",
    Ebs: "EBS",
    Ec2: "EC2",
    Ecr: "ECR",
    Efs: "EFS",
    Eks: "EKS",
    Elb: "ELB",
    Emr: "EMR",
    Elasticache: "Elasticache",
    GuardDuty: "GuardDuty",
    Iam: "IAM",
    Identity: "Identity",
    Kms: "KMS",
    KeyVault: "KeyVault",
    Kinesis: "Kinesis",
    Kubernetes: "Kubernetes",
    Lambda: "Lambda",
    LoadBalancer: "LoadBalancer",
    Monitor: "Monitor",
    NlbAlb: "NLB/ALB",
    NetworkSecurityGroup: "NetworkSecurityGroup",
    PostgreSql: "PostgreSQL",
    Rds: "RDS",
    Redshift: "Redshift",
    S3: "S3",
    Ses: "SES",
    Sns: "SNS",
    SqlDatabase: "SQLDatabase",
    SqlServer: "SQLServer",
    Sqs: "SQS",
    Ssm: "SSM",
    ServerlessApplicationRepository: "Serverless Application Repository",
    StorageAccount: "StorageAccount",
    Subscriptions: "Subscriptions",
    Vpc: "VPC",
    VirtualMachine: "VirtualMachine",
    VirtualNetwork: "VirtualNetwork",
} as const;
export type GetConfigurationDetectionsServiceEnum = (typeof GetConfigurationDetectionsServiceEnum)[keyof typeof GetConfigurationDetectionsServiceEnum];
