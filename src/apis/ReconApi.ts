/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
    DomainActionEntitiesResponseV1,
    DomainActionEntitiesResponseV1FromJSON,
    DomainActionEntitiesResponseV1ToJSON,
    DomainAggregatesResponse,
    DomainAggregatesResponseFromJSON,
    DomainAggregatesResponseToJSON,
    DomainErrorsOnly,
    DomainErrorsOnlyFromJSON,
    DomainErrorsOnlyToJSON,
    DomainNotificationDetailsResponseV1,
    DomainNotificationDetailsResponseV1FromJSON,
    DomainNotificationDetailsResponseV1ToJSON,
    DomainNotificationEntitiesResponseV1,
    DomainNotificationEntitiesResponseV1FromJSON,
    DomainNotificationEntitiesResponseV1ToJSON,
    DomainNotificationIDResponse,
    DomainNotificationIDResponseFromJSON,
    DomainNotificationIDResponseToJSON,
    DomainQueryResponse,
    DomainQueryResponseFromJSON,
    DomainQueryResponseToJSON,
    DomainRegisterActionsRequest,
    DomainRegisterActionsRequestFromJSON,
    DomainRegisterActionsRequestToJSON,
    DomainRulePreviewRequest,
    DomainRulePreviewRequestFromJSON,
    DomainRulePreviewRequestToJSON,
    DomainRuleQueryResponseV1,
    DomainRuleQueryResponseV1FromJSON,
    DomainRuleQueryResponseV1ToJSON,
    DomainRulesEntitiesResponseV1,
    DomainRulesEntitiesResponseV1FromJSON,
    DomainRulesEntitiesResponseV1ToJSON,
    DomainUpdateActionRequest,
    DomainUpdateActionRequestFromJSON,
    DomainUpdateActionRequestToJSON,
    DomainUpdateNotificationRequestV1,
    DomainUpdateNotificationRequestV1FromJSON,
    DomainUpdateNotificationRequestV1ToJSON,
    DomainUpdateRuleRequestV1,
    DomainUpdateRuleRequestV1FromJSON,
    DomainUpdateRuleRequestV1ToJSON,
    MsaAggregateQueryRequest,
    MsaAggregateQueryRequestFromJSON,
    MsaAggregateQueryRequestToJSON,
    MsaErrorsOnly,
    MsaErrorsOnlyFromJSON,
    MsaErrorsOnlyToJSON,
    MsaReplyMetaOnly,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    SadomainCreateRuleRequestV1,
    SadomainCreateRuleRequestV1FromJSON,
    SadomainCreateRuleRequestV1ToJSON,
} from "../models";

export interface AggregateNotificationsV1Request {
    body: Array<MsaAggregateQueryRequest>;
}

export interface CreateActionsV1Request {
    body: DomainRegisterActionsRequest;
}

export interface CreateRulesV1Request {
    body: Array<SadomainCreateRuleRequestV1>;
    xCSUSERUUID?: string;
}

export interface DeleteActionV1Request {
    id: string;
}

export interface DeleteNotificationsV1Request {
    ids: Array<string>;
}

export interface DeleteRulesV1Request {
    ids: Array<string>;
    xCSUSERUUID?: string;
}

export interface GetActionsV1Request {
    ids: Array<string>;
}

export interface GetNotificationsDetailedTranslatedV1Request {
    ids: Array<string>;
}

export interface GetNotificationsDetailedV1Request {
    ids: Array<string>;
}

export interface GetNotificationsTranslatedV1Request {
    ids: Array<string>;
}

export interface GetNotificationsV1Request {
    ids: Array<string>;
}

export interface GetRulesV1Request {
    ids: Array<string>;
    xCSUSERUUID?: string;
}

export interface PreviewRuleV1Request {
    body: DomainRulePreviewRequest;
    xCSUSERUUID?: string;
}

export interface QueryActionsV1Request {
    offset?: string;
    limit?: number;
    sort?: string;
    filter?: string;
    q?: string;
}

export interface QueryNotificationsV1Request {
    offset?: number;
    limit?: number;
    sort?: string;
    filter?: string;
    q?: string;
}

export interface QueryRulesV1Request {
    xCSUSERUUID?: string;
    offset?: string;
    limit?: number;
    sort?: string;
    filter?: string;
    q?: string;
}

export interface UpdateActionV1Request {
    body: DomainUpdateActionRequest;
}

export interface UpdateNotificationsV1Request {
    body: Array<DomainUpdateNotificationRequestV1>;
}

export interface UpdateRulesV1Request {
    body: Array<DomainUpdateRuleRequestV1>;
    xCSUSERUUID?: string;
}

/**
 *
 */
export class ReconApi extends runtime.BaseAPI {
    /**
     * Get notification aggregates as specified via JSON in request body.
     */
    async aggregateNotificationsV1Raw(requestParameters: AggregateNotificationsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainAggregatesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling aggregateNotificationsV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/aggregates/notifications/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(MsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Get notification aggregates as specified via JSON in request body.
     */
    async aggregateNotificationsV1(body: Array<MsaAggregateQueryRequest>, initOverrides?: RequestInit): Promise<DomainAggregatesResponse> {
        const response = await this.aggregateNotificationsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create actions for a monitoring rule. Accepts a list of actions that will be attached to the monitoring rule.
     */
    async createActionsV1Raw(requestParameters: CreateActionsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainActionEntitiesResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createActionsV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/actions/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainRegisterActionsRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainActionEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Create actions for a monitoring rule. Accepts a list of actions that will be attached to the monitoring rule.
     */
    async createActionsV1(body: DomainRegisterActionsRequest, initOverrides?: RequestInit): Promise<DomainActionEntitiesResponseV1> {
        const response = await this.createActionsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create monitoring rules.
     */
    async createRulesV1Raw(requestParameters: CreateRulesV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainRulesEntitiesResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createRulesV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/rules/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(SadomainCreateRuleRequestV1ToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainRulesEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Create monitoring rules.
     */
    async createRulesV1(body: Array<SadomainCreateRuleRequestV1>, xCSUSERUUID?: string, initOverrides?: RequestInit): Promise<DomainRulesEntitiesResponseV1> {
        const response = await this.createRulesV1Raw({ body: body, xCSUSERUUID: xCSUSERUUID }, initOverrides);
        return await response.value();
    }

    /**
     * Delete an action from a monitoring rule based on the action ID.
     */
    async deleteActionV1Raw(requestParameters: DeleteActionV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainQueryResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling deleteActionV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters["id"] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/actions/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainQueryResponseFromJSON(jsonValue));
    }

    /**
     * Delete an action from a monitoring rule based on the action ID.
     */
    async deleteActionV1(id: string, initOverrides?: RequestInit): Promise<DomainQueryResponse> {
        const response = await this.deleteActionV1Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete notifications based on IDs. Notifications cannot be recovered after they are deleted.
     */
    async deleteNotificationsV1Raw(requestParameters: DeleteNotificationsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainNotificationIDResponse>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling deleteNotificationsV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationIDResponseFromJSON(jsonValue));
    }

    /**
     * Delete notifications based on IDs. Notifications cannot be recovered after they are deleted.
     */
    async deleteNotificationsV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainNotificationIDResponse> {
        const response = await this.deleteNotificationsV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Delete monitoring rules.
     */
    async deleteRulesV1Raw(requestParameters: DeleteRulesV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainRuleQueryResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling deleteRulesV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/rules/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainRuleQueryResponseV1FromJSON(jsonValue));
    }

    /**
     * Delete monitoring rules.
     */
    async deleteRulesV1(ids: Array<string>, xCSUSERUUID?: string, initOverrides?: RequestInit): Promise<DomainRuleQueryResponseV1> {
        const response = await this.deleteRulesV1Raw({ ids: ids, xCSUSERUUID: xCSUSERUUID }, initOverrides);
        return await response.value();
    }

    /**
     * Get actions based on their IDs. IDs can be retrieved using the GET /queries/actions/v1 endpoint.
     */
    async getActionsV1Raw(requestParameters: GetActionsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainActionEntitiesResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getActionsV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/actions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainActionEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Get actions based on their IDs. IDs can be retrieved using the GET /queries/actions/v1 endpoint.
     */
    async getActionsV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainActionEntitiesResponseV1> {
        const response = await this.getActionsV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.This endpoint will return translated notification content. The only target language available is English. A single notification can be translated per request
     */
    async getNotificationsDetailedTranslatedV1Raw(
        requestParameters: GetNotificationsDetailedTranslatedV1Request,
        initOverrides?: RequestInit
    ): Promise<runtime.ApiResponse<DomainNotificationDetailsResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getNotificationsDetailedTranslatedV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications-detailed-translated/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationDetailsResponseV1FromJSON(jsonValue));
    }

    /**
     * Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.This endpoint will return translated notification content. The only target language available is English. A single notification can be translated per request
     */
    async getNotificationsDetailedTranslatedV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainNotificationDetailsResponseV1> {
        const response = await this.getNotificationsDetailedTranslatedV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.
     */
    async getNotificationsDetailedV1Raw(requestParameters: GetNotificationsDetailedV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainNotificationDetailsResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getNotificationsDetailedV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications-detailed/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationDetailsResponseV1FromJSON(jsonValue));
    }

    /**
     * Get detailed notifications based on their IDs. These include the raw intelligence content that generated the match.
     */
    async getNotificationsDetailedV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainNotificationDetailsResponseV1> {
        const response = await this.getNotificationsDetailedV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint. This endpoint will return translated notification content. The only target language available is English.
     */
    async getNotificationsTranslatedV1Raw(requestParameters: GetNotificationsTranslatedV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainNotificationEntitiesResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getNotificationsTranslatedV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications-translated/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint. This endpoint will return translated notification content. The only target language available is English.
     */
    async getNotificationsTranslatedV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainNotificationEntitiesResponseV1> {
        const response = await this.getNotificationsTranslatedV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint.
     */
    async getNotificationsV1Raw(requestParameters: GetNotificationsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainNotificationEntitiesResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getNotificationsV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Get notifications based on their IDs. IDs can be retrieved using the GET /queries/notifications/v1 endpoint.
     */
    async getNotificationsV1(ids: Array<string>, initOverrides?: RequestInit): Promise<DomainNotificationEntitiesResponseV1> {
        const response = await this.getNotificationsV1Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get monitoring rules rules by provided IDs.
     */
    async getRulesV1Raw(requestParameters: GetRulesV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainRulesEntitiesResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getRulesV1.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/rules/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainRulesEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Get monitoring rules rules by provided IDs.
     */
    async getRulesV1(ids: Array<string>, xCSUSERUUID?: string, initOverrides?: RequestInit): Promise<DomainRulesEntitiesResponseV1> {
        const response = await this.getRulesV1Raw({ ids: ids, xCSUSERUUID: xCSUSERUUID }, initOverrides);
        return await response.value();
    }

    /**
     * Preview rules notification count and distribution. This will return aggregations on: channel, count, site.
     */
    async previewRuleV1Raw(requestParameters: PreviewRuleV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainAggregatesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling previewRuleV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/aggregates/rules-preview/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: DomainRulePreviewRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Preview rules notification count and distribution. This will return aggregations on: channel, count, site.
     */
    async previewRuleV1(body: DomainRulePreviewRequest, xCSUSERUUID?: string, initOverrides?: RequestInit): Promise<DomainAggregatesResponse> {
        const response = await this.previewRuleV1Raw({ body: body, xCSUSERUUID: xCSUSERUUID }, initOverrides);
        return await response.value();
    }

    /**
     * Query actions based on provided criteria. Use the IDs from this response to get the action entities on GET /entities/actions/v1.
     */
    async queryActionsV1Raw(requestParameters: QueryActionsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters["q"] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/queries/actions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query actions based on provided criteria. Use the IDs from this response to get the action entities on GET /entities/actions/v1.
     */
    async queryActionsV1(offset?: string, limit?: number, sort?: string, filter?: string, q?: string, initOverrides?: RequestInit): Promise<DomainQueryResponse> {
        const response = await this.queryActionsV1Raw({ offset: offset, limit: limit, sort: sort, filter: filter, q: q }, initOverrides);
        return await response.value();
    }

    /**
     * Query notifications based on provided criteria. Use the IDs from this response to get the notification entities on GET /entities/notifications/v1 or GET /entities/notifications-detailed/v1.
     */
    async queryNotificationsV1Raw(requestParameters: QueryNotificationsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters["q"] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/queries/notifications/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query notifications based on provided criteria. Use the IDs from this response to get the notification entities on GET /entities/notifications/v1 or GET /entities/notifications-detailed/v1.
     */
    async queryNotificationsV1(offset?: number, limit?: number, sort?: string, filter?: string, q?: string, initOverrides?: RequestInit): Promise<DomainQueryResponse> {
        const response = await this.queryNotificationsV1Raw({ offset: offset, limit: limit, sort: sort, filter: filter, q: q }, initOverrides);
        return await response.value();
    }

    /**
     * Query monitoring rules based on provided criteria. Use the IDs from this response to fetch the rules on /entities/rules/v1.
     */
    async queryRulesV1Raw(requestParameters: QueryRulesV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainRuleQueryResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters["q"] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:read"]);
        }

        const response = await this.request(
            {
                path: `/recon/queries/rules/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainRuleQueryResponseV1FromJSON(jsonValue));
    }

    /**
     * Query monitoring rules based on provided criteria. Use the IDs from this response to fetch the rules on /entities/rules/v1.
     */
    async queryRulesV1(xCSUSERUUID?: string, offset?: string, limit?: number, sort?: string, filter?: string, q?: string, initOverrides?: RequestInit): Promise<DomainRuleQueryResponseV1> {
        const response = await this.queryRulesV1Raw({ xCSUSERUUID: xCSUSERUUID, offset: offset, limit: limit, sort: sort, filter: filter, q: q }, initOverrides);
        return await response.value();
    }

    /**
     * Update an action for a monitoring rule.
     */
    async updateActionV1Raw(requestParameters: UpdateActionV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainActionEntitiesResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateActionV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/actions/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: DomainUpdateActionRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainActionEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Update an action for a monitoring rule.
     */
    async updateActionV1(body: DomainUpdateActionRequest, initOverrides?: RequestInit): Promise<DomainActionEntitiesResponseV1> {
        const response = await this.updateActionV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update notification status or assignee. Accepts bulk requests
     */
    async updateNotificationsV1Raw(requestParameters: UpdateNotificationsV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainNotificationEntitiesResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateNotificationsV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/notifications/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(DomainUpdateNotificationRequestV1ToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainNotificationEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Update notification status or assignee. Accepts bulk requests
     */
    async updateNotificationsV1(body: Array<DomainUpdateNotificationRequestV1>, initOverrides?: RequestInit): Promise<DomainNotificationEntitiesResponseV1> {
        const response = await this.updateNotificationsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update monitoring rules.
     */
    async updateRulesV1Raw(requestParameters: UpdateRulesV1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DomainRulesEntitiesResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateRulesV1.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["recon-monitoring-rules:write"]);
        }

        const response = await this.request(
            {
                path: `/recon/entities/rules/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(DomainUpdateRuleRequestV1ToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainRulesEntitiesResponseV1FromJSON(jsonValue));
    }

    /**
     * Update monitoring rules.
     */
    async updateRulesV1(body: Array<DomainUpdateRuleRequestV1>, xCSUSERUUID?: string, initOverrides?: RequestInit): Promise<DomainRulesEntitiesResponseV1> {
        const response = await this.updateRulesV1Raw({ body: body, xCSUSERUUID: xCSUSERUUID }, initOverrides);
        return await response.value();
    }
}
