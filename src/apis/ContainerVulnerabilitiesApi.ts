/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    CoreEntitiesResponse,
    MsaReplyMetaOnly,
    VulnerabilitiesApiCombinedVulnerability,
    VulnerabilitiesApiCombinedVulnerabilityDetails,
    VulnerabilitiesApiCombinedVulnerabilityInfo,
    VulnerabilitiesApiVulnByImageCount,
    VulnerabilitiesApiVulnByPublication,
    VulnerabilitiesApiVulnCount,
    VulnerabilitiesApiVulnCountByActivelyExploited,
    VulnerabilitiesApiVulnCountByCSPRating,
    VulnerabilitiesApiVulnCountByCVSSScore,
    VulnerabilitiesApiVulnCountBySeverity,
} from "../models/index";
import {
    CoreEntitiesResponseFromJSON,
    CoreEntitiesResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    VulnerabilitiesApiCombinedVulnerabilityFromJSON,
    VulnerabilitiesApiCombinedVulnerabilityToJSON,
    VulnerabilitiesApiCombinedVulnerabilityDetailsFromJSON,
    VulnerabilitiesApiCombinedVulnerabilityDetailsToJSON,
    VulnerabilitiesApiCombinedVulnerabilityInfoFromJSON,
    VulnerabilitiesApiCombinedVulnerabilityInfoToJSON,
    VulnerabilitiesApiVulnByImageCountFromJSON,
    VulnerabilitiesApiVulnByImageCountToJSON,
    VulnerabilitiesApiVulnByPublicationFromJSON,
    VulnerabilitiesApiVulnByPublicationToJSON,
    VulnerabilitiesApiVulnCountFromJSON,
    VulnerabilitiesApiVulnCountToJSON,
    VulnerabilitiesApiVulnCountByActivelyExploitedFromJSON,
    VulnerabilitiesApiVulnCountByActivelyExploitedToJSON,
    VulnerabilitiesApiVulnCountByCSPRatingFromJSON,
    VulnerabilitiesApiVulnCountByCSPRatingToJSON,
    VulnerabilitiesApiVulnCountByCVSSScoreFromJSON,
    VulnerabilitiesApiVulnCountByCVSSScoreToJSON,
    VulnerabilitiesApiVulnCountBySeverityFromJSON,
    VulnerabilitiesApiVulnCountBySeverityToJSON,
} from "../models/index";

export interface ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesRequest {
    filter?: string;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesDetailsRequest {
    id: string;
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesInfoRequest {
    cveId: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilitiesByImageCountRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilitiesPublicationDateRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilityCountRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilityCountByActivelyExploitedRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilityCountByCPSRatingRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilityCountByCVSSScoreRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ContainerVulnerabilitiesApiReadVulnerabilityCountBySeverityRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

/**
 *
 */
export class ContainerVulnerabilitiesApi extends runtime.BaseAPI {
    /**
     * Retrieve vulnerability and aggregate data filtered by the provided FQL
     */
    async readCombinedVulnerabilitiesRaw(
        requestParameters: ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiCombinedVulnerability>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/vulnerabilities/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiCombinedVulnerabilityFromJSON(jsonValue));
    }

    /**
     * Retrieve vulnerability and aggregate data filtered by the provided FQL
     */
    async readCombinedVulnerabilities(
        filter?: string,
        limit?: number,
        offset?: number,
        sort?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiCombinedVulnerability> {
        const response = await this.readCombinedVulnerabilitiesRaw({ filter: filter, limit: limit, offset: offset, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve vulnerability details related to an image
     */
    async readCombinedVulnerabilitiesDetailsRaw(
        requestParameters: ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesDetailsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiCombinedVulnerabilityDetails>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling readCombinedVulnerabilitiesDetails().');
        }

        const queryParameters: any = {};

        if (requestParameters["id"] != null) {
            queryParameters["id"] = requestParameters["id"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/vulnerabilities/details/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiCombinedVulnerabilityDetailsFromJSON(jsonValue));
    }

    /**
     * Retrieve vulnerability details related to an image
     */
    async readCombinedVulnerabilitiesDetails(
        id: string,
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiCombinedVulnerabilityDetails> {
        const response = await this.readCombinedVulnerabilitiesDetailsRaw({ id: id, filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve vulnerability and package related info for this customer
     */
    async readCombinedVulnerabilitiesInfoRaw(
        requestParameters: ContainerVulnerabilitiesApiReadCombinedVulnerabilitiesInfoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiCombinedVulnerabilityInfo>> {
        if (requestParameters["cveId"] == null) {
            throw new runtime.RequiredError("cveId", 'Required parameter "cveId" was null or undefined when calling readCombinedVulnerabilitiesInfo().');
        }

        const queryParameters: any = {};

        if (requestParameters["cveId"] != null) {
            queryParameters["cve_id"] = requestParameters["cveId"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/vulnerabilities/info/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiCombinedVulnerabilityInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve vulnerability and package related info for this customer
     */
    async readCombinedVulnerabilitiesInfo(
        cveId: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiCombinedVulnerabilityInfo> {
        const response = await this.readCombinedVulnerabilitiesInfoRaw({ cveId: cveId, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve top x vulnerabilities with the most impacted images
     */
    async readVulnerabilitiesByImageCountRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilitiesByImageCountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnByImageCount>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/vulnerabilities/by-image-count/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnByImageCountFromJSON(jsonValue));
    }

    /**
     * Retrieve top x vulnerabilities with the most impacted images
     */
    async readVulnerabilitiesByImageCount(filter?: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnerabilitiesApiVulnByImageCount> {
        const response = await this.readVulnerabilitiesByImageCountRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve top x vulnerabilities with the most recent publication date
     */
    async readVulnerabilitiesPublicationDateRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilitiesPublicationDateRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnByPublication>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/vulnerabilities/by-published-date/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnByPublicationFromJSON(jsonValue));
    }

    /**
     * Retrieve top x vulnerabilities with the most recent publication date
     */
    async readVulnerabilitiesPublicationDate(
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiVulnByPublication> {
        const response = await this.readVulnerabilitiesPublicationDateRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of vulnerabilities
     */
    async readVulnerabilityCountRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilityCountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnCount>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/vulnerabilities/count/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnCountFromJSON(jsonValue));
    }

    /**
     * Aggregate count of vulnerabilities
     */
    async readVulnerabilityCount(filter?: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VulnerabilitiesApiVulnCount> {
        const response = await this.readVulnerabilityCountRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of vulnerabilities grouped by actively exploited
     */
    async readVulnerabilityCountByActivelyExploitedRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilityCountByActivelyExploitedRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnCountByActivelyExploited>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/vulnerabilities/count-by-actively-exploited/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnCountByActivelyExploitedFromJSON(jsonValue));
    }

    /**
     * Aggregate count of vulnerabilities grouped by actively exploited
     */
    async readVulnerabilityCountByActivelyExploited(
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiVulnCountByActivelyExploited> {
        const response = await this.readVulnerabilityCountByActivelyExploitedRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of vulnerabilities grouped by csp_rating
     */
    async readVulnerabilityCountByCPSRatingRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilityCountByCPSRatingRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnCountByCSPRating>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/vulnerabilities/count-by-cps-rating/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnCountByCSPRatingFromJSON(jsonValue));
    }

    /**
     * Aggregate count of vulnerabilities grouped by csp_rating
     */
    async readVulnerabilityCountByCPSRating(
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiVulnCountByCSPRating> {
        const response = await this.readVulnerabilityCountByCPSRatingRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of vulnerabilities grouped by cvss score
     */
    async readVulnerabilityCountByCVSSScoreRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilityCountByCVSSScoreRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnCountByCVSSScore>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/vulnerabilities/count-by-cvss-score/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnCountByCVSSScoreFromJSON(jsonValue));
    }

    /**
     * Aggregate count of vulnerabilities grouped by cvss score
     */
    async readVulnerabilityCountByCVSSScore(
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiVulnCountByCVSSScore> {
        const response = await this.readVulnerabilityCountByCVSSScoreRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of vulnerabilities grouped by severity
     */
    async readVulnerabilityCountBySeverityRaw(
        requestParameters: ContainerVulnerabilitiesApiReadVulnerabilityCountBySeverityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<VulnerabilitiesApiVulnCountBySeverity>> {
        const queryParameters: any = {};

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/vulnerabilities/count-by-severity/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => VulnerabilitiesApiVulnCountBySeverityFromJSON(jsonValue));
    }

    /**
     * Aggregate count of vulnerabilities grouped by severity
     */
    async readVulnerabilityCountBySeverity(
        filter?: string,
        limit?: number,
        offset?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<VulnerabilitiesApiVulnCountBySeverity> {
        const response = await this.readVulnerabilityCountBySeverityRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }
}
