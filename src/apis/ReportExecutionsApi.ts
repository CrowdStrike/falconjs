/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
    ApiReportExecutionRetryRequestV1,
    ApiReportExecutionRetryRequestV1FromJSON,
    ApiReportExecutionRetryRequestV1ToJSON,
    ApiReportExecutionsResponseV1,
    ApiReportExecutionsResponseV1FromJSON,
    ApiReportExecutionsResponseV1ToJSON,
    MsaQueryResponse,
    MsaQueryResponseFromJSON,
    MsaQueryResponseToJSON,
    MsaReplyMetaOnly,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models";

export interface ReportExecutionsDownloadGetRequest {
    ids: string;
}

export interface ReportExecutionsGetRequest {
    ids: Array<string>;
}

export interface ReportExecutionsQueryRequest {
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    limit?: number;
}

export interface ReportExecutionsRetryRequest {
    xCSUSERUUID: string;
    body: Array<ApiReportExecutionRetryRequestV1>;
    xCSUSERID?: string;
}

/**
 *
 */
export class ReportExecutionsApi extends runtime.BaseAPI {
    /**
     * Get report entity download
     */
    async reportExecutionsDownloadGetRaw(requestParameters: ReportExecutionsDownloadGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling reportExecutionsDownloadGet.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["scheduled-report:read"]);
        }

        const response = await this.request(
            {
                path: `/reports/entities/report-executions-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get report entity download
     */
    async reportExecutionsDownloadGet(ids: string, initOverrides?: RequestInit): Promise<Array<number>> {
        const response = await this.reportExecutionsDownloadGetRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve report details for the provided report IDs.
     */
    async reportExecutionsGetRaw(requestParameters: ReportExecutionsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ApiReportExecutionsResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling reportExecutionsGet.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["scheduled-report:read"]);
        }

        const response = await this.request(
            {
                path: `/reports/entities/report-executions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiReportExecutionsResponseV1FromJSON(jsonValue));
    }

    /**
     * Retrieve report details for the provided report IDs.
     */
    async reportExecutionsGet(ids: Array<string>, initOverrides?: RequestInit): Promise<ApiReportExecutionsResponseV1> {
        const response = await this.reportExecutionsGetRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Find all report execution IDs matching the query with filter
     */
    async reportExecutionsQueryRaw(requestParameters: ReportExecutionsQueryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters["q"] = requestParameters.q;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["scheduled-report:read"]);
        }

        const response = await this.request(
            {
                path: `/reports/queries/report-executions/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Find all report execution IDs matching the query with filter
     */
    async reportExecutionsQuery(sort?: string, filter?: string, q?: string, offset?: string, limit?: number, initOverrides?: RequestInit): Promise<MsaQueryResponse> {
        const response = await this.reportExecutionsQueryRaw({ sort: sort, filter: filter, q: q, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint will be used to retry report executions
     */
    async reportExecutionsRetryRaw(requestParameters: ReportExecutionsRetryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ApiReportExecutionsResponseV1>> {
        if (requestParameters.xCSUSERUUID === null || requestParameters.xCSUSERUUID === undefined) {
            throw new runtime.RequiredError("xCSUSERUUID", "Required parameter requestParameters.xCSUSERUUID was null or undefined when calling reportExecutionsRetry.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling reportExecutionsRetry.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (requestParameters.xCSUSERID !== undefined && requestParameters.xCSUSERID !== null) {
            headerParameters["X-CS-USERID"] = String(requestParameters.xCSUSERID);
        }

        if (requestParameters.xCSUSERUUID !== undefined && requestParameters.xCSUSERUUID !== null) {
            headerParameters["X-CS-USERUUID"] = String(requestParameters.xCSUSERUUID);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["scheduled-report:read"]);
        }

        const response = await this.request(
            {
                path: `/reports/entities/report-executions-retry/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body.map(ApiReportExecutionRetryRequestV1ToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiReportExecutionsResponseV1FromJSON(jsonValue));
    }

    /**
     * This endpoint will be used to retry report executions
     */
    async reportExecutionsRetry(xCSUSERUUID: string, body: Array<ApiReportExecutionRetryRequestV1>, xCSUSERID?: string, initOverrides?: RequestInit): Promise<ApiReportExecutionsResponseV1> {
        const response = await this.reportExecutionsRetryRaw({ xCSUSERUUID: xCSUSERUUID, body: body, xCSUSERID: xCSUSERID }, initOverrides);
        return await response.value();
    }
}
