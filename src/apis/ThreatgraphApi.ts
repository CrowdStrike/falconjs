/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { MsaReplyMetaOnly, ThreatgraphVertexDetailsResponse } from "../models/index";
import { MsaReplyMetaOnlyFromJSON, MsaReplyMetaOnlyToJSON, ThreatgraphVertexDetailsResponseFromJSON, ThreatgraphVertexDetailsResponseToJSON } from "../models/index";

export interface ThreatgraphApiCombinedEdgesGetRequest {
    ids: string;
    edgeType: CombinedEdgesGetEdgeTypeEnum;
    limit?: number;
    offset?: string;
    direction?: string;
    scope?: CombinedEdgesGetScopeEnum;
    nano?: boolean;
}

export interface ThreatgraphApiCombinedRanOnGetRequest {
    value: string;
    type: CombinedRanOnGetTypeEnum;
    limit?: number;
    offset?: string;
    nano?: boolean;
}

export interface ThreatgraphApiCombinedSummaryGetRequest {
    vertexType: CombinedSummaryGetVertexTypeEnum;
    ids: Array<string>;
    scope?: CombinedSummaryGetScopeEnum;
    nano?: boolean;
}

export interface ThreatgraphApiEntitiesVerticesGetRequest {
    vertexType: EntitiesVerticesGetVertexTypeEnum;
    ids: Array<string>;
    scope?: EntitiesVerticesGetScopeEnum;
    nano?: boolean;
}

export interface ThreatgraphApiEntitiesVerticesGetv2Request {
    vertexType: EntitiesVerticesGetv2VertexTypeEnum;
    ids: Array<string>;
    scope?: EntitiesVerticesGetv2ScopeEnum;
    nano?: boolean;
}

/**
 *
 */
export class ThreatgraphApi extends runtime.BaseAPI {
    /**
     * Retrieve edges for a given vertex id.  One edge type must be specified
     */
    async combinedEdgesGetRaw(requestParameters: ThreatgraphApiCombinedEdgesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling combinedEdgesGet().');
        }

        if (requestParameters["edgeType"] == null) {
            throw new runtime.RequiredError("edgeType", 'Required parameter "edgeType" was null or undefined when calling combinedEdgesGet().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["edgeType"] != null) {
            queryParameters["edge_type"] = requestParameters["edgeType"];
        }

        if (requestParameters["direction"] != null) {
            queryParameters["direction"] = requestParameters["direction"];
        }

        if (requestParameters["scope"] != null) {
            queryParameters["scope"] = requestParameters["scope"];
        }

        if (requestParameters["nano"] != null) {
            queryParameters["nano"] = requestParameters["nano"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/combined/edges/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve edges for a given vertex id.  One edge type must be specified
     */
    async combinedEdgesGet(
        ids: string,
        edgeType: CombinedEdgesGetEdgeTypeEnum,
        limit?: number,
        offset?: string,
        direction?: string,
        scope?: CombinedEdgesGetScopeEnum,
        nano?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.combinedEdgesGetRaw({ ids: ids, edgeType: edgeType, limit: limit, offset: offset, direction: direction, scope: scope, nano: nano }, initOverrides);
    }

    /**
     * Look up instances of indicators such as hashes, domain names, and ip addresses that have been seen on devices in your environment.
     */
    async combinedRanOnGetRaw(requestParameters: ThreatgraphApiCombinedRanOnGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["value"] == null) {
            throw new runtime.RequiredError("value", 'Required parameter "value" was null or undefined when calling combinedRanOnGet().');
        }

        if (requestParameters["type"] == null) {
            throw new runtime.RequiredError("type", 'Required parameter "type" was null or undefined when calling combinedRanOnGet().');
        }

        const queryParameters: any = {};

        if (requestParameters["value"] != null) {
            queryParameters["value"] = requestParameters["value"];
        }

        if (requestParameters["type"] != null) {
            queryParameters["type"] = requestParameters["type"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["nano"] != null) {
            queryParameters["nano"] = requestParameters["nano"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/combined/ran-on/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Look up instances of indicators such as hashes, domain names, and ip addresses that have been seen on devices in your environment.
     */
    async combinedRanOnGet(value: string, type: CombinedRanOnGetTypeEnum, limit?: number, offset?: string, nano?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.combinedRanOnGetRaw({ value: value, type: type, limit: limit, offset: offset, nano: nano }, initOverrides);
    }

    /**
     * Retrieve summary for a given vertex ID
     */
    async combinedSummaryGetRaw(requestParameters: ThreatgraphApiCombinedSummaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["vertexType"] == null) {
            throw new runtime.RequiredError("vertexType", 'Required parameter "vertexType" was null or undefined when calling combinedSummaryGet().');
        }

        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling combinedSummaryGet().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["scope"] != null) {
            queryParameters["scope"] = requestParameters["scope"];
        }

        if (requestParameters["nano"] != null) {
            queryParameters["nano"] = requestParameters["nano"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/combined/{vertex-type}/summary/v1`.replace(`{${"vertex-type"}}`, encodeURIComponent(String(requestParameters["vertexType"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve summary for a given vertex ID
     */
    async combinedSummaryGet(
        vertexType: CombinedSummaryGetVertexTypeEnum,
        ids: Array<string>,
        scope?: CombinedSummaryGetScopeEnum,
        nano?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.combinedSummaryGetRaw({ vertexType: vertexType, ids: ids, scope: scope, nano: nano }, initOverrides);
    }

    /**
     * Retrieve metadata for a given vertex ID. Note: This is a legacy endpoint used by CrowdStrike Store partners prior to release of the ThreatGraph OAuth 2.0 APIs. If you’re not currently using this endpoint, use the /v2 endpoint instead.
     */
    async entitiesVerticesGetRaw(
        requestParameters: ThreatgraphApiEntitiesVerticesGetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ThreatgraphVertexDetailsResponse>> {
        if (requestParameters["vertexType"] == null) {
            throw new runtime.RequiredError("vertexType", 'Required parameter "vertexType" was null or undefined when calling entitiesVerticesGet().');
        }

        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling entitiesVerticesGet().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["scope"] != null) {
            queryParameters["scope"] = requestParameters["scope"];
        }

        if (requestParameters["nano"] != null) {
            queryParameters["nano"] = requestParameters["nano"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/entities/{vertex-type}/v1`.replace(`{${"vertex-type"}}`, encodeURIComponent(String(requestParameters["vertexType"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreatgraphVertexDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata for a given vertex ID. Note: This is a legacy endpoint used by CrowdStrike Store partners prior to release of the ThreatGraph OAuth 2.0 APIs. If you’re not currently using this endpoint, use the /v2 endpoint instead.
     */
    async entitiesVerticesGet(
        vertexType: EntitiesVerticesGetVertexTypeEnum,
        ids: Array<string>,
        scope?: EntitiesVerticesGetScopeEnum,
        nano?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ThreatgraphVertexDetailsResponse> {
        const response = await this.entitiesVerticesGetRaw({ vertexType: vertexType, ids: ids, scope: scope, nano: nano }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve metadata for a given vertex ID
     */
    async entitiesVerticesGetv2Raw(
        requestParameters: ThreatgraphApiEntitiesVerticesGetv2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ThreatgraphVertexDetailsResponse>> {
        if (requestParameters["vertexType"] == null) {
            throw new runtime.RequiredError("vertexType", 'Required parameter "vertexType" was null or undefined when calling entitiesVerticesGetv2().');
        }

        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling entitiesVerticesGetv2().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["scope"] != null) {
            queryParameters["scope"] = requestParameters["scope"];
        }

        if (requestParameters["nano"] != null) {
            queryParameters["nano"] = requestParameters["nano"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/entities/{vertex-type}/v2`.replace(`{${"vertex-type"}}`, encodeURIComponent(String(requestParameters["vertexType"]))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ThreatgraphVertexDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve metadata for a given vertex ID
     */
    async entitiesVerticesGetv2(
        vertexType: EntitiesVerticesGetv2VertexTypeEnum,
        ids: Array<string>,
        scope?: EntitiesVerticesGetv2ScopeEnum,
        nano?: boolean,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ThreatgraphVertexDetailsResponse> {
        const response = await this.entitiesVerticesGetv2Raw({ vertexType: vertexType, ids: ids, scope: scope, nano: nano }, initOverrides);
        return await response.value();
    }

    /**
     * Show all available edge types
     */
    async queriesEdgetypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/threatgraph/queries/edge-types/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Show all available edge types
     */
    async queriesEdgetypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queriesEdgetypesGetRaw(initOverrides);
    }
}

/**
 * @export
 */
export const CombinedEdgesGetEdgeTypeEnum = {
    AccessedAdComputer: "accessed_ad_computer",
    AccessedAdfsApplication: "accessed_adfs_application",
    AccessedAzureApplication: "accessed_azure_application",
    AccessedByKerberosTicket: "accessed_by_kerberos_ticket",
    AccessedBySession: "accessed_by_session",
    AccessedOktaApplication: "accessed_okta_application",
    AccessedPingFedApplication: "accessed_ping_fed_application",
    AccessedServiceAccount: "accessed_service_account",
    AgentToSelfDiagnostic: "agent_to_self_diagnostic",
    AllowedByProcess: "allowed_by_process",
    AllowedFirewallRule: "allowed_firewall_rule",
    AppUninstalledFromHost: "app_uninstalled_from_host",
    AsepFileChange: "asep_file_change",
    AsepKeyUpdate: "asep_key_update",
    AsepValueUpdate: "asep_value_update",
    AssignedIpv4Address: "assigned_ipv4_address",
    AssignedIpv6Address: "assigned_ipv6_address",
    AssignedToSensor: "assigned_to_sensor",
    AssociatedByAdComputer: "associated_by_ad_computer",
    AssociatedByAdGroup: "associated_by_ad_group",
    AssociatedByAdUser: "associated_by_ad_user",
    AssociatedByAggregateIndicator: "associated_by_aggregate_indicator",
    AssociatedByApp: "associated_by_app",
    AssociatedByAzureAdUser: "associated_by_azure_ad_user",
    AssociatedByAzureApp: "associated_by_azure_app",
    AssociatedByCertificate: "associated_by_certificate",
    AssociatedByControlGraph: "associated_by_control_graph",
    AssociatedByDomain: "associated_by_domain",
    AssociatedByHost: "associated_by_host",
    AssociatedByHostName: "associated_by_host_name",
    AssociatedByIdpSession: "associated_by_idp_session",
    AssociatedByIncident: "associated_by_incident",
    AssociatedByIndicator: "associated_by_indicator",
    AssociatedByIp: "associated_by_ip",
    AssociatedByIp4: "associated_by_ip4",
    AssociatedByIp6: "associated_by_ip6",
    AssociatedByOktaUser: "associated_by_okta_user",
    AssociatedByServiceTicket: "associated_by_service_ticket",
    AssociatedControlGraph: "associated_control_graph",
    AssociatedFirewallRule: "associated_firewall_rule",
    AssociatedIdpIndicator: "associated_idp_indicator",
    AssociatedIncident: "associated_incident",
    AssociatedIndicator: "associated_indicator",
    AssociatedK8sCluster: "associated_k8s_cluster",
    AssociatedK8sSensor: "associated_k8s_sensor",
    AssociatedMobileForensicsReport: "associated_mobile_forensics_report",
    AssociatedMobileIndicator: "associated_mobile_indicator",
    AssociatedModule: "associated_module",
    AssociatedPrimaryModule: "associated_primary_module",
    AssociatedQuarantinedFile: "associated_quarantined_file",
    AssociatedQuarantinedModule: "associated_quarantined_module",
    AssociatedRootProcess: "associated_root_process",
    AssociatedToAdComputer: "associated_to_ad_computer",
    AssociatedToSensor: "associated_to_sensor",
    AssociatedUserSession: "associated_user_session",
    AssociatedWithProcess: "associated_with_process",
    AssociatedWithSensor: "associated_with_sensor",
    AttributedByProcess: "attributed_by_process",
    AttributedFromDomain: "attributed_from_domain",
    AttributedFromModule: "attributed_from_module",
    AttributedOn: "attributed_on",
    AttributedOnDomain: "attributed_on_domain",
    AttributedOnModule: "attributed_on_module",
    AttributedTo: "attributed_to",
    AttributedToActor: "attributed_to_actor",
    AuthenticatedFromIncident: "authenticated_from_incident",
    AuthenticatedHost: "authenticated_host",
    BlockedByApp: "blocked_by_app",
    BlockedByProcess: "blocked_by_process",
    BlockedBySensor: "blocked_by_sensor",
    BlockedDns: "blocked_dns",
    BlockedIp4: "blocked_ip4",
    BlockedIp6: "blocked_ip6",
    BlockedModule: "blocked_module",
    BundledInApp: "bundled_in_app",
    BundlesModule: "bundles_module",
    CertIsPresentedBy: "cert_is_presented_by",
    CertPresented: "cert_presented",
    ChildProcess: "child_process",
    ClosedIp4Socket: "closed_ip4_socket",
    ClosedIp6Socket: "closed_ip6_socket",
    CommandHistory: "command_history",
    CommandLineParentProcess: "command_line_parent_process",
    ConnectedFromApp: "connected_from_app",
    ConnectedFromHost: "connected_from_host",
    ConnectedFromProcess: "connected_from_process",
    ConnectedIp4: "connected_ip4",
    ConnectedIp6: "connected_ip6",
    ConnectedOnCustomer: "connected_on_customer",
    ConnectedOnSensor: "connected_on_sensor",
    ConnectedToAccessory: "connected_to_accessory",
    ConnectedToWifiAp: "connected_to_wifi_ap",
    ConnectionKilledByApp: "connection_killed_by_app",
    ConnectionKilledByProcess: "connection_killed_by_process",
    ContainerizedApp: "containerized_app",
    ContainerizedBySensor: "containerized_by_sensor",
    ControlGraph: "control_graph",
    CreatedByIncident: "created_by_incident",
    CreatedByProcess: "created_by_process",
    CreatedByUser: "created_by_user",
    CreatedQuarantinedFile: "created_quarantined_file",
    CreatedService: "created_service",
    CriticalFileAccessed: "critical_file_accessed",
    CriticalFileModified: "critical_file_modified",
    CustomerAgentHasUser: "customer_agent_has_user",
    CustomerHasSensor: "customer_has_sensor",
    CustomerIoc: "customer_ioc",
    CustomerSensorToSensor: "customer_sensor_to_sensor",
    CustomerUserToSensorUser: "customer_user_to_sensor_user",
    DeletedByProcess: "deleted_by_process",
    DeletedRule: "deleted_rule",
    DeniedByFirewallRule: "denied_by_firewall_rule",
    DeniedByProcess: "denied_by_process",
    DeniedFirewallRule: "denied_firewall_rule",
    DetectedModule: "detected_module",
    Detection: "detection",
    Device: "device",
    DisconnectFromWifiAp: "disconnect_from_wifi_ap",
    DisconnectedFromAccessory: "disconnected_from_accessory",
    DisconnectedFromHost: "disconnected_from_host",
    Dns: "dns",
    DnsRequest: "dns_request",
    DuplicatedByApp: "duplicated_by_app",
    DuplicatesApp: "duplicates_app",
    ElfFileWritten: "elf_file_written",
    EstablishedOnAdComputer: "established_on_ad_computer",
    EstablishedOnHostName: "established_on_host_name",
    EstablishedOnIp4: "established_on_ip4",
    EstablishedOnIp6: "established_on_ip6",
    EstablishedOnSensor: "established_on_sensor",
    EstablishedSession: "established_session",
    EstablishedUserSession: "established_user_session",
    ExecutedApp: "executed_app",
    ExecutedByProcess: "executed_by_process",
    ExecutedMacroScript: "executed_macro_script",
    ExecutedScript: "executed_script",
    ExtractedFile: "extracted_file",
    FailedToAuthenticateAdUser: "failed_to_authenticate_ad_user",
    FailedToAuthenticateToAdComputer: "failed_to_authenticate_to_ad_computer",
    FailedToAuthenticateToAdfsApp: "failed_to_authenticate_to_adfs_app",
    FailedToAuthenticateToAzureApp: "failed_to_authenticate_to_azure_app",
    FailedToAuthenticateToOktaApp: "failed_to_authenticate_to_okta_app",
    FailedToAuthenticateToPingApp: "failed_to_authenticate_to_ping_app",
    FailedToAuthenticateToServiceAccount: "failed_to_authenticate_to_service_account",
    FileCreateInfo: "file_create_info",
    FileOpenInfo: "file_open_info",
    FsPostCreate: "fs_post_create",
    FsPostOpen: "fs_post_open",
    GeneratedByRenewing: "generated_by_renewing",
    GeneratedBySession: "generated_by_session",
    GeneratedDceRpcEpmRequestAgainstDc: "generated_dce_rpc_epm_request_against_dc",
    GeneratedDceRpcRequestAgainstDc: "generated_dce_rpc_request_against_dc",
    GeneratedFailedAuthenticationToAdComputer: "generated_failed_authentication_to_ad_computer",
    GeneratedFailedAuthenticationToAdfsApp: "generated_failed_authentication_to_adfs_app",
    GeneratedFailedAuthenticationToAzureApp: "generated_failed_authentication_to_azure_app",
    GeneratedFailedAuthenticationToOktaApp: "generated_failed_authentication_to_okta_app",
    GeneratedFailedAuthenticationToPingApp: "generated_failed_authentication_to_ping_app",
    GeneratedFailedAuthenticationToServiceAccount: "generated_failed_authentication_to_service_account",
    GeneratedLdapSearchAgainstDc: "generated_ldap_search_against_dc",
    GeneratedServiceTicket: "generated_service_ticket",
    HadCodeInjectedByProcess: "had_code_injected_by_process",
    HasAppInstalled: "has_app_installed",
    HasAttributedProcess: "has_attributed_process",
    HasAttribution: "has_attribution",
    HasFirmware: "has_firmware",
    HuntingLead: "hunting_lead",
    ImplicatedByIncident: "implicated_by_incident",
    ImplicatedSensor: "implicated_sensor",
    IncludedByHuntingLead: "included_by_hunting_lead",
    IncludesProcess: "includes_process",
    Indexed: "indexed",
    InitiatedByAdComputer: "initiated_by_ad_computer",
    InitiatedByAzureAdUser: "initiated_by_azure_ad_user",
    InitiatedByOktaUser: "initiated_by_okta_user",
    InitiatedByUser: "initiated_by_user",
    InitiatedSession: "initiated_session",
    InjectedCodeIntoProcess: "injected_code_into_process",
    InjectedThread: "injected_thread",
    InjectedThreadFromProcess: "injected_thread_from_process",
    InstalledApp: "installed_app",
    InstalledByApp: "installed_by_app",
    InstalledOnHost: "installed_on_host",
    InvalidFirewallRule: "invalid_firewall_rule",
    InvalidFromProcess: "invalid_from_process",
    InvalidatedByProcess: "invalidated_by_process",
    InvalidatedFirewallRule: "invalidated_firewall_rule",
    InvolvedAdComputer: "involved_ad_computer",
    InvolvedServiceAccount: "involved_service_account",
    Ip4SocketClosedByApp: "ip4_socket_closed_by_app",
    Ip4SocketClosedByProcess: "ip4_socket_closed_by_process",
    Ip4SocketOpenedByProcess: "ip4_socket_opened_by_process",
    Ip6SocketClosedByApp: "ip6_socket_closed_by_app",
    Ip6SocketClosedByProcess: "ip6_socket_closed_by_process",
    Ip6SocketOpenedByProcess: "ip6_socket_opened_by_process",
    Ipv4: "ipv4",
    Ipv4Close: "ipv4_close",
    Ipv4Listen: "ipv4_listen",
    Ipv6: "ipv6",
    Ipv6Close: "ipv6_close",
    Ipv6Listen: "ipv6_listen",
    JarFileWritten: "jar_file_written",
    KilledIp4Connection: "killed_ip4_connection",
    KilledIp6Connection: "killed_ip6_connection",
    KnownByMd5: "known_by_md5",
    KnownBySha256: "known_by_sha256",
    LinkingEvent: "linking_event",
    LoadedByProcess: "loaded_by_process",
    LoadedModule: "loaded_module",
    MachoFileWritten: "macho_file_written",
    MacroExecutedByProcess: "macro_executed_by_process",
    MemberOfFullCommandLine: "member_of_full_command_line",
    Module: "module",
    ModuleWritten: "module_written",
    MountedOnHost: "mounted_on_host",
    MountedToHost: "mounted_to_host",
    NetworkCloseIp4: "network_close_ip4",
    NetworkCloseIp6: "network_close_ip6",
    NetworkConnectIp4: "network_connect_ip4",
    NetworkConnectIp6: "network_connect_ip6",
    NetworkListenIp4: "network_listen_ip4",
    NetworkListenIp6: "network_listen_ip6",
    NewExecutableWritten: "new_executable_written",
    NewScriptWritten: "new_script_written",
    OpenedIp4Socket: "opened_ip4_socket",
    OpenedIp6Socket: "opened_ip6_socket",
    ParentOfCommandLine: "parent_of_command_line",
    ParentProcess: "parent_process",
    ParentedByProcess: "parented_by_process",
    ParticipatingProcess: "participating_process",
    PeFileWritten: "pe_file_written",
    PerformedPsexecAgainstDc: "performed_psexec_against_dc",
    PresentedByCloud: "presented_by_cloud",
    PrimaryModule: "primary_module",
    PrimaryModuleOfProcess: "primary_module_of_process",
    QuarantinedFile: "quarantined_file",
    QueriedByProcess: "queried_by_process",
    QueriedBySensor: "queried_by_sensor",
    QueriedDns: "queried_dns",
    QueriedOnCustomer: "queried_on_customer",
    QueriedOnSensor: "queried_on_sensor",
    ReceivedFromCloud: "received_from_cloud",
    RegisteredByIncident: "registered_by_incident",
    RegisteredScheduledtask: "registered_scheduledtask",
    RenewedToGenerate: "renewed_to_generate",
    ReportsAggregateIndicator: "reports_aggregate_indicator",
    ResolvedFromDomain: "resolved_from_domain",
    ResolvedToIp4: "resolved_to_ip4",
    ResolvedToIp6: "resolved_to_ip6",
    RootedControlGraph: "rooted_control_graph",
    RuleSetByProcess: "rule_set_by_process",
    Script: "script",
    SelfDiagnosticToAgent: "self_diagnostic_to_agent",
    SetByProcess: "set_by_process",
    SetFirewallRule: "set_firewall_rule",
    SetRule: "set_rule",
    ShellIoRedirect: "shell_io_redirect",
    SuspiciousDnsRequest: "suspicious_dns_request",
    TriggerProcess: "trigger_process",
    TriggeredByControlGraph: "triggered_by_control_graph",
    TriggeredByProcess: "triggered_by_process",
    TriggeredControlGraph: "triggered_control_graph",
    TriggeredDetection: "triggered_detection",
    TriggeredIndicator: "triggered_indicator",
    TriggeredMobileIndicator: "triggered_mobile_indicator",
    TriggeredXdr: "triggered_xdr",
    TriggeringDomain: "triggering_domain",
    TriggeringNetwork: "triggering_network",
    UncontainerizedApp: "uncontainerized_app",
    UncontainerizedBySensor: "uncontainerized_by_sensor",
    UninstalledApp: "uninstalled_app",
    UnmountedFromHost: "unmounted_from_host",
    UnmountedOnHost: "unmounted_on_host",
    User: "user",
    UserSession: "user_session",
    WitnessedBySensor: "witnessed_by_sensor",
    WitnessedProcess: "witnessed_process",
    WmicreatedByIncident: "wmicreated_by_incident",
    WmicreatedProcess: "wmicreated_process",
    WrittenByProcess: "written_by_process",
    WroteModule: "wrote_module",
} as const;
export type CombinedEdgesGetEdgeTypeEnum = (typeof CombinedEdgesGetEdgeTypeEnum)[keyof typeof CombinedEdgesGetEdgeTypeEnum];
/**
 * @export
 */
export const CombinedEdgesGetScopeEnum = {
    Cspm: "cspm",
    Customer: "customer",
    Cwpp: "cwpp",
    Device: "device",
    Global: "global",
} as const;
export type CombinedEdgesGetScopeEnum = (typeof CombinedEdgesGetScopeEnum)[keyof typeof CombinedEdgesGetScopeEnum];
/**
 * @export
 */
export const CombinedRanOnGetTypeEnum = {
    Domain: "domain",
    Ipv4: "ipv4",
    Ipv6: "ipv6",
    Md5: "md5",
    Sha1: "sha1",
    Sha256: "sha256",
} as const;
export type CombinedRanOnGetTypeEnum = (typeof CombinedRanOnGetTypeEnum)[keyof typeof CombinedRanOnGetTypeEnum];
/**
 * @export
 */
export const CombinedSummaryGetVertexTypeEnum = {
    Accessories: "accessories",
    Accessory: "accessory",
    Actor: "actor",
    AdComputers: "ad-computers",
    AdGroups: "ad-groups",
    AdComputer: "ad_computer",
    AdGroup: "ad_group",
    AdfsApplications: "adfs-applications",
    AdfsApplication: "adfs_application",
    AggregateIndicators: "aggregate-indicators",
    AggregateIndicator: "aggregate_indicator",
    AnyVertex: "any-vertex",
    AzureAdUsers: "azure-ad-users",
    AzureApplications: "azure-applications",
    AzureAdUser: "azure_ad_user",
    AzureApplication: "azure_application",
    Certificate: "certificate",
    Certificates: "certificates",
    CommandLines: "command-lines",
    CommandLine: "command_line",
    ContainerizedApps: "containerized-apps",
    ContainerizedApp: "containerized_app",
    ControlGraphs: "control-graphs",
    ControlGraph: "control_graph",
    Customer: "customer",
    Customers: "customers",
    Detection: "detection",
    DetectionIndices: "detection-indices",
    DetectionIndex: "detection_index",
    Detections: "detections",
    Devices: "devices",
    Direct: "direct",
    Directs: "directs",
    Domain: "domain",
    Domains: "domains",
    ExtractedFiles: "extracted-files",
    ExtractedFile: "extracted_file",
    Firewall: "firewall",
    FirewallRuleMatch: "firewall_rule_match",
    FirewallRuleMatches: "firewall_rule_matches",
    Firewalls: "firewalls",
    Firmware: "firmware",
    Firmwares: "firmwares",
    HostNames: "host-names",
    HostName: "host_name",
    HuntingLeads: "hunting-leads",
    HuntingLead: "hunting_lead",
    IdpIndicators: "idp-indicators",
    IdpSessions: "idp-sessions",
    IdpIndicator: "idp_indicator",
    IdpSession: "idp_session",
    Incident: "incident",
    Incidents: "incidents",
    Indicator: "indicator",
    Indicators: "indicators",
    Ipv4: "ipv4",
    Ipv6: "ipv6",
    K8sCluster: "k8s_cluster",
    K8sClusters: "k8s_clusters",
    KerberosTickets: "kerberos-tickets",
    KerberosTicket: "kerberos_ticket",
    LegacyDetections: "legacy-detections",
    LegacyDetection: "legacy_detection",
    MacroScript: "macro_script",
    MacroScripts: "macro_scripts",
    MobileApps: "mobile-apps",
    MobileFsVolumes: "mobile-fs-volumes",
    MobileIndicators: "mobile-indicators",
    MobileApp: "mobile_app",
    MobileFsVolume: "mobile_fs_volume",
    MobileIndicator: "mobile_indicator",
    MobileOsForensicsReport: "mobile_os_forensics_report",
    MobileOsForensicsReports: "mobile_os_forensics_reports",
    Module: "module",
    Modules: "modules",
    OktaApplications: "okta-applications",
    OktaUsers: "okta-users",
    OktaApplication: "okta_application",
    OktaUser: "okta_user",
    PingFedApplications: "ping-fed-applications",
    PingFedApplication: "ping_fed_application",
    Process: "process",
    Processes: "processes",
    QuarantinedFiles: "quarantined-files",
    QuarantinedFile: "quarantined_file",
    Script: "script",
    Scripts: "scripts",
    Sensor: "sensor",
    SensorSelfDiagnostics: "sensor-self-diagnostics",
    SensorSelfDiagnostic: "sensor_self_diagnostic",
    Tag: "tag",
    Tags: "tags",
    UserSessions: "user-sessions",
    UserId: "user_id",
    UserSession: "user_session",
    Users: "users",
    WifiAccessPoints: "wifi-access-points",
    WifiAccessPoint: "wifi_access_point",
    Xdr: "xdr",
} as const;
export type CombinedSummaryGetVertexTypeEnum = (typeof CombinedSummaryGetVertexTypeEnum)[keyof typeof CombinedSummaryGetVertexTypeEnum];
/**
 * @export
 */
export const CombinedSummaryGetScopeEnum = {
    Cspm: "cspm",
    Customer: "customer",
    Cwpp: "cwpp",
    Device: "device",
    Global: "global",
} as const;
export type CombinedSummaryGetScopeEnum = (typeof CombinedSummaryGetScopeEnum)[keyof typeof CombinedSummaryGetScopeEnum];
/**
 * @export
 */
export const EntitiesVerticesGetVertexTypeEnum = {
    Accessories: "accessories",
    Accessory: "accessory",
    Actor: "actor",
    AdComputers: "ad-computers",
    AdGroups: "ad-groups",
    AdComputer: "ad_computer",
    AdGroup: "ad_group",
    AdfsApplications: "adfs-applications",
    AdfsApplication: "adfs_application",
    AggregateIndicators: "aggregate-indicators",
    AggregateIndicator: "aggregate_indicator",
    AnyVertex: "any-vertex",
    AzureAdUsers: "azure-ad-users",
    AzureApplications: "azure-applications",
    AzureAdUser: "azure_ad_user",
    AzureApplication: "azure_application",
    Certificate: "certificate",
    Certificates: "certificates",
    CommandLines: "command-lines",
    CommandLine: "command_line",
    ContainerizedApps: "containerized-apps",
    ContainerizedApp: "containerized_app",
    ControlGraphs: "control-graphs",
    ControlGraph: "control_graph",
    Customer: "customer",
    Customers: "customers",
    Detection: "detection",
    DetectionIndices: "detection-indices",
    DetectionIndex: "detection_index",
    Detections: "detections",
    Devices: "devices",
    Direct: "direct",
    Directs: "directs",
    Domain: "domain",
    Domains: "domains",
    ExtractedFiles: "extracted-files",
    ExtractedFile: "extracted_file",
    Firewall: "firewall",
    FirewallRuleMatch: "firewall_rule_match",
    FirewallRuleMatches: "firewall_rule_matches",
    Firewalls: "firewalls",
    Firmware: "firmware",
    Firmwares: "firmwares",
    HostNames: "host-names",
    HostName: "host_name",
    HuntingLeads: "hunting-leads",
    HuntingLead: "hunting_lead",
    IdpIndicators: "idp-indicators",
    IdpSessions: "idp-sessions",
    IdpIndicator: "idp_indicator",
    IdpSession: "idp_session",
    Incident: "incident",
    Incidents: "incidents",
    Indicator: "indicator",
    Indicators: "indicators",
    Ipv4: "ipv4",
    Ipv6: "ipv6",
    K8sCluster: "k8s_cluster",
    K8sClusters: "k8s_clusters",
    KerberosTickets: "kerberos-tickets",
    KerberosTicket: "kerberos_ticket",
    LegacyDetections: "legacy-detections",
    LegacyDetection: "legacy_detection",
    MacroScript: "macro_script",
    MacroScripts: "macro_scripts",
    MobileApps: "mobile-apps",
    MobileFsVolumes: "mobile-fs-volumes",
    MobileIndicators: "mobile-indicators",
    MobileApp: "mobile_app",
    MobileFsVolume: "mobile_fs_volume",
    MobileIndicator: "mobile_indicator",
    MobileOsForensicsReport: "mobile_os_forensics_report",
    MobileOsForensicsReports: "mobile_os_forensics_reports",
    Module: "module",
    Modules: "modules",
    OktaApplications: "okta-applications",
    OktaUsers: "okta-users",
    OktaApplication: "okta_application",
    OktaUser: "okta_user",
    PingFedApplications: "ping-fed-applications",
    PingFedApplication: "ping_fed_application",
    Process: "process",
    Processes: "processes",
    QuarantinedFiles: "quarantined-files",
    QuarantinedFile: "quarantined_file",
    Script: "script",
    Scripts: "scripts",
    Sensor: "sensor",
    SensorSelfDiagnostics: "sensor-self-diagnostics",
    SensorSelfDiagnostic: "sensor_self_diagnostic",
    Tag: "tag",
    Tags: "tags",
    UserSessions: "user-sessions",
    UserId: "user_id",
    UserSession: "user_session",
    Users: "users",
    WifiAccessPoints: "wifi-access-points",
    WifiAccessPoint: "wifi_access_point",
    Xdr: "xdr",
} as const;
export type EntitiesVerticesGetVertexTypeEnum = (typeof EntitiesVerticesGetVertexTypeEnum)[keyof typeof EntitiesVerticesGetVertexTypeEnum];
/**
 * @export
 */
export const EntitiesVerticesGetScopeEnum = {
    Cspm: "cspm",
    Customer: "customer",
    Cwpp: "cwpp",
    Device: "device",
    Global: "global",
} as const;
export type EntitiesVerticesGetScopeEnum = (typeof EntitiesVerticesGetScopeEnum)[keyof typeof EntitiesVerticesGetScopeEnum];
/**
 * @export
 */
export const EntitiesVerticesGetv2VertexTypeEnum = {
    Accessories: "accessories",
    Accessory: "accessory",
    Actor: "actor",
    AdComputers: "ad-computers",
    AdGroups: "ad-groups",
    AdComputer: "ad_computer",
    AdGroup: "ad_group",
    AdfsApplications: "adfs-applications",
    AdfsApplication: "adfs_application",
    AggregateIndicators: "aggregate-indicators",
    AggregateIndicator: "aggregate_indicator",
    AnyVertex: "any-vertex",
    AzureAdUsers: "azure-ad-users",
    AzureApplications: "azure-applications",
    AzureAdUser: "azure_ad_user",
    AzureApplication: "azure_application",
    Certificate: "certificate",
    Certificates: "certificates",
    CommandLines: "command-lines",
    CommandLine: "command_line",
    ContainerizedApps: "containerized-apps",
    ContainerizedApp: "containerized_app",
    ControlGraphs: "control-graphs",
    ControlGraph: "control_graph",
    Customer: "customer",
    Customers: "customers",
    Detection: "detection",
    DetectionIndices: "detection-indices",
    DetectionIndex: "detection_index",
    Detections: "detections",
    Devices: "devices",
    Direct: "direct",
    Directs: "directs",
    Domain: "domain",
    Domains: "domains",
    ExtractedFiles: "extracted-files",
    ExtractedFile: "extracted_file",
    Firewall: "firewall",
    FirewallRuleMatch: "firewall_rule_match",
    FirewallRuleMatches: "firewall_rule_matches",
    Firewalls: "firewalls",
    Firmware: "firmware",
    Firmwares: "firmwares",
    HostNames: "host-names",
    HostName: "host_name",
    HuntingLeads: "hunting-leads",
    HuntingLead: "hunting_lead",
    IdpIndicators: "idp-indicators",
    IdpSessions: "idp-sessions",
    IdpIndicator: "idp_indicator",
    IdpSession: "idp_session",
    Incident: "incident",
    Incidents: "incidents",
    Indicator: "indicator",
    Indicators: "indicators",
    Ipv4: "ipv4",
    Ipv6: "ipv6",
    K8sCluster: "k8s_cluster",
    K8sClusters: "k8s_clusters",
    KerberosTickets: "kerberos-tickets",
    KerberosTicket: "kerberos_ticket",
    LegacyDetections: "legacy-detections",
    LegacyDetection: "legacy_detection",
    MacroScript: "macro_script",
    MacroScripts: "macro_scripts",
    MobileApps: "mobile-apps",
    MobileFsVolumes: "mobile-fs-volumes",
    MobileIndicators: "mobile-indicators",
    MobileApp: "mobile_app",
    MobileFsVolume: "mobile_fs_volume",
    MobileIndicator: "mobile_indicator",
    MobileOsForensicsReport: "mobile_os_forensics_report",
    MobileOsForensicsReports: "mobile_os_forensics_reports",
    Module: "module",
    Modules: "modules",
    OktaApplications: "okta-applications",
    OktaUsers: "okta-users",
    OktaApplication: "okta_application",
    OktaUser: "okta_user",
    PingFedApplications: "ping-fed-applications",
    PingFedApplication: "ping_fed_application",
    Process: "process",
    Processes: "processes",
    QuarantinedFiles: "quarantined-files",
    QuarantinedFile: "quarantined_file",
    Script: "script",
    Scripts: "scripts",
    Sensor: "sensor",
    SensorSelfDiagnostics: "sensor-self-diagnostics",
    SensorSelfDiagnostic: "sensor_self_diagnostic",
    Tag: "tag",
    Tags: "tags",
    UserSessions: "user-sessions",
    UserId: "user_id",
    UserSession: "user_session",
    Users: "users",
    WifiAccessPoints: "wifi-access-points",
    WifiAccessPoint: "wifi_access_point",
    Xdr: "xdr",
} as const;
export type EntitiesVerticesGetv2VertexTypeEnum = (typeof EntitiesVerticesGetv2VertexTypeEnum)[keyof typeof EntitiesVerticesGetv2VertexTypeEnum];
/**
 * @export
 */
export const EntitiesVerticesGetv2ScopeEnum = {
    Cspm: "cspm",
    Customer: "customer",
    Cwpp: "cwpp",
    Device: "device",
    Global: "global",
} as const;
export type EntitiesVerticesGetv2ScopeEnum = (typeof EntitiesVerticesGetv2ScopeEnum)[keyof typeof EntitiesVerticesGetv2ScopeEnum];
