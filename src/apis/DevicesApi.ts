/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { DeviceapiDeviceDetailsResponseSwagger, MsaIdsRequest, MsaReplyMetaOnly } from "../models";
import {
    DeviceapiDeviceDetailsResponseSwaggerFromJSON,
    DeviceapiDeviceDetailsResponseSwaggerToJSON,
    MsaIdsRequestFromJSON,
    MsaIdsRequestToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models";

export interface GetDeviceDetailsV2Request {
    ids: Array<string>;
}

export interface PostDeviceDetailsV2Request {
    body: MsaIdsRequest;
}

/**
 *
 */
export class DevicesApi extends runtime.BaseAPI {
    /**
     * Get details on one or more hosts by providing host IDs as a query parameter.  Supports up to a maximum 100 IDs.
     */
    async getDeviceDetailsV2Raw(
        requestParameters: GetDeviceDetailsV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DeviceapiDeviceDetailsResponseSwagger>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getDeviceDetailsV2.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["devices:read"]);
        }

        const response = await this.request(
            {
                path: `/devices/entities/devices/v2`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceapiDeviceDetailsResponseSwaggerFromJSON(jsonValue));
    }

    /**
     * Get details on one or more hosts by providing host IDs as a query parameter.  Supports up to a maximum 100 IDs.
     */
    async getDeviceDetailsV2(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceapiDeviceDetailsResponseSwagger> {
        const response = await this.getDeviceDetailsV2Raw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get details on one or more hosts by providing host IDs in a POST body.  Supports up to a maximum 5000 IDs.
     */
    async postDeviceDetailsV2Raw(
        requestParameters: PostDeviceDetailsV2Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DeviceapiDeviceDetailsResponseSwagger>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling postDeviceDetailsV2.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["devices:read"]);
        }

        const response = await this.request(
            {
                path: `/devices/entities/devices/v2`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: MsaIdsRequestToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceapiDeviceDetailsResponseSwaggerFromJSON(jsonValue));
    }

    /**
     * Get details on one or more hosts by providing host IDs in a POST body.  Supports up to a maximum 5000 IDs.
     */
    async postDeviceDetailsV2(body: MsaIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceapiDeviceDetailsResponseSwagger> {
        const response = await this.postDeviceDetailsV2Raw({ body: body }, initOverrides);
        return await response.value();
    }
}
