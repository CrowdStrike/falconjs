/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { MsaReplyMetaOnly } from "../models";
import { MsaReplyMetaOnlyFromJSON, MsaReplyMetaOnlyToJSON } from "../models";

export interface IncomingEndpointEventGetRequest {
    planId: string;
    endpointId: string;
}

export interface IncomingEndpointEventPostRequest {
    planId: string;
    endpointId: string;
    body: object;
}

export interface IncomingPlanEventGetRequest {
    planId: string;
}

export interface IncomingPlanEventPostRequest {
    planId: string;
    body: object;
}

/**
 *
 */
export class IncomingWebhookRequestsApi extends runtime.BaseAPI {
    /**
     * Incoming webhook request
     */
    async incomingEndpointEventGetRaw(requestParameters: IncomingEndpointEventGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError("planId", "Required parameter requestParameters.planId was null or undefined when calling incomingEndpointEventGet.");
        }

        if (requestParameters.endpointId === null || requestParameters.endpointId === undefined) {
            throw new runtime.RequiredError("endpointId", "Required parameter requestParameters.endpointId was null or undefined when calling incomingEndpointEventGet.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/webhooks/{plan_id}/{endpoint_id}/v1`
                    .replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId)))
                    .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(requestParameters.endpointId))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Incoming webhook request
     */
    async incomingEndpointEventGet(planId: string, endpointId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.incomingEndpointEventGetRaw({ planId: planId, endpointId: endpointId }, initOverrides);
        return await response.value();
    }

    /**
     * Incoming webhook request
     */
    async incomingEndpointEventPostRaw(requestParameters: IncomingEndpointEventPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError("planId", "Required parameter requestParameters.planId was null or undefined when calling incomingEndpointEventPost.");
        }

        if (requestParameters.endpointId === null || requestParameters.endpointId === undefined) {
            throw new runtime.RequiredError("endpointId", "Required parameter requestParameters.endpointId was null or undefined when calling incomingEndpointEventPost.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling incomingEndpointEventPost.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/webhooks/{plan_id}/{endpoint_id}/v1`
                    .replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId)))
                    .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(requestParameters.endpointId))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body as any,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Incoming webhook request
     */
    async incomingEndpointEventPost(planId: string, endpointId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.incomingEndpointEventPostRaw({ planId: planId, endpointId: endpointId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Incoming webhook request
     */
    async incomingPlanEventGetRaw(requestParameters: IncomingPlanEventGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError("planId", "Required parameter requestParameters.planId was null or undefined when calling incomingPlanEventGet.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/webhooks/{plan_id}/v1`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Incoming webhook request
     */
    async incomingPlanEventGet(planId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.incomingPlanEventGetRaw({ planId: planId }, initOverrides);
        return await response.value();
    }

    /**
     * Incoming webhook request
     */
    async incomingPlanEventPostRaw(requestParameters: IncomingPlanEventPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.planId === null || requestParameters.planId === undefined) {
            throw new runtime.RequiredError("planId", "Required parameter requestParameters.planId was null or undefined when calling incomingPlanEventPost.");
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling incomingPlanEventPost.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/webhooks/{plan_id}/v1`.replace(`{${"plan_id"}}`, encodeURIComponent(String(requestParameters.planId))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body as any,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Incoming webhook request
     */
    async incomingPlanEventPost(planId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.incomingPlanEventPostRaw({ planId: planId, body: body }, initOverrides);
        return await response.value();
    }
}
