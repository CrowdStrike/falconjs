/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
    MsaReplyMetaOnly,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
    RegistrationAzureAccountCreateRequestExternalV1,
    RegistrationAzureAccountCreateRequestExternalV1FromJSON,
    RegistrationAzureAccountCreateRequestExternalV1ToJSON,
    RegistrationAzureAccountResponseV1,
    RegistrationAzureAccountResponseV1FromJSON,
    RegistrationAzureAccountResponseV1ToJSON,
    RegistrationAzureProvisionGetUserScriptResponseV1,
    RegistrationAzureProvisionGetUserScriptResponseV1FromJSON,
    RegistrationAzureProvisionGetUserScriptResponseV1ToJSON,
    RegistrationAzureServicePrincipalResponseV1,
    RegistrationAzureServicePrincipalResponseV1FromJSON,
    RegistrationAzureServicePrincipalResponseV1ToJSON,
    RegistrationGCPAccountCreateRequestExtV1,
    RegistrationGCPAccountCreateRequestExtV1FromJSON,
    RegistrationGCPAccountCreateRequestExtV1ToJSON,
    RegistrationGCPAccountResponseV1,
    RegistrationGCPAccountResponseV1FromJSON,
    RegistrationGCPAccountResponseV1ToJSON,
    RegistrationGCPProvisionGetUserScriptResponseV1,
    RegistrationGCPProvisionGetUserScriptResponseV1FromJSON,
    RegistrationGCPProvisionGetUserScriptResponseV1ToJSON,
} from "../models";

export interface CreateCSPMAzureAccountRequest {
    body: RegistrationAzureAccountCreateRequestExternalV1;
}

export interface CreateCSPMGCPAccountRequest {
    body: RegistrationGCPAccountCreateRequestExtV1;
}

export interface GetCSPMAzureAccountRequest {
    ids?: Array<string>;
    scanType?: string;
}

export interface GetCSPMCGPAccountRequest {
    scanType?: string;
    ids?: Array<string>;
}

export interface UpdateCSPMAzureAccountClientIDRequest {
    id: string;
}

/**
 *
 */
export class D4cRegistrationApi extends runtime.BaseAPI {
    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
     */
    async createCSPMAzureAccountRaw(requestParameters: CreateCSPMAzureAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationAzureAccountResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createCSPMAzureAccount.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:write"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-azure/entities/account/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationAzureAccountCreateRequestExternalV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Creates a new account in our system for a customer and generates a script for them to run in their cloud environment to grant us access.
     */
    async createCSPMAzureAccount(body: RegistrationAzureAccountCreateRequestExternalV1, initOverrides?: RequestInit): Promise<RegistrationAzureAccountResponseV1> {
        const response = await this.createCSPMAzureAccountRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
     */
    async createCSPMGCPAccountRaw(requestParameters: CreateCSPMGCPAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationGCPAccountResponseV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createCSPMGCPAccount.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:write"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-gcp/entities/account/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationGCPAccountCreateRequestExtV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationGCPAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Creates a new account in our system for a customer and generates a new service account for them to add access to in their GCP environment to grant us access.
     */
    async createCSPMGCPAccount(body: RegistrationGCPAccountCreateRequestExtV1, initOverrides?: RequestInit): Promise<RegistrationGCPAccountResponseV1> {
        const response = await this.createCSPMGCPAccountRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Return information about Azure account registration
     */
    async getCSPMAzureAccountRaw(requestParameters: GetCSPMAzureAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationAzureAccountResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        if (requestParameters.scanType !== undefined) {
            queryParameters["scan-type"] = requestParameters.scanType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-azure/entities/account/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Return information about Azure account registration
     */
    async getCSPMAzureAccount(ids?: Array<string>, scanType?: string, initOverrides?: RequestInit): Promise<RegistrationAzureAccountResponseV1> {
        const response = await this.getCSPMAzureAccountRaw({ ids: ids, scanType: scanType }, initOverrides);
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment
     */
    async getCSPMAzureUserScriptsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationAzureProvisionGetUserScriptResponseV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-azure/entities/user-scripts/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureProvisionGetUserScriptResponseV1FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment
     */
    async getCSPMAzureUserScripts(initOverrides?: RequestInit): Promise<RegistrationAzureProvisionGetUserScriptResponseV1> {
        const response = await this.getCSPMAzureUserScriptsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
     */
    async getCSPMAzureUserScriptsAttachmentRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationAzureProvisionGetUserScriptResponseV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-azure/entities/user-scripts-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureProvisionGetUserScriptResponseV1FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their Azure environment as a downloadable attachment
     */
    async getCSPMAzureUserScriptsAttachment(initOverrides?: RequestInit): Promise<RegistrationAzureProvisionGetUserScriptResponseV1> {
        const response = await this.getCSPMAzureUserScriptsAttachmentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns information about the current status of an GCP account.
     */
    async getCSPMCGPAccountRaw(requestParameters: GetCSPMCGPAccountRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationGCPAccountResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters.scanType !== undefined) {
            queryParameters["scan-type"] = requestParameters.scanType;
        }

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-gcp/entities/account/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationGCPAccountResponseV1FromJSON(jsonValue));
    }

    /**
     * Returns information about the current status of an GCP account.
     */
    async getCSPMCGPAccount(scanType?: string, ids?: Array<string>, initOverrides?: RequestInit): Promise<RegistrationGCPAccountResponseV1> {
        const response = await this.getCSPMCGPAccountRaw({ scanType: scanType, ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their GCP environment
     */
    async getCSPMGCPUserScriptsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationGCPProvisionGetUserScriptResponseV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-gcp/entities/user-scripts/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationGCPProvisionGetUserScriptResponseV1FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their GCP environment
     */
    async getCSPMGCPUserScripts(initOverrides?: RequestInit): Promise<RegistrationGCPProvisionGetUserScriptResponseV1> {
        const response = await this.getCSPMGCPUserScriptsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
     */
    async getCSPMGCPUserScriptsAttachmentRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegistrationGCPProvisionGetUserScriptResponseV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:read"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-gcp/entities/user-scripts-download/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationGCPProvisionGetUserScriptResponseV1FromJSON(jsonValue));
    }

    /**
     * Return a script for customer to run in their cloud environment to grant us access to their GCP environment as a downloadable attachment
     */
    async getCSPMGCPUserScriptsAttachment(initOverrides?: RequestInit): Promise<RegistrationGCPProvisionGetUserScriptResponseV1> {
        const response = await this.getCSPMGCPUserScriptsAttachmentRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an Azure service account in our system by with the user-created client_id created with the public key we\'ve provided
     */
    async updateCSPMAzureAccountClientIDRaw(
        requestParameters: UpdateCSPMAzureAccountClientIDRequest,
        initOverrides?: RequestInit
    ): Promise<runtime.ApiResponse<RegistrationAzureServicePrincipalResponseV1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling updateCSPMAzureAccountClientID.");
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters["id"] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["d4c-registration:write"]);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-azure/entities/client-id/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationAzureServicePrincipalResponseV1FromJSON(jsonValue));
    }

    /**
     * Update an Azure service account in our system by with the user-created client_id created with the public key we\'ve provided
     */
    async updateCSPMAzureAccountClientID(id: string, initOverrides?: RequestInit): Promise<RegistrationAzureServicePrincipalResponseV1> {
        const response = await this.updateCSPMAzureAccountClientIDRaw({ id: id }, initOverrides);
        return await response.value();
    }
}
