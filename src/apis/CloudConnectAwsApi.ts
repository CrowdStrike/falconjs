/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ModelsAWSAccountsV1,
    ModelsBaseResponseV1,
    ModelsCreateAWSAccountsV1,
    ModelsCustomerConfigurationsV1,
    ModelsModifyAWSCustomerSettingsV1,
    ModelsUpdateAWSAccountsV1,
    ModelsVerifyAccessResponseV1,
    MsaQueryResponse,
    MsaReplyMetaOnly,
} from "../models/index";
import {
    ModelsAWSAccountsV1FromJSON,
    ModelsAWSAccountsV1ToJSON,
    ModelsBaseResponseV1FromJSON,
    ModelsBaseResponseV1ToJSON,
    ModelsCreateAWSAccountsV1FromJSON,
    ModelsCreateAWSAccountsV1ToJSON,
    ModelsCustomerConfigurationsV1FromJSON,
    ModelsCustomerConfigurationsV1ToJSON,
    ModelsModifyAWSCustomerSettingsV1FromJSON,
    ModelsModifyAWSCustomerSettingsV1ToJSON,
    ModelsUpdateAWSAccountsV1FromJSON,
    ModelsUpdateAWSAccountsV1ToJSON,
    ModelsVerifyAccessResponseV1FromJSON,
    ModelsVerifyAccessResponseV1ToJSON,
    MsaQueryResponseFromJSON,
    MsaQueryResponseToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface CreateOrUpdateAWSSettingsRequest {
    body: ModelsModifyAWSCustomerSettingsV1;
}

export interface DeleteAWSAccountsRequest {
    ids: Array<string>;
}

export interface GetAWSAccountsRequest {
    ids: Array<string>;
}

export interface ProvisionAWSAccountsRequest {
    body: ModelsCreateAWSAccountsV1;
    mode?: ProvisionAWSAccountsModeEnum;
}

export interface QueryAWSAccountsRequest {
    limit?: number;
    offset?: number;
    sort?: string;
    filter?: string;
}

export interface QueryAWSAccountsForIDsRequest {
    limit?: number;
    offset?: number;
    sort?: string;
    filter?: string;
}

export interface UpdateAWSAccountsRequest {
    body: ModelsUpdateAWSAccountsV1;
}

export interface VerifyAWSAccountAccessRequest {
    ids: Array<string>;
}

/**
 *
 */
export class CloudConnectAwsApi extends runtime.BaseAPI {
    /**
     * Create or update Global Settings which are applicable to all provisioned AWS accounts
     */
    async createOrUpdateAWSSettingsRaw(
        requestParameters: CreateOrUpdateAWSSettingsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ModelsCustomerConfigurationsV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling createOrUpdateAWSSettings.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/settings/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ModelsModifyAWSCustomerSettingsV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCustomerConfigurationsV1FromJSON(jsonValue));
    }

    /**
     * Create or update Global Settings which are applicable to all provisioned AWS accounts
     */
    async createOrUpdateAWSSettings(body: ModelsModifyAWSCustomerSettingsV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCustomerConfigurationsV1> {
        const response = await this.createOrUpdateAWSSettingsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a set of AWS Accounts by specifying their IDs
     */
    async deleteAWSAccountsRaw(requestParameters: DeleteAWSAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsBaseResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling deleteAWSAccounts.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/accounts/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsBaseResponseV1FromJSON(jsonValue));
    }

    /**
     * Delete a set of AWS Accounts by specifying their IDs
     */
    async deleteAWSAccounts(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsBaseResponseV1> {
        const response = await this.deleteAWSAccountsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a set of AWS Accounts by specifying their IDs
     */
    async getAWSAccountsRaw(requestParameters: GetAWSAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAWSAccountsV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling getAWSAccounts.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/accounts/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAWSAccountsV1FromJSON(jsonValue));
    }

    /**
     * Retrieve a set of AWS Accounts by specifying their IDs
     */
    async getAWSAccounts(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAWSAccountsV1> {
        const response = await this.getAWSAccountsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a set of Global Settings which are applicable to all provisioned AWS accounts
     */
    async getAWSSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsCustomerConfigurationsV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/combined/settings/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsCustomerConfigurationsV1FromJSON(jsonValue));
    }

    /**
     * Retrieve a set of Global Settings which are applicable to all provisioned AWS accounts
     */
    async getAWSSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsCustomerConfigurationsV1> {
        const response = await this.getAWSSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Provision AWS Accounts by specifying details about the accounts to provision
     */
    async provisionAWSAccountsRaw(requestParameters: ProvisionAWSAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAWSAccountsV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling provisionAWSAccounts.");
        }

        const queryParameters: any = {};

        if (requestParameters.mode !== undefined) {
            queryParameters["mode"] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/accounts/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ModelsCreateAWSAccountsV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAWSAccountsV1FromJSON(jsonValue));
    }

    /**
     * Provision AWS Accounts by specifying details about the accounts to provision
     */
    async provisionAWSAccounts(body: ModelsCreateAWSAccountsV1, mode?: ProvisionAWSAccountsModeEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAWSAccountsV1> {
        const response = await this.provisionAWSAccountsRaw({ body: body, mode: mode }, initOverrides);
        return await response.value();
    }

    /**
     * Search for provisioned AWS Accounts by providing an FQL filter and paging details. Returns a set of AWS accounts which match the filter criteria
     */
    async queryAWSAccountsRaw(requestParameters: QueryAWSAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAWSAccountsV1>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/combined/accounts/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAWSAccountsV1FromJSON(jsonValue));
    }

    /**
     * Search for provisioned AWS Accounts by providing an FQL filter and paging details. Returns a set of AWS accounts which match the filter criteria
     */
    async queryAWSAccounts(limit?: number, offset?: number, sort?: string, filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAWSAccountsV1> {
        const response = await this.queryAWSAccountsRaw({ limit: limit, offset: offset, sort: sort, filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Search for provisioned AWS Accounts by providing an FQL filter and paging details. Returns a set of AWS account IDs which match the filter criteria
     */
    async queryAWSAccountsForIDsRaw(requestParameters: QueryAWSAccountsForIDsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/queries/accounts/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Search for provisioned AWS Accounts by providing an FQL filter and paging details. Returns a set of AWS account IDs which match the filter criteria
     */
    async queryAWSAccountsForIDs(limit?: number, offset?: number, sort?: string, filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MsaQueryResponse> {
        const response = await this.queryAWSAccountsForIDsRaw({ limit: limit, offset: offset, sort: sort, filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Update AWS Accounts by specifying the ID of the account and details to update
     */
    async updateAWSAccountsRaw(requestParameters: UpdateAWSAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelsAWSAccountsV1>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError("body", "Required parameter requestParameters.body was null or undefined when calling updateAWSAccounts.");
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/accounts/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: ModelsUpdateAWSAccountsV1ToJSON(requestParameters.body),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsAWSAccountsV1FromJSON(jsonValue));
    }

    /**
     * Update AWS Accounts by specifying the ID of the account and details to update
     */
    async updateAWSAccounts(body: ModelsUpdateAWSAccountsV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsAWSAccountsV1> {
        const response = await this.updateAWSAccountsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Performs an Access Verification check on the specified AWS Account IDs
     */
    async verifyAWSAccountAccessRaw(
        requestParameters: VerifyAWSAccountAccessRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<ModelsVerifyAccessResponseV1>> {
        if (requestParameters.ids === null || requestParameters.ids === undefined) {
            throw new runtime.RequiredError("ids", "Required parameter requestParameters.ids was null or undefined when calling verifyAWSAccountAccess.");
        }

        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters["ids"] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/cloud-connect-aws/entities/verify-account-access/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsVerifyAccessResponseV1FromJSON(jsonValue));
    }

    /**
     * Performs an Access Verification check on the specified AWS Account IDs
     */
    async verifyAWSAccountAccess(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelsVerifyAccessResponseV1> {
        const response = await this.verifyAWSAccountAccessRaw({ ids: ids }, initOverrides);
        return await response.value();
    }
}

/**
 * @export
 */
export const ProvisionAWSAccountsModeEnum = {
    Cloudformation: "cloudformation",
    Manual: "manual",
} as const;
export type ProvisionAWSAccountsModeEnum = (typeof ProvisionAWSAccountsModeEnum)[keyof typeof ProvisionAWSAccountsModeEnum];
