/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    CommonGenericEntityResponseString,
    CoreEntitiesResponse,
    DetectionsApiAssessmentDetections,
    DetectionsApiCombinedDetections,
    DetectionsApiDetectionsBySeverity,
    DetectionsApiDetectionsByType,
    DetectionsApiDetectionsCount,
    MsaReplyMetaOnly,
} from "../models/index";
import {
    CommonGenericEntityResponseStringFromJSON,
    CommonGenericEntityResponseStringToJSON,
    CoreEntitiesResponseFromJSON,
    CoreEntitiesResponseToJSON,
    DetectionsApiAssessmentDetectionsFromJSON,
    DetectionsApiAssessmentDetectionsToJSON,
    DetectionsApiCombinedDetectionsFromJSON,
    DetectionsApiCombinedDetectionsToJSON,
    DetectionsApiDetectionsBySeverityFromJSON,
    DetectionsApiDetectionsBySeverityToJSON,
    DetectionsApiDetectionsByTypeFromJSON,
    DetectionsApiDetectionsByTypeToJSON,
    DetectionsApiDetectionsCountFromJSON,
    DetectionsApiDetectionsCountToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface ReadCombinedDetectionsRequest {
    filter?: string;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface ReadDetectionsRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

export interface ReadDetectionsCountRequest {
    filter?: string;
}

export interface ReadDetectionsCountBySeverityRequest {
    filter?: string;
}

export interface ReadDetectionsCountByTypeRequest {
    filter?: string;
}

export interface SearchDetectionsRequest {
    filter?: string;
    limit?: number;
    offset?: number;
}

/**
 *
 */
export class ContainerDetectionsApi extends runtime.BaseAPI {
    /**
     * Retrieve image assessment detections identified by the provided filter criteria
     */
    async readCombinedDetectionsRaw(
        requestParameters: ReadCombinedDetectionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DetectionsApiCombinedDetections>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters["sort"] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/combined/detections/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionsApiCombinedDetectionsFromJSON(jsonValue));
    }

    /**
     * Retrieve image assessment detections identified by the provided filter criteria
     */
    async readCombinedDetections(
        filter?: string,
        limit?: number,
        offset?: number,
        sort?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<DetectionsApiCombinedDetections> {
        const response = await this.readCombinedDetectionsRaw({ filter: filter, limit: limit, offset: offset, sort: sort }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve image assessment detection entities identified by the provided filter criteria
     */
    async readDetectionsRaw(requestParameters: ReadDetectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectionsApiAssessmentDetections>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/entities/detections/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionsApiAssessmentDetectionsFromJSON(jsonValue));
    }

    /**
     * Retrieve image assessment detection entities identified by the provided filter criteria
     */
    async readDetections(filter?: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectionsApiAssessmentDetections> {
        const response = await this.readDetectionsRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate count of detections
     */
    async readDetectionsCountRaw(
        requestParameters: ReadDetectionsCountRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DetectionsApiDetectionsCount>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/detections/count/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionsApiDetectionsCountFromJSON(jsonValue));
    }

    /**
     * Aggregate count of detections
     */
    async readDetectionsCount(filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectionsApiDetectionsCount> {
        const response = await this.readDetectionsCountRaw({ filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate counts of detections by severity
     */
    async readDetectionsCountBySeverityRaw(
        requestParameters: ReadDetectionsCountBySeverityRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DetectionsApiDetectionsBySeverity>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/detections/count-by-severity/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionsApiDetectionsBySeverityFromJSON(jsonValue));
    }

    /**
     * Aggregate counts of detections by severity
     */
    async readDetectionsCountBySeverity(filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectionsApiDetectionsBySeverity> {
        const response = await this.readDetectionsCountBySeverityRaw({ filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate counts of detections by detection type
     */
    async readDetectionsCountByTypeRaw(
        requestParameters: ReadDetectionsCountByTypeRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<DetectionsApiDetectionsByType>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/aggregates/detections/count-by-type/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionsApiDetectionsByTypeFromJSON(jsonValue));
    }

    /**
     * Aggregate counts of detections by detection type
     */
    async readDetectionsCountByType(filter?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectionsApiDetectionsByType> {
        const response = await this.readDetectionsCountByTypeRaw({ filter: filter }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve image assessment detection entities identified by the provided filter criteria
     */
    async searchDetectionsRaw(requestParameters: SearchDetectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommonGenericEntityResponseString>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters["filter"] = requestParameters.filter;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters["limit"] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters["offset"] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/container-security/queries/detections/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonGenericEntityResponseStringFromJSON(jsonValue));
    }

    /**
     * Retrieve image assessment detection entities identified by the provided filter criteria
     */
    async searchDetections(filter?: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommonGenericEntityResponseString> {
        const response = await this.searchDetectionsRaw({ filter: filter, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }
}
