/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    FwmgrApiAggregatesResponse,
    FwmgrApiEventsResponse,
    FwmgrApiFilepathTestRequest,
    FwmgrApiFirewallFieldsResponse,
    FwmgrApiNetworkLocationCreateRequestV1,
    FwmgrApiNetworkLocationModifyMetadataRequestV1,
    FwmgrApiNetworkLocationModifyPrecedenceRequestV1,
    FwmgrApiNetworkLocationModifyRequestV1,
    FwmgrApiNetworkLocationSummariesResponse,
    FwmgrApiNetworkLocationsResponse,
    FwmgrApiPlatformsResponse,
    FwmgrApiPolicyContainerUpsertRequestV1,
    FwmgrApiPolicyContainersResponse,
    FwmgrApiQueryResponse,
    FwmgrApiRuleGroupCreateRequestV1,
    FwmgrApiRuleGroupModifyRequestV1,
    FwmgrApiRuleGroupsResponse,
    FwmgrApiRulesResponse,
    FwmgrApiValidateFilepathResponse,
    FwmgrMsaAggregateQueryRequest,
    FwmgrMsaspecQueryResponse,
    FwmgrMsaspecResponseFields,
    MsaReplyMetaOnly,
} from "../models/index";
import {
    FwmgrApiAggregatesResponseFromJSON,
    FwmgrApiAggregatesResponseToJSON,
    FwmgrApiEventsResponseFromJSON,
    FwmgrApiEventsResponseToJSON,
    FwmgrApiFilepathTestRequestFromJSON,
    FwmgrApiFilepathTestRequestToJSON,
    FwmgrApiFirewallFieldsResponseFromJSON,
    FwmgrApiFirewallFieldsResponseToJSON,
    FwmgrApiNetworkLocationCreateRequestV1FromJSON,
    FwmgrApiNetworkLocationCreateRequestV1ToJSON,
    FwmgrApiNetworkLocationModifyMetadataRequestV1FromJSON,
    FwmgrApiNetworkLocationModifyMetadataRequestV1ToJSON,
    FwmgrApiNetworkLocationModifyPrecedenceRequestV1FromJSON,
    FwmgrApiNetworkLocationModifyPrecedenceRequestV1ToJSON,
    FwmgrApiNetworkLocationModifyRequestV1FromJSON,
    FwmgrApiNetworkLocationModifyRequestV1ToJSON,
    FwmgrApiNetworkLocationSummariesResponseFromJSON,
    FwmgrApiNetworkLocationSummariesResponseToJSON,
    FwmgrApiNetworkLocationsResponseFromJSON,
    FwmgrApiNetworkLocationsResponseToJSON,
    FwmgrApiPlatformsResponseFromJSON,
    FwmgrApiPlatformsResponseToJSON,
    FwmgrApiPolicyContainerUpsertRequestV1FromJSON,
    FwmgrApiPolicyContainerUpsertRequestV1ToJSON,
    FwmgrApiPolicyContainersResponseFromJSON,
    FwmgrApiPolicyContainersResponseToJSON,
    FwmgrApiQueryResponseFromJSON,
    FwmgrApiQueryResponseToJSON,
    FwmgrApiRuleGroupCreateRequestV1FromJSON,
    FwmgrApiRuleGroupCreateRequestV1ToJSON,
    FwmgrApiRuleGroupModifyRequestV1FromJSON,
    FwmgrApiRuleGroupModifyRequestV1ToJSON,
    FwmgrApiRuleGroupsResponseFromJSON,
    FwmgrApiRuleGroupsResponseToJSON,
    FwmgrApiRulesResponseFromJSON,
    FwmgrApiRulesResponseToJSON,
    FwmgrApiValidateFilepathResponseFromJSON,
    FwmgrApiValidateFilepathResponseToJSON,
    FwmgrMsaAggregateQueryRequestFromJSON,
    FwmgrMsaAggregateQueryRequestToJSON,
    FwmgrMsaspecQueryResponseFromJSON,
    FwmgrMsaspecQueryResponseToJSON,
    FwmgrMsaspecResponseFieldsFromJSON,
    FwmgrMsaspecResponseFieldsToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from "../models/index";

export interface FirewallManagementApiAggregateEventsRequest {
    body: Array<FwmgrMsaAggregateQueryRequest>;
}

export interface FirewallManagementApiAggregatePolicyRulesRequest {
    body: Array<FwmgrMsaAggregateQueryRequest>;
}

export interface FirewallManagementApiAggregateRuleGroupsRequest {
    body: Array<FwmgrMsaAggregateQueryRequest>;
}

export interface FirewallManagementApiAggregateRulesRequest {
    body: Array<FwmgrMsaAggregateQueryRequest>;
}

export interface FirewallManagementApiCreateNetworkLocationsRequest {
    body: FwmgrApiNetworkLocationCreateRequestV1;
    cloneId?: string;
    addFwRules?: boolean;
    comment?: string;
}

export interface FirewallManagementApiCreateRuleGroupRequest {
    body: FwmgrApiRuleGroupCreateRequestV1;
    cloneId?: string;
    library?: string;
    comment?: string;
}

export interface FirewallManagementApiCreateRuleGroupValidationRequest {
    body: FwmgrApiRuleGroupCreateRequestV1;
    cloneId?: string;
    library?: string;
    comment?: string;
}

export interface FirewallManagementApiDeleteNetworkLocationsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiDeleteRuleGroupsRequest {
    ids: Array<string>;
    comment?: string;
}

export interface FirewallManagementApiGetEventsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetFirewallFieldsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetNetworkLocationsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetNetworkLocationsDetailsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetPlatformsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetPolicyContainersRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetRuleGroupsRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiGetRulesRequest {
    ids: Array<string>;
}

export interface FirewallManagementApiQueryEventsRequest {
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    after?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryFirewallFieldsRequest {
    platformId?: string;
    offset?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryNetworkLocationsRequest {
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    after?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryPlatformsRequest {
    offset?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryPolicyRulesRequest {
    id?: string;
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryRuleGroupsRequest {
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    after?: string;
    limit?: number;
}

export interface FirewallManagementApiQueryRulesRequest {
    sort?: string;
    filter?: string;
    q?: string;
    offset?: string;
    after?: string;
    limit?: number;
}

export interface FirewallManagementApiUpdateNetworkLocationsRequest {
    body: FwmgrApiNetworkLocationModifyRequestV1;
    comment?: string;
}

export interface FirewallManagementApiUpdateNetworkLocationsMetadataRequest {
    body: FwmgrApiNetworkLocationModifyMetadataRequestV1;
    comment?: string;
}

export interface FirewallManagementApiUpdateNetworkLocationsPrecedenceRequest {
    body: FwmgrApiNetworkLocationModifyPrecedenceRequestV1;
    comment?: string;
}

export interface FirewallManagementApiUpdatePolicyContainerRequest {
    body: FwmgrApiPolicyContainerUpsertRequestV1;
}

export interface FirewallManagementApiUpdatePolicyContainerV1Request {
    body: FwmgrApiPolicyContainerUpsertRequestV1;
}

export interface FirewallManagementApiUpdateRuleGroupRequest {
    body: FwmgrApiRuleGroupModifyRequestV1;
    comment?: string;
}

export interface FirewallManagementApiUpdateRuleGroupValidationRequest {
    body: FwmgrApiRuleGroupModifyRequestV1;
    comment?: string;
}

export interface FirewallManagementApiUpsertNetworkLocationsRequest {
    body: FwmgrApiNetworkLocationModifyRequestV1;
    comment?: string;
}

export interface FirewallManagementApiValidateFilepathPatternRequest {
    body: FwmgrApiFilepathTestRequest;
}

/**
 *
 */
export class FirewallManagementApi extends runtime.BaseAPI {
    /**
     * Aggregate events for customer
     */
    async aggregateEventsRaw(
        requestParameters: FirewallManagementApiAggregateEventsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling aggregateEvents().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/aggregates/events/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(FwmgrMsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Aggregate events for customer
     */
    async aggregateEvents(body: Array<FwmgrMsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiAggregatesResponse> {
        const response = await this.aggregateEventsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate rules within a policy for customer
     */
    async aggregatePolicyRulesRaw(
        requestParameters: FirewallManagementApiAggregatePolicyRulesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling aggregatePolicyRules().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/aggregates/policy-rules/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(FwmgrMsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Aggregate rules within a policy for customer
     */
    async aggregatePolicyRules(body: Array<FwmgrMsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiAggregatesResponse> {
        const response = await this.aggregatePolicyRulesRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate rule groups for customer
     */
    async aggregateRuleGroupsRaw(
        requestParameters: FirewallManagementApiAggregateRuleGroupsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling aggregateRuleGroups().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/aggregates/rule-groups/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(FwmgrMsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Aggregate rule groups for customer
     */
    async aggregateRuleGroups(body: Array<FwmgrMsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiAggregatesResponse> {
        const response = await this.aggregateRuleGroupsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Aggregate rules for customer
     */
    async aggregateRulesRaw(
        requestParameters: FirewallManagementApiAggregateRulesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiAggregatesResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling aggregateRules().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/aggregates/rules/GET/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters["body"]!.map(FwmgrMsaAggregateQueryRequestToJSON),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Aggregate rules for customer
     */
    async aggregateRules(body: Array<FwmgrMsaAggregateQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiAggregatesResponse> {
        const response = await this.aggregateRulesRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create new network locations provided, and return the ID.
     */
    async createNetworkLocationsRaw(
        requestParameters: FirewallManagementApiCreateNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiNetworkLocationsResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createNetworkLocations().');
        }

        const queryParameters: any = {};

        if (requestParameters["cloneId"] != null) {
            queryParameters["clone_id"] = requestParameters["cloneId"];
        }

        if (requestParameters["addFwRules"] != null) {
            queryParameters["add_fw_rules"] = requestParameters["addFwRules"];
        }

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiNetworkLocationCreateRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiNetworkLocationsResponseFromJSON(jsonValue));
    }

    /**
     * Create new network locations provided, and return the ID.
     */
    async createNetworkLocations(
        body: FwmgrApiNetworkLocationCreateRequestV1,
        cloneId?: string,
        addFwRules?: boolean,
        comment?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiNetworkLocationsResponse> {
        const response = await this.createNetworkLocationsRaw({ body: body, cloneId: cloneId, addFwRules: addFwRules, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Create new rule group on a platform for a customer with a name and description, and return the ID
     */
    async createRuleGroupRaw(
        requestParameters: FirewallManagementApiCreateRuleGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createRuleGroup().');
        }

        const queryParameters: any = {};

        if (requestParameters["cloneId"] != null) {
            queryParameters["clone_id"] = requestParameters["cloneId"];
        }

        if (requestParameters["library"] != null) {
            queryParameters["library"] = requestParameters["library"];
        }

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiRuleGroupCreateRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Create new rule group on a platform for a customer with a name and description, and return the ID
     */
    async createRuleGroup(
        body: FwmgrApiRuleGroupCreateRequestV1,
        cloneId?: string,
        library?: string,
        comment?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.createRuleGroupRaw({ body: body, cloneId: cloneId, library: library, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Validates the request of creating a new rule group on a platform for a customer with a name and description
     */
    async createRuleGroupValidationRaw(
        requestParameters: FirewallManagementApiCreateRuleGroupValidationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling createRuleGroupValidation().');
        }

        const queryParameters: any = {};

        if (requestParameters["cloneId"] != null) {
            queryParameters["clone_id"] = requestParameters["cloneId"];
        }

        if (requestParameters["library"] != null) {
            queryParameters["library"] = requestParameters["library"];
        }

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/validation/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiRuleGroupCreateRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Validates the request of creating a new rule group on a platform for a customer with a name and description
     */
    async createRuleGroupValidation(
        body: FwmgrApiRuleGroupCreateRequestV1,
        cloneId?: string,
        library?: string,
        comment?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.createRuleGroupValidationRaw({ body: body, cloneId: cloneId, library: library, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Delete network location entities by ID.
     */
    async deleteNetworkLocationsRaw(
        requestParameters: FirewallManagementApiDeleteNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling deleteNetworkLocations().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Delete network location entities by ID.
     */
    async deleteNetworkLocations(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.deleteNetworkLocationsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Delete rule group entities by ID
     */
    async deleteRuleGroupsRaw(
        requestParameters: FirewallManagementApiDeleteRuleGroupsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling deleteRuleGroups().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/v1`,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Delete rule group entities by ID
     */
    async deleteRuleGroups(ids: Array<string>, comment?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiQueryResponse> {
        const response = await this.deleteRuleGroupsRaw({ ids: ids, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Get events entities by ID and optionally version
     */
    async getEventsRaw(requestParameters: FirewallManagementApiGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FwmgrApiEventsResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getEvents().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/events/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get events entities by ID and optionally version
     */
    async getEvents(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiEventsResponse> {
        const response = await this.getEventsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get the firewall field specifications by ID
     */
    async getFirewallFieldsRaw(
        requestParameters: FirewallManagementApiGetFirewallFieldsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiFirewallFieldsResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getFirewallFields().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/firewall-fields/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiFirewallFieldsResponseFromJSON(jsonValue));
    }

    /**
     * Get the firewall field specifications by ID
     */
    async getFirewallFields(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiFirewallFieldsResponse> {
        const response = await this.getFirewallFieldsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a summary of network locations that includes name, description, enabled/disabled status, a count of associated rules etc
     * Get a summary of network locations entities by ID
     */
    async getNetworkLocationsRaw(
        requestParameters: FirewallManagementApiGetNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiNetworkLocationSummariesResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getNetworkLocations().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiNetworkLocationSummariesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a summary of network locations that includes name, description, enabled/disabled status, a count of associated rules etc
     * Get a summary of network locations entities by ID
     */
    async getNetworkLocations(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiNetworkLocationSummariesResponse> {
        const response = await this.getNetworkLocationsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the complete network locations objects that includes all the network location conditions.
     * Get network locations entities by ID
     */
    async getNetworkLocationsDetailsRaw(
        requestParameters: FirewallManagementApiGetNetworkLocationsDetailsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiNetworkLocationsResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getNetworkLocationsDetails().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations-details/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiNetworkLocationsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the complete network locations objects that includes all the network location conditions.
     * Get network locations entities by ID
     */
    async getNetworkLocationsDetails(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiNetworkLocationsResponse> {
        const response = await this.getNetworkLocationsDetailsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get platforms by ID, e.g., windows or mac or droid
     */
    async getPlatformsRaw(
        requestParameters: FirewallManagementApiGetPlatformsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiPlatformsResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getPlatforms().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/platforms/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiPlatformsResponseFromJSON(jsonValue));
    }

    /**
     * Get platforms by ID, e.g., windows or mac or droid
     */
    async getPlatforms(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiPlatformsResponse> {
        const response = await this.getPlatformsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get policy container entities by policy ID
     */
    async getPolicyContainersRaw(
        requestParameters: FirewallManagementApiGetPolicyContainersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiPolicyContainersResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getPolicyContainers().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/policies/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiPolicyContainersResponseFromJSON(jsonValue));
    }

    /**
     * Get policy container entities by policy ID
     */
    async getPolicyContainers(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiPolicyContainersResponse> {
        const response = await this.getPolicyContainersRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order.
     */
    async getRuleGroupsRaw(
        requestParameters: FirewallManagementApiGetRuleGroupsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiRuleGroupsResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getRuleGroups().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiRuleGroupsResponseFromJSON(jsonValue));
    }

    /**
     * Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order.
     */
    async getRuleGroups(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiRuleGroupsResponse> {
        const response = await this.getRuleGroupsRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string)
     */
    async getRulesRaw(requestParameters: FirewallManagementApiGetRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FwmgrApiRulesResponse>> {
        if (requestParameters["ids"] == null) {
            throw new runtime.RequiredError("ids", 'Required parameter "ids" was null or undefined when calling getRules().');
        }

        const queryParameters: any = {};

        if (requestParameters["ids"] != null) {
            queryParameters["ids"] = requestParameters["ids"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rules/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiRulesResponseFromJSON(jsonValue));
    }

    /**
     * Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string)
     */
    async getRules(ids: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiRulesResponse> {
        const response = await this.getRulesRaw({ ids: ids }, initOverrides);
        return await response.value();
    }

    /**
     * Find all event IDs matching the query with filter
     */
    async queryEventsRaw(requestParameters: FirewallManagementApiQueryEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["q"] != null) {
            queryParameters["q"] = requestParameters["q"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/events/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Find all event IDs matching the query with filter
     */
    async queryEvents(
        sort?: string,
        filter?: string,
        q?: string,
        offset?: string,
        after?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.queryEventsRaw({ sort: sort, filter: filter, q: q, offset: offset, after: after, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Get the firewall field specification IDs for the provided platform
     */
    async queryFirewallFieldsRaw(
        requestParameters: FirewallManagementApiQueryFirewallFieldsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["platformId"] != null) {
            queryParameters["platform_id"] = requestParameters["platformId"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/firewall-fields/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Get the firewall field specification IDs for the provided platform
     */
    async queryFirewallFields(platformId?: string, offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.queryFirewallFieldsRaw({ platformId: platformId, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a list of network location IDs based of query parameter.
     * Get a list of network location IDs
     */
    async queryNetworkLocationsRaw(
        requestParameters: FirewallManagementApiQueryNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["q"] != null) {
            queryParameters["q"] = requestParameters["q"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/network-locations/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a list of network location IDs based of query parameter.
     * Get a list of network location IDs
     */
    async queryNetworkLocations(
        sort?: string,
        filter?: string,
        q?: string,
        offset?: string,
        after?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.queryNetworkLocationsRaw({ sort: sort, filter: filter, q: q, offset: offset, after: after, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of platform names
     */
    async queryPlatformsRaw(
        requestParameters: FirewallManagementApiQueryPlatformsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/platforms/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of platform names
     */
    async queryPlatforms(offset?: string, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.queryPlatformsRaw({ offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Find all firewall rule IDs matching the query with filter, and return them in precedence order
     */
    async queryPolicyRulesRaw(
        requestParameters: FirewallManagementApiQueryPolicyRulesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["id"] != null) {
            queryParameters["id"] = requestParameters["id"];
        }

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["q"] != null) {
            queryParameters["q"] = requestParameters["q"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/policy-rules/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Find all firewall rule IDs matching the query with filter, and return them in precedence order
     */
    async queryPolicyRules(
        id?: string,
        sort?: string,
        filter?: string,
        q?: string,
        offset?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.queryPolicyRulesRaw({ id: id, sort: sort, filter: filter, q: q, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Find all rule group IDs matching the query with filter
     */
    async queryRuleGroupsRaw(
        requestParameters: FirewallManagementApiQueryRuleGroupsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["q"] != null) {
            queryParameters["q"] = requestParameters["q"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/rule-groups/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Find all rule group IDs matching the query with filter
     */
    async queryRuleGroups(
        sort?: string,
        filter?: string,
        q?: string,
        offset?: string,
        after?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.queryRuleGroupsRaw({ sort: sort, filter: filter, q: q, offset: offset, after: after, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Find all rule IDs matching the query with filter
     */
    async queryRulesRaw(requestParameters: FirewallManagementApiQueryRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sort"] != null) {
            queryParameters["sort"] = requestParameters["sort"];
        }

        if (requestParameters["filter"] != null) {
            queryParameters["filter"] = requestParameters["filter"];
        }

        if (requestParameters["q"] != null) {
            queryParameters["q"] = requestParameters["q"];
        }

        if (requestParameters["offset"] != null) {
            queryParameters["offset"] = requestParameters["offset"];
        }

        if (requestParameters["after"] != null) {
            queryParameters["after"] = requestParameters["after"];
        }

        if (requestParameters["limit"] != null) {
            queryParameters["limit"] = requestParameters["limit"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/queries/rules/v1`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Find all rule IDs matching the query with filter
     */
    async queryRules(
        sort?: string,
        filter?: string,
        q?: string,
        offset?: string,
        after?: string,
        limit?: number,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrApiQueryResponse> {
        const response = await this.queryRulesRaw({ sort: sort, filter: filter, q: q, offset: offset, after: after, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the network locations provided, and return the ID.
     */
    async updateNetworkLocationsRaw(
        requestParameters: FirewallManagementApiUpdateNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updateNetworkLocations().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiNetworkLocationModifyRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Updates the network locations provided, and return the ID.
     */
    async updateNetworkLocations(body: FwmgrApiNetworkLocationModifyRequestV1, comment?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.updateNetworkLocationsRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the network locations metadata such as polling_intervals for the cid
     */
    async updateNetworkLocationsMetadataRaw(
        requestParameters: FirewallManagementApiUpdateNetworkLocationsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updateNetworkLocationsMetadata().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations-metadata/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiNetworkLocationModifyMetadataRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Updates the network locations metadata such as polling_intervals for the cid
     */
    async updateNetworkLocationsMetadata(
        body: FwmgrApiNetworkLocationModifyMetadataRequestV1,
        comment?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.updateNetworkLocationsMetadataRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the network locations precedence according to the list of ids provided.
     */
    async updateNetworkLocationsPrecedenceRaw(
        requestParameters: FirewallManagementApiUpdateNetworkLocationsPrecedenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updateNetworkLocationsPrecedence().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations-precedence/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiNetworkLocationModifyPrecedenceRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Updates the network locations precedence according to the list of ids provided.
     */
    async updateNetworkLocationsPrecedence(
        body: FwmgrApiNetworkLocationModifyPrecedenceRequestV1,
        comment?: string,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.updateNetworkLocationsPrecedenceRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Update an identified policy container, including local logging functionality.
     */
    async updatePolicyContainerRaw(
        requestParameters: FirewallManagementApiUpdatePolicyContainerRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecResponseFields>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updatePolicyContainer().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/policies/v2`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiPolicyContainerUpsertRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Update an identified policy container, including local logging functionality.
     */
    async updatePolicyContainer(body: FwmgrApiPolicyContainerUpsertRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecResponseFields> {
        const response = await this.updatePolicyContainerRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update an identified policy container. WARNING: This endpoint is deprecated in favor of v2, using this endpoint could disable your local logging setting.
     */
    async updatePolicyContainerV1Raw(
        requestParameters: FirewallManagementApiUpdatePolicyContainerV1Request,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecResponseFields>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updatePolicyContainerV1().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/policies/v1`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiPolicyContainerUpsertRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Update an identified policy container. WARNING: This endpoint is deprecated in favor of v2, using this endpoint could disable your local logging setting.
     */
    async updatePolicyContainerV1(body: FwmgrApiPolicyContainerUpsertRequestV1, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecResponseFields> {
        const response = await this.updatePolicyContainerV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
     */
    async updateRuleGroupRaw(
        requestParameters: FirewallManagementApiUpdateRuleGroupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updateRuleGroup().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiRuleGroupModifyRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiQueryResponseFromJSON(jsonValue));
    }

    /**
     * Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
     */
    async updateRuleGroup(body: FwmgrApiRuleGroupModifyRequestV1, comment?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiQueryResponse> {
        const response = await this.updateRuleGroupRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Validates the request of updating name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
     */
    async updateRuleGroupValidationRaw(
        requestParameters: FirewallManagementApiUpdateRuleGroupValidationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling updateRuleGroupValidation().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rule-groups/validation/v1`,
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiRuleGroupModifyRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Validates the request of updating name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules
     */
    async updateRuleGroupValidation(body: FwmgrApiRuleGroupModifyRequestV1, comment?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.updateRuleGroupValidationRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Updates the network locations provided, and return the ID.
     */
    async upsertNetworkLocationsRaw(
        requestParameters: FirewallManagementApiUpsertNetworkLocationsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrMsaspecQueryResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling upsertNetworkLocations().');
        }

        const queryParameters: any = {};

        if (requestParameters["comment"] != null) {
            queryParameters["comment"] = requestParameters["comment"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/network-locations/v1`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiNetworkLocationModifyRequestV1ToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrMsaspecQueryResponseFromJSON(jsonValue));
    }

    /**
     * Updates the network locations provided, and return the ID.
     */
    async upsertNetworkLocations(body: FwmgrApiNetworkLocationModifyRequestV1, comment?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrMsaspecQueryResponse> {
        const response = await this.upsertNetworkLocationsRaw({ body: body, comment: comment }, initOverrides);
        return await response.value();
    }

    /**
     * Validates that the test pattern matches the executable filepath glob pattern.
     */
    async validateFilepathPatternRaw(
        requestParameters: FirewallManagementApiValidateFilepathPatternRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<FwmgrApiValidateFilepathResponse>> {
        if (requestParameters["body"] == null) {
            throw new runtime.RequiredError("body", 'Required parameter "body" was null or undefined when calling validateFilepathPattern().');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request(
            {
                path: `/fwmgr/entities/rules/validate-filepath/v1`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: FwmgrApiFilepathTestRequestToJSON(requestParameters["body"]),
            },
            initOverrides
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => FwmgrApiValidateFilepathResponseFromJSON(jsonValue));
    }

    /**
     * Validates that the test pattern matches the executable filepath glob pattern.
     */
    async validateFilepathPattern(body: FwmgrApiFilepathTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FwmgrApiValidateFilepathResponse> {
        const response = await this.validateFilepathPatternRaw({ body: body }, initOverrides);
        return await response.value();
    }
}
