/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DetectsapiAggregateAlertQueryRequest,
  DetectsapiAggregatesResponse,
  DetectsapiAlertQueryResponse,
  DetectsapiPatchEntitiesAlertsV2Request,
  DetectsapiPatchEntitiesAlertsV3Request,
  DetectsapiPostEntitiesAlertsV1Request,
  DetectsapiPostEntitiesAlertsV1Response,
  DetectsapiPostEntitiesAlertsV2Request,
  DetectsapiPostEntitiesAlertsV2Response,
  DetectsapiResponseFields,
  MsaReplyMetaOnly,
} from '../models/index';
import {
    DetectsapiAggregateAlertQueryRequestFromJSON,
    DetectsapiAggregateAlertQueryRequestToJSON,
    DetectsapiAggregatesResponseFromJSON,
    DetectsapiAggregatesResponseToJSON,
    DetectsapiAlertQueryResponseFromJSON,
    DetectsapiAlertQueryResponseToJSON,
    DetectsapiPatchEntitiesAlertsV2RequestFromJSON,
    DetectsapiPatchEntitiesAlertsV2RequestToJSON,
    DetectsapiPatchEntitiesAlertsV3RequestFromJSON,
    DetectsapiPatchEntitiesAlertsV3RequestToJSON,
    DetectsapiPostEntitiesAlertsV1RequestFromJSON,
    DetectsapiPostEntitiesAlertsV1RequestToJSON,
    DetectsapiPostEntitiesAlertsV1ResponseFromJSON,
    DetectsapiPostEntitiesAlertsV1ResponseToJSON,
    DetectsapiPostEntitiesAlertsV2RequestFromJSON,
    DetectsapiPostEntitiesAlertsV2RequestToJSON,
    DetectsapiPostEntitiesAlertsV2ResponseFromJSON,
    DetectsapiPostEntitiesAlertsV2ResponseToJSON,
    DetectsapiResponseFieldsFromJSON,
    DetectsapiResponseFieldsToJSON,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from '../models/index';

export interface GetAggregateV2Request {
    body: Array<DetectsapiAggregateAlertQueryRequest>;
    includeHidden?: boolean;
}

export interface GetQueriesAlertsV1Request {
    offset?: number;
    limit?: number;
    sort?: string;
    filter?: string;
    q?: string;
}

export interface GetV2Request {
    body: DetectsapiPostEntitiesAlertsV2Request;
    includeHidden?: boolean;
}

export interface PatchEntitiesAlertsV2Request {
    body: DetectsapiPatchEntitiesAlertsV2Request;
}

export interface PostAggregatesAlertsV1Request {
    body: Array<DetectsapiAggregateAlertQueryRequest>;
}

export interface PostEntitiesAlertsV1Request {
    body: DetectsapiPostEntitiesAlertsV1Request;
}

export interface QueryV2Request {
    includeHidden?: boolean;
    offset?: number;
    limit?: number;
    sort?: string;
    filter?: string;
    q?: string;
}

export interface UpdateV3Request {
    body: DetectsapiPatchEntitiesAlertsV3Request;
    includeHidden?: boolean;
}

/**
 * 
 */
export class AlertsApi extends runtime.BaseAPI {

    /**
     * retrieves aggregate values for Alerts across all CIDs
     */
    async getAggregateV2Raw(requestParameters: GetAggregateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiAggregatesResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getAggregateV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeHidden'] != null) {
            queryParameters['include_hidden'] = requestParameters['includeHidden'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/aggregates/alerts/v2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body']!.map(DetectsapiAggregateAlertQueryRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * retrieves aggregate values for Alerts across all CIDs
     */
    async getAggregateV2(body: Array<DetectsapiAggregateAlertQueryRequest>, includeHidden?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiAggregatesResponse> {
        const response = await this.getAggregateV2Raw({ body: body, includeHidden: includeHidden }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves all Alerts ids that match a given query
     */
    async getQueriesAlertsV1Raw(requestParameters: GetQueriesAlertsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiAlertQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/queries/alerts/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiAlertQueryResponseFromJSON(jsonValue));
    }

    /**
     * retrieves all Alerts ids that match a given query
     */
    async getQueriesAlertsV1(offset?: number, limit?: number, sort?: string, filter?: string, q?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiAlertQueryResponse> {
        const response = await this.getQueriesAlertsV1Raw({ offset: offset, limit: limit, sort: sort, filter: filter, q: q }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves all Alerts given their composite ids
     */
    async getV2Raw(requestParameters: GetV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiPostEntitiesAlertsV2Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling getV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeHidden'] != null) {
            queryParameters['include_hidden'] = requestParameters['includeHidden'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/entities/alerts/v2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetectsapiPostEntitiesAlertsV2RequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiPostEntitiesAlertsV2ResponseFromJSON(jsonValue));
    }

    /**
     * retrieves all Alerts given their composite ids
     */
    async getV2(body: DetectsapiPostEntitiesAlertsV2Request, includeHidden?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiPostEntitiesAlertsV2Response> {
        const response = await this.getV2Raw({ body: body, includeHidden: includeHidden }, initOverrides);
        return await response.value();
    }

    /**
     * Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.  
     */
    async patchEntitiesAlertsV2Raw(requestParameters: PatchEntitiesAlertsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiResponseFields>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchEntitiesAlertsV2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/entities/alerts/v2`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DetectsapiPatchEntitiesAlertsV2RequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.  
     */
    async patchEntitiesAlertsV2(body: DetectsapiPatchEntitiesAlertsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiResponseFields> {
        const response = await this.patchEntitiesAlertsV2Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves aggregate values for Alerts across all CIDs
     */
    async postAggregatesAlertsV1Raw(requestParameters: PostAggregatesAlertsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiAggregatesResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postAggregatesAlertsV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/aggregates/alerts/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body']!.map(DetectsapiAggregateAlertQueryRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * retrieves aggregate values for Alerts across all CIDs
     */
    async postAggregatesAlertsV1(body: Array<DetectsapiAggregateAlertQueryRequest>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiAggregatesResponse> {
        const response = await this.postAggregatesAlertsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves all Alerts given their ids
     */
    async postEntitiesAlertsV1Raw(requestParameters: PostEntitiesAlertsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiPostEntitiesAlertsV1Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postEntitiesAlertsV1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/entities/alerts/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DetectsapiPostEntitiesAlertsV1RequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiPostEntitiesAlertsV1ResponseFromJSON(jsonValue));
    }

    /**
     * retrieves all Alerts given their ids
     */
    async postEntitiesAlertsV1(body: DetectsapiPostEntitiesAlertsV1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiPostEntitiesAlertsV1Response> {
        const response = await this.postEntitiesAlertsV1Raw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves all Alerts ids that match a given query
     */
    async queryV2Raw(requestParameters: QueryV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiAlertQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters['includeHidden'] != null) {
            queryParameters['include_hidden'] = requestParameters['includeHidden'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/queries/alerts/v2`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiAlertQueryResponseFromJSON(jsonValue));
    }

    /**
     * retrieves all Alerts ids that match a given query
     */
    async queryV2(includeHidden?: boolean, offset?: number, limit?: number, sort?: string, filter?: string, q?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiAlertQueryResponse> {
        const response = await this.queryV2Raw({ includeHidden: includeHidden, offset: offset, limit: limit, sort: sort, filter: filter, q: q }, initOverrides);
        return await response.value();
    }

    /**
     * Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.  
     */
    async updateV3Raw(requestParameters: UpdateV3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectsapiResponseFields>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateV3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeHidden'] != null) {
            queryParameters['include_hidden'] = requestParameters['includeHidden'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/alerts/entities/alerts/v3`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DetectsapiPatchEntitiesAlertsV3RequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectsapiResponseFieldsFromJSON(jsonValue));
    }

    /**
     * Perform actions on Alerts identified by composite ID(s) in request. Each action has a name and a description which describes what the action does. If a request adds and removes tag in a single request, the order of processing would be to remove tags before adding new ones in.  
     */
    async updateV3(body: DetectsapiPatchEntitiesAlertsV3Request, includeHidden?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectsapiResponseFields> {
        const response = await this.updateV3Raw({ body: body, includeHidden: includeHidden }, initOverrides);
        return await response.value();
    }

}
