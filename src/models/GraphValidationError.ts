/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface GraphValidationError
 */
export interface GraphValidationError {
    /**
     * The cid the validation error applies to if it is not the CID managing the workflow
     * @type {string}
     * @memberof GraphValidationError
     */
    cid?: string;
    /**
     * identifier for UI to indicate reason for node being invalid.
     * @type {number}
     * @memberof GraphValidationError
     */
    code?: number;
    /**
     * Display name for the property if it exists in a trigger or activity
     * @type {string}
     * @memberof GraphValidationError
     */
    displayName?: string;
    /**
     * Level is used to indicate if this is an error or warning validation. If empty it should be assumed to be Error Level
     * @type {string}
     * @memberof GraphValidationError
     */
    level?: string;
    /**
     * Detail of why the node is invalid.
     * @type {string}
     * @memberof GraphValidationError
     */
    message: string;
    /**
     * ID of the node in the graph that has been invalidated.
     * @type {string}
     * @memberof GraphValidationError
     */
    nodeId?: string;
    /**
     * ID of the parent node in the graph that resulted in a child node being invalidated.
     * @type {string}
     * @memberof GraphValidationError
     */
    parentNodeId?: string;
    /**
     * Used to specify an exact property that is invalid for fql evaluation
     * @type {string}
     * @memberof GraphValidationError
     */
    property?: string;
    /**
     * Resource ID for property if it exists, e.g. trigger ID or activity ID
     * @type {string}
     * @memberof GraphValidationError
     */
    resourceId?: string;
}

/**
 * Check if a given object implements the GraphValidationError interface.
 */
export function instanceOfGraphValidationError(value: object): value is GraphValidationError {
    if (!("message" in value) || value["message"] === undefined) return false;
    return true;
}

export function GraphValidationErrorFromJSON(json: any): GraphValidationError {
    return GraphValidationErrorFromJSONTyped(json, false);
}

export function GraphValidationErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphValidationError {
    if (json == null) {
        return json;
    }
    return {
        cid: json["cid"] == null ? undefined : json["cid"],
        code: json["code"] == null ? undefined : json["code"],
        displayName: json["display_name"] == null ? undefined : json["display_name"],
        level: json["level"] == null ? undefined : json["level"],
        message: json["message"],
        nodeId: json["node_id"] == null ? undefined : json["node_id"],
        parentNodeId: json["parent_node_id"] == null ? undefined : json["parent_node_id"],
        property: json["property"] == null ? undefined : json["property"],
        resourceId: json["resource_id"] == null ? undefined : json["resource_id"],
    };
}

export function GraphValidationErrorToJSON(value?: GraphValidationError | null): any {
    if (value == null) {
        return value;
    }
    return {
        cid: value["cid"],
        code: value["code"],
        display_name: value["displayName"],
        level: value["level"],
        message: value["message"],
        node_id: value["nodeId"],
        parent_node_id: value["parentNodeId"],
        property: value["property"],
        resource_id: value["resourceId"],
    };
}
