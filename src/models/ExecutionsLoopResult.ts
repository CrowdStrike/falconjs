/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { ExecutionsChildExecutionResult } from "./ExecutionsChildExecutionResult";
import { ExecutionsChildExecutionResultFromJSON, ExecutionsChildExecutionResultFromJSONTyped, ExecutionsChildExecutionResultToJSON } from "./ExecutionsChildExecutionResult";
import type { ExecutionsIterations } from "./ExecutionsIterations";
import { ExecutionsIterationsFromJSON, ExecutionsIterationsFromJSONTyped, ExecutionsIterationsToJSON } from "./ExecutionsIterations";

/**
 *
 * @export
 * @interface ExecutionsLoopResult
 */
export interface ExecutionsLoopResult {
    /**
     * Details of all child executions associated with the loop. A child execution is generated for each iteration of the input data.
     * @type {Array<ExecutionsChildExecutionResult>}
     * @memberof ExecutionsLoopResult
     */
    childExecutions: Array<ExecutionsChildExecutionResult>;
    /**
     * Timestamp of when the execution completed. Only present when status is an end state.
     * @type {Date}
     * @memberof ExecutionsLoopResult
     */
    endTimestamp?: Date;
    /**
     * When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.
     * @type {number}
     * @memberof ExecutionsLoopResult
     */
    errorCode?: number;
    /**
     * When a node execution is in an error status this field is present and provides a user friendly error message.
     * @type {string}
     * @memberof ExecutionsLoopResult
     */
    errorMessage?: string;
    /**
     * Display name of the input field that the sub model is iterating over.
     * @type {string}
     * @memberof ExecutionsLoopResult
     */
    inputField: string;
    /**
     *
     * @type {ExecutionsIterations}
     * @memberof ExecutionsLoopResult
     */
    iterations: ExecutionsIterations;
    /**
     * Whether this node's result is mocked
     * @type {boolean}
     * @memberof ExecutionsLoopResult
     */
    mocked?: boolean;
    /**
     * Unique id of the node as specified in the definition.
     * @type {string}
     * @memberof ExecutionsLoopResult
     */
    nodeId: string;
    /**
     * Timestamp of when the execution first started.
     * @type {Date}
     * @memberof ExecutionsLoopResult
     */
    startTimestamp: Date;
    /**
     * Current status of execution for the activity.
     * @type {string}
     * @memberof ExecutionsLoopResult
     */
    status: string;
}

/**
 * Check if a given object implements the ExecutionsLoopResult interface.
 */
export function instanceOfExecutionsLoopResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "childExecutions" in value;
    isInstance = isInstance && "inputField" in value;
    isInstance = isInstance && "iterations" in value;
    isInstance = isInstance && "nodeId" in value;
    isInstance = isInstance && "startTimestamp" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ExecutionsLoopResultFromJSON(json: any): ExecutionsLoopResult {
    return ExecutionsLoopResultFromJSONTyped(json, false);
}

export function ExecutionsLoopResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExecutionsLoopResult {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        childExecutions: (json["child_executions"] as Array<any>).map(ExecutionsChildExecutionResultFromJSON),
        endTimestamp: !exists(json, "end_timestamp") ? undefined : new Date(json["end_timestamp"]),
        errorCode: !exists(json, "error_code") ? undefined : json["error_code"],
        errorMessage: !exists(json, "error_message") ? undefined : json["error_message"],
        inputField: json["input_field"],
        iterations: ExecutionsIterationsFromJSON(json["iterations"]),
        mocked: !exists(json, "mocked") ? undefined : json["mocked"],
        nodeId: json["node_id"],
        startTimestamp: new Date(json["start_timestamp"]),
        status: json["status"],
    };
}

export function ExecutionsLoopResultToJSON(value?: ExecutionsLoopResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        child_executions: (value.childExecutions as Array<any>).map(ExecutionsChildExecutionResultToJSON),
        end_timestamp: value.endTimestamp === undefined ? undefined : value.endTimestamp.toISOString(),
        error_code: value.errorCode,
        error_message: value.errorMessage,
        input_field: value.inputField,
        iterations: ExecutionsIterationsToJSON(value.iterations),
        mocked: value.mocked,
        node_id: value.nodeId,
        start_timestamp: value.startTimestamp.toISOString(),
        status: value.status,
    };
}
