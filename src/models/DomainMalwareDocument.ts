/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainDenormalizedSector } from "./DomainDenormalizedSector";
import { DomainDenormalizedSectorFromJSON, DomainDenormalizedSectorFromJSONTyped, DomainDenormalizedSectorToJSON } from "./DomainDenormalizedSector";
import type { DomainDenormalizedAdversaryReference } from "./DomainDenormalizedAdversaryReference";
import { DomainDenormalizedAdversaryReferenceFromJSON, DomainDenormalizedAdversaryReferenceFromJSONTyped, DomainDenormalizedAdversaryReferenceToJSON } from "./DomainDenormalizedAdversaryReference";
import type { DomainDenormalizedCountry } from "./DomainDenormalizedCountry";
import { DomainDenormalizedCountryFromJSON, DomainDenormalizedCountryFromJSONTyped, DomainDenormalizedCountryToJSON } from "./DomainDenormalizedCountry";
import type { DomainMalwareEnvironmentAggregates } from "./DomainMalwareEnvironmentAggregates";
import { DomainMalwareEnvironmentAggregatesFromJSON, DomainMalwareEnvironmentAggregatesFromJSONTyped, DomainMalwareEnvironmentAggregatesToJSON } from "./DomainMalwareEnvironmentAggregates";
import type { DomainVuln } from "./DomainVuln";
import { DomainVulnFromJSON, DomainVulnFromJSONTyped, DomainVulnToJSON } from "./DomainVuln";
import type { DomainDenormalizedCustomerTarget } from "./DomainDenormalizedCustomerTarget";
import { DomainDenormalizedCustomerTargetFromJSON, DomainDenormalizedCustomerTargetFromJSONTyped, DomainDenormalizedCustomerTargetToJSON } from "./DomainDenormalizedCustomerTarget";
import type { DomainDenormalizedReportReference } from "./DomainDenormalizedReportReference";
import { DomainDenormalizedReportReferenceFromJSON, DomainDenormalizedReportReferenceFromJSONTyped, DomainDenormalizedReportReferenceToJSON } from "./DomainDenormalizedReportReference";
import type { DomainDenormalizedThreatReference } from "./DomainDenormalizedThreatReference";
import { DomainDenormalizedThreatReferenceFromJSON, DomainDenormalizedThreatReferenceFromJSONTyped, DomainDenormalizedThreatReferenceToJSON } from "./DomainDenormalizedThreatReference";
import type { DomainDenormalizedThreatUsedMitre } from "./DomainDenormalizedThreatUsedMitre";
import { DomainDenormalizedThreatUsedMitreFromJSON, DomainDenormalizedThreatUsedMitreFromJSONTyped, DomainDenormalizedThreatUsedMitreToJSON } from "./DomainDenormalizedThreatUsedMitre";

/**
 * JSON definition of a Malware, also known as a Threat
 * @export
 * @interface DomainMalwareDocument
 */
export interface DomainMalwareDocument {
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    actorsCount?: number;
    /**
     * All the Systems affected (i.e AWS, Lambda)
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    allSystems?: Array<string>;
    /**
     * All the actors related to this Malware
     * @type {Array<DomainDenormalizedAdversaryReference>}
     * @memberof DomainMalwareDocument
     */
    associatedActors?: Array<DomainDenormalizedAdversaryReference>;
    /**
     *
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    capabilities?: Array<string>;
    /**
     * Malware's community identifiers
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    communityIdentifiers?: Array<string>;
    /**
     * Malware's creation date when it was added to CKB in unix timestamp format
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    createdTimestamp?: string;
    /**
     * Malware's text description
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    descriptionTextLength?: number;
    /**
     * Actors that developed this Malware
     * @type {Array<DomainDenormalizedAdversaryReference>}
     * @memberof DomainMalwareDocument
     */
    developedBy?: Array<DomainDenormalizedAdversaryReference>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    developedByCount?: number;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    filesContainingThreatCount?: number;
    /**
     * Alphanumeric ID for the Malware
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    id: string;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    indicatorCount?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    killChain?: Array<string>;
    /**
     * Malware's last updated date in unix timestamp format
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    lastUpdated?: string;
    /**
     * MITRE used by this Malware
     * @type {Array<DomainDenormalizedThreatUsedMitre>}
     * @memberof DomainMalwareDocument
     */
    mitre?: Array<DomainDenormalizedThreatUsedMitre>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    mitreAttackCount?: number;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    mitreTacticCount?: number;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    mitreTechniqueCount?: number;
    /**
     * Malware's activity motivation, one of: State-Sponsored, Criminal, Hacktivism
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    motivation?: Array<string>;
    /**
     * Malware's family name
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    name: string;
    /**
     * The previous stage of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    nextStageOf?: Array<DomainDenormalizedThreatReference>;
    /**
     * The next stages of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    nextStages?: Array<DomainDenormalizedThreatReference>;
    /**
     * The parent of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    pluginOf?: Array<DomainDenormalizedThreatReference>;
    /**
     * The plugins of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    plugins?: Array<DomainDenormalizedThreatReference>;
    /**
     * Actors that purchase this Malware
     * @type {Array<DomainDenormalizedAdversaryReference>}
     * @memberof DomainMalwareDocument
     */
    purchasedBy?: Array<DomainDenormalizedAdversaryReference>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    purchasedByCount?: number;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    reportCount?: number;
    /**
     * Reports that contain this Malware
     * @type {Array<DomainDenormalizedReportReference>}
     * @memberof DomainMalwareDocument
     */
    reports?: Array<DomainDenormalizedReportReference>;
    /**
     *
     * @type {DomainMalwareEnvironmentAggregates}
     * @memberof DomainMalwareDocument
     */
    seenInEnvironment?: DomainMalwareEnvironmentAggregates;
    /**
     * Name in url friendly format, lowercased and spaces replaced with dash
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    slug?: string;
    /**
     * Actors that sell this Malware
     * @type {Array<DomainDenormalizedAdversaryReference>}
     * @memberof DomainMalwareDocument
     */
    soldBy?: Array<DomainDenormalizedAdversaryReference>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    soldByCount?: number;
    /**
     *
     * @type {string}
     * @memberof DomainMalwareDocument
     */
    status?: string;
    /**
     * The parent botnet of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    subBotnetOf?: Array<DomainDenormalizedThreatReference>;
    /**
     * The sub-botnets of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    subBotnets?: Array<DomainDenormalizedThreatReference>;
    /**
     * The predecessor of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    successorOf?: Array<DomainDenormalizedThreatReference>;
    /**
     * The successors of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    successors?: Array<DomainDenormalizedThreatReference>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    systemsTargetedCount?: number;
    /**
     * Target countries of malware's activity and attacks, slug value is a 2 characters code for the country value, some examples: United States,United Kingdom,Germany,India,Japan,France,Australia,Canada,China
     * @type {Array<DomainDenormalizedCountry>}
     * @memberof DomainMalwareDocument
     */
    targetCountries?: Array<DomainDenormalizedCountry>;
    /**
     * Target economical industries of malware's activity and attacks. List of available values: Government, Financial Services, Technology, Telecommunications, Healthcare, Energy, Academic, Media, Aerospace, NGO, Manufacturing, Industrials and Engineering, Retail, Hospitality, Consulting and Professional Services, Opportunistic, Aviation, Defense, Transportation, Oil and Gas, Legal, Pharmaceutical, Logistics, Military, Automotive, Food and Beverage, Consumer Goods, Real Estate, Insurance, Agriculture, Chemicals, Utilities, Maritime, Extractive, Travel, Dissident, Cryptocurrency, Entertainment, National Government, Law Enforcement, Think Tanks, Local Government, Sports Organizations, Computer Gaming, Biomedical, Nonprofit, Financial Management & Hedge Funds, Political Parties, Architectural and Engineering, Emergency Services, Social Media, International Government, Nuclear, Research Entities, Vocational and Higher-Level Education, eCommerce
     * @type {Array<DomainDenormalizedSector>}
     * @memberof DomainMalwareDocument
     */
    targetIndustries?: Array<DomainDenormalizedSector>;
    /**
     * Malware's targeting profile
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    targetingProfile?: Array<string>;
    /**
     * The System directly targeted by this Malware (i.e Lambda)
     * @type {Array<DomainDenormalizedCustomerTarget>}
     * @memberof DomainMalwareDocument
     */
    targetsSystems?: Array<DomainDenormalizedCustomerTarget>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    threatFileCount?: number;
    /**
     * Malware's properties one of: Commodity, OpenSource, SourceCodeLeaked, Modular, RepurposedLegitimateSoftware
     * @type {Array<string>}
     * @memberof DomainMalwareDocument
     */
    threatProperties?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    threatRelationsCount?: number;
    /**
     * Actors that use this Malware
     * @type {Array<DomainDenormalizedAdversaryReference>}
     * @memberof DomainMalwareDocument
     */
    usedBy?: Array<DomainDenormalizedAdversaryReference>;
    /**
     *
     * @type {number}
     * @memberof DomainMalwareDocument
     */
    usedByCount?: number;
    /**
     * The parent variant of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    variantOf?: Array<DomainDenormalizedThreatReference>;
    /**
     * The variants of this Malware
     * @type {Array<DomainDenormalizedThreatReference>}
     * @memberof DomainMalwareDocument
     */
    variants?: Array<DomainDenormalizedThreatReference>;
    /**
     * Vulnerabilities this Malware exploits
     * @type {Array<DomainVuln>}
     * @memberof DomainMalwareDocument
     */
    vulnerabilities?: Array<DomainVuln>;
}

/**
 * Check if a given object implements the DomainMalwareDocument interface.
 */
export function instanceOfDomainMalwareDocument(value: object): value is DomainMalwareDocument {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("name" in value) || value["name"] === undefined) return false;
    return true;
}

export function DomainMalwareDocumentFromJSON(json: any): DomainMalwareDocument {
    return DomainMalwareDocumentFromJSONTyped(json, false);
}

export function DomainMalwareDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainMalwareDocument {
    if (json == null) {
        return json;
    }
    return {
        actorsCount: json["actors_count"] == null ? undefined : json["actors_count"],
        allSystems: json["all_systems"] == null ? undefined : json["all_systems"],
        associatedActors: json["associated_actors"] == null ? undefined : (json["associated_actors"] as Array<any>).map(DomainDenormalizedAdversaryReferenceFromJSON),
        capabilities: json["capabilities"] == null ? undefined : json["capabilities"],
        communityIdentifiers: json["community_identifiers"] == null ? undefined : json["community_identifiers"],
        createdTimestamp: json["created_timestamp"] == null ? undefined : json["created_timestamp"],
        description: json["description"] == null ? undefined : json["description"],
        descriptionTextLength: json["description_text_length"] == null ? undefined : json["description_text_length"],
        developedBy: json["developed_by"] == null ? undefined : (json["developed_by"] as Array<any>).map(DomainDenormalizedAdversaryReferenceFromJSON),
        developedByCount: json["developed_by_count"] == null ? undefined : json["developed_by_count"],
        filesContainingThreatCount: json["files_containing_threat_count"] == null ? undefined : json["files_containing_threat_count"],
        id: json["id"],
        indicatorCount: json["indicator_count"] == null ? undefined : json["indicator_count"],
        killChain: json["kill_chain"] == null ? undefined : json["kill_chain"],
        lastUpdated: json["last_updated"] == null ? undefined : json["last_updated"],
        mitre: json["mitre"] == null ? undefined : (json["mitre"] as Array<any>).map(DomainDenormalizedThreatUsedMitreFromJSON),
        mitreAttackCount: json["mitre_attack_count"] == null ? undefined : json["mitre_attack_count"],
        mitreTacticCount: json["mitre_tactic_count"] == null ? undefined : json["mitre_tactic_count"],
        mitreTechniqueCount: json["mitre_technique_count"] == null ? undefined : json["mitre_technique_count"],
        motivation: json["motivation"] == null ? undefined : json["motivation"],
        name: json["name"],
        nextStageOf: json["next_stage_of"] == null ? undefined : (json["next_stage_of"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        nextStages: json["next_stages"] == null ? undefined : (json["next_stages"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        pluginOf: json["plugin_of"] == null ? undefined : (json["plugin_of"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        plugins: json["plugins"] == null ? undefined : (json["plugins"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        purchasedBy: json["purchased_by"] == null ? undefined : (json["purchased_by"] as Array<any>).map(DomainDenormalizedAdversaryReferenceFromJSON),
        purchasedByCount: json["purchased_by_count"] == null ? undefined : json["purchased_by_count"],
        reportCount: json["report_count"] == null ? undefined : json["report_count"],
        reports: json["reports"] == null ? undefined : (json["reports"] as Array<any>).map(DomainDenormalizedReportReferenceFromJSON),
        seenInEnvironment: json["seen_in_environment"] == null ? undefined : DomainMalwareEnvironmentAggregatesFromJSON(json["seen_in_environment"]),
        slug: json["slug"] == null ? undefined : json["slug"],
        soldBy: json["sold_by"] == null ? undefined : (json["sold_by"] as Array<any>).map(DomainDenormalizedAdversaryReferenceFromJSON),
        soldByCount: json["sold_by_count"] == null ? undefined : json["sold_by_count"],
        status: json["status"] == null ? undefined : json["status"],
        subBotnetOf: json["sub_botnet_of"] == null ? undefined : (json["sub_botnet_of"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        subBotnets: json["sub_botnets"] == null ? undefined : (json["sub_botnets"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        successorOf: json["successor_of"] == null ? undefined : (json["successor_of"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        successors: json["successors"] == null ? undefined : (json["successors"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        systemsTargetedCount: json["systems_targeted_count"] == null ? undefined : json["systems_targeted_count"],
        targetCountries: json["target_countries"] == null ? undefined : (json["target_countries"] as Array<any>).map(DomainDenormalizedCountryFromJSON),
        targetIndustries: json["target_industries"] == null ? undefined : (json["target_industries"] as Array<any>).map(DomainDenormalizedSectorFromJSON),
        targetingProfile: json["targeting_profile"] == null ? undefined : json["targeting_profile"],
        targetsSystems: json["targets_systems"] == null ? undefined : (json["targets_systems"] as Array<any>).map(DomainDenormalizedCustomerTargetFromJSON),
        threatFileCount: json["threat_file_count"] == null ? undefined : json["threat_file_count"],
        threatProperties: json["threat_properties"] == null ? undefined : json["threat_properties"],
        threatRelationsCount: json["threat_relations_count"] == null ? undefined : json["threat_relations_count"],
        usedBy: json["used_by"] == null ? undefined : (json["used_by"] as Array<any>).map(DomainDenormalizedAdversaryReferenceFromJSON),
        usedByCount: json["used_by_count"] == null ? undefined : json["used_by_count"],
        variantOf: json["variant_of"] == null ? undefined : (json["variant_of"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        variants: json["variants"] == null ? undefined : (json["variants"] as Array<any>).map(DomainDenormalizedThreatReferenceFromJSON),
        vulnerabilities: json["vulnerabilities"] == null ? undefined : (json["vulnerabilities"] as Array<any>).map(DomainVulnFromJSON),
    };
}

export function DomainMalwareDocumentToJSON(value?: DomainMalwareDocument | null): any {
    if (value == null) {
        return value;
    }
    return {
        actors_count: value["actorsCount"],
        all_systems: value["allSystems"],
        associated_actors: value["associatedActors"] == null ? undefined : (value["associatedActors"] as Array<any>).map(DomainDenormalizedAdversaryReferenceToJSON),
        capabilities: value["capabilities"],
        community_identifiers: value["communityIdentifiers"],
        created_timestamp: value["createdTimestamp"],
        description: value["description"],
        description_text_length: value["descriptionTextLength"],
        developed_by: value["developedBy"] == null ? undefined : (value["developedBy"] as Array<any>).map(DomainDenormalizedAdversaryReferenceToJSON),
        developed_by_count: value["developedByCount"],
        files_containing_threat_count: value["filesContainingThreatCount"],
        id: value["id"],
        indicator_count: value["indicatorCount"],
        kill_chain: value["killChain"],
        last_updated: value["lastUpdated"],
        mitre: value["mitre"] == null ? undefined : (value["mitre"] as Array<any>).map(DomainDenormalizedThreatUsedMitreToJSON),
        mitre_attack_count: value["mitreAttackCount"],
        mitre_tactic_count: value["mitreTacticCount"],
        mitre_technique_count: value["mitreTechniqueCount"],
        motivation: value["motivation"],
        name: value["name"],
        next_stage_of: value["nextStageOf"] == null ? undefined : (value["nextStageOf"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        next_stages: value["nextStages"] == null ? undefined : (value["nextStages"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        plugin_of: value["pluginOf"] == null ? undefined : (value["pluginOf"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        plugins: value["plugins"] == null ? undefined : (value["plugins"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        purchased_by: value["purchasedBy"] == null ? undefined : (value["purchasedBy"] as Array<any>).map(DomainDenormalizedAdversaryReferenceToJSON),
        purchased_by_count: value["purchasedByCount"],
        report_count: value["reportCount"],
        reports: value["reports"] == null ? undefined : (value["reports"] as Array<any>).map(DomainDenormalizedReportReferenceToJSON),
        seen_in_environment: DomainMalwareEnvironmentAggregatesToJSON(value["seenInEnvironment"]),
        slug: value["slug"],
        sold_by: value["soldBy"] == null ? undefined : (value["soldBy"] as Array<any>).map(DomainDenormalizedAdversaryReferenceToJSON),
        sold_by_count: value["soldByCount"],
        status: value["status"],
        sub_botnet_of: value["subBotnetOf"] == null ? undefined : (value["subBotnetOf"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        sub_botnets: value["subBotnets"] == null ? undefined : (value["subBotnets"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        successor_of: value["successorOf"] == null ? undefined : (value["successorOf"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        successors: value["successors"] == null ? undefined : (value["successors"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        systems_targeted_count: value["systemsTargetedCount"],
        target_countries: value["targetCountries"] == null ? undefined : (value["targetCountries"] as Array<any>).map(DomainDenormalizedCountryToJSON),
        target_industries: value["targetIndustries"] == null ? undefined : (value["targetIndustries"] as Array<any>).map(DomainDenormalizedSectorToJSON),
        targeting_profile: value["targetingProfile"],
        targets_systems: value["targetsSystems"] == null ? undefined : (value["targetsSystems"] as Array<any>).map(DomainDenormalizedCustomerTargetToJSON),
        threat_file_count: value["threatFileCount"],
        threat_properties: value["threatProperties"],
        threat_relations_count: value["threatRelationsCount"],
        used_by: value["usedBy"] == null ? undefined : (value["usedBy"] as Array<any>).map(DomainDenormalizedAdversaryReferenceToJSON),
        used_by_count: value["usedByCount"],
        variant_of: value["variantOf"] == null ? undefined : (value["variantOf"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        variants: value["variants"] == null ? undefined : (value["variants"] as Array<any>).map(DomainDenormalizedThreatReferenceToJSON),
        vulnerabilities: value["vulnerabilities"] == null ? undefined : (value["vulnerabilities"] as Array<any>).map(DomainVulnToJSON),
    };
}
