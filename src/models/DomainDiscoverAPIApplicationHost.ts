/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * Represents information about an application's host'.
 * @export
 * @interface DomainDiscoverAPIApplicationHost
 */
export interface DomainDiscoverAPIApplicationHost {
    /**
     * The version of the Falcon sensor that's installed on the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    agentVersion?: string;
    /**
     * The agent ID of the Falcon sensor installed on the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    aid?: string;
    /**
     * The name of the country where the asset is located.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    country?: string;
    /**
     * The last seen MAC address of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    currentMacAddress?: string;
    /**
     * The last seen network prefix of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    currentNetworkPrefix?: string;
    /**
     * The external IPv4 address of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    externalIp?: string;
    /**
     * The host management groups the asset is part of.
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    groups?: Array<string>;
    /**
     * The asset's hostname.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    hostname?: string;
    /**
     * The unique ID of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    id: string;
    /**
     * Whether the asset is exposed to the internet (Yes or Unknown).
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    internetExposure?: string;
    /**
     * For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    kernelVersion?: string;
    /**
     * The domain name the asset is currently joined to.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    machineDomain?: string;
    /**
     * The OS version of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    osVersion?: string;
    /**
     * The organizational unit of the asset.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    ou?: string;
    /**
     * The platform name of the asset (Windows, Mac, Linux).
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    platformName?: string;
    /**
     * The product type of the asset (Workstation, Domain Controller, Server).
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    productTypeDesc?: string;
    /**
     * The site name of the domain the asset is joined to (applies only to Windows hosts).
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    siteName?: string;
    /**
     * The asset's system manufacturer.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    systemManufacturer?: string;
    /**
     * The sensor and cloud tags of the asset.
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplicationHost
     */
    tags?: Array<string>;
}

/**
 * Check if a given object implements the DomainDiscoverAPIApplicationHost interface.
 */
export function instanceOfDomainDiscoverAPIApplicationHost(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DomainDiscoverAPIApplicationHostFromJSON(json: any): DomainDiscoverAPIApplicationHost {
    return DomainDiscoverAPIApplicationHostFromJSONTyped(json, false);
}

export function DomainDiscoverAPIApplicationHostFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDiscoverAPIApplicationHost {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        agentVersion: !exists(json, "agent_version") ? undefined : json["agent_version"],
        aid: !exists(json, "aid") ? undefined : json["aid"],
        country: !exists(json, "country") ? undefined : json["country"],
        currentMacAddress: !exists(json, "current_mac_address") ? undefined : json["current_mac_address"],
        currentNetworkPrefix: !exists(json, "current_network_prefix") ? undefined : json["current_network_prefix"],
        externalIp: !exists(json, "external_ip") ? undefined : json["external_ip"],
        groups: !exists(json, "groups") ? undefined : json["groups"],
        hostname: !exists(json, "hostname") ? undefined : json["hostname"],
        id: json["id"],
        internetExposure: !exists(json, "internet_exposure") ? undefined : json["internet_exposure"],
        kernelVersion: !exists(json, "kernel_version") ? undefined : json["kernel_version"],
        machineDomain: !exists(json, "machine_domain") ? undefined : json["machine_domain"],
        osVersion: !exists(json, "os_version") ? undefined : json["os_version"],
        ou: !exists(json, "ou") ? undefined : json["ou"],
        platformName: !exists(json, "platform_name") ? undefined : json["platform_name"],
        productTypeDesc: !exists(json, "product_type_desc") ? undefined : json["product_type_desc"],
        siteName: !exists(json, "site_name") ? undefined : json["site_name"],
        systemManufacturer: !exists(json, "system_manufacturer") ? undefined : json["system_manufacturer"],
        tags: !exists(json, "tags") ? undefined : json["tags"],
    };
}

export function DomainDiscoverAPIApplicationHostToJSON(value?: DomainDiscoverAPIApplicationHost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        agent_version: value.agentVersion,
        aid: value.aid,
        country: value.country,
        current_mac_address: value.currentMacAddress,
        current_network_prefix: value.currentNetworkPrefix,
        external_ip: value.externalIp,
        groups: value.groups,
        hostname: value.hostname,
        id: value.id,
        internet_exposure: value.internetExposure,
        kernel_version: value.kernelVersion,
        machine_domain: value.machineDomain,
        os_version: value.osVersion,
        ou: value.ou,
        platform_name: value.platformName,
        product_type_desc: value.productTypeDesc,
        site_name: value.siteName,
        system_manufacturer: value.systemManufacturer,
        tags: value.tags,
    };
}
