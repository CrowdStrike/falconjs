/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { ExecutionsReferenceLink } from "./ExecutionsReferenceLink";
import { ExecutionsReferenceLinkFromJSON, ExecutionsReferenceLinkFromJSONTyped, ExecutionsReferenceLinkToJSON } from "./ExecutionsReferenceLink";

/**
 *
 * @export
 * @interface ExecutionsActivityExecutionResult
 */
export interface ExecutionsActivityExecutionResult {
    /**
     * Timestamp of when the execution completed. Only present when status is an end state.
     * @type {Date}
     * @memberof ExecutionsActivityExecutionResult
     */
    endTimestamp?: Date;
    /**
     * When a node execution is in an error status this field is present and provides an error code that can be used to determine details why the failure occurred.
     * @type {number}
     * @memberof ExecutionsActivityExecutionResult
     */
    errorCode?: number;
    /**
     * When a node execution is in an error status this field is present and provides a user friendly error message.
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    errorMessage?: string;
    /**
     * The unique identifier of the selected activity that is being configured.
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    id: string;
    /**
     * Whether this node's result is mocked
     * @type {boolean}
     * @memberof ExecutionsActivityExecutionResult
     */
    mocked?: boolean;
    /**
     * Optional user provided name for the activity, if not specified a default of the name for that activity will be used.
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    name: string;
    /**
     * Unique id of the node as specified in the definition.
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    nodeId: string;
    /**
     * A set of objects which provide references to other URLs related to the activity execution.
     * @type {Array<ExecutionsReferenceLink>}
     * @memberof ExecutionsActivityExecutionResult
     */
    references?: Array<ExecutionsReferenceLink>;
    /**
     * Result fields of activity execution.
     * @type {object}
     * @memberof ExecutionsActivityExecutionResult
     */
    result?: object;
    /**
     * Timestamp of when the execution first started.
     * @type {Date}
     * @memberof ExecutionsActivityExecutionResult
     */
    startTimestamp: Date;
    /**
     * Current status of execution for the activity.
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    status: string;
    /**
     * Root element of the execution route of the activity
     * @type {string}
     * @memberof ExecutionsActivityExecutionResult
     */
    type: string;
}

/**
 * Check if a given object implements the ExecutionsActivityExecutionResult interface.
 */
export function instanceOfExecutionsActivityExecutionResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "nodeId" in value;
    isInstance = isInstance && "startTimestamp" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ExecutionsActivityExecutionResultFromJSON(json: any): ExecutionsActivityExecutionResult {
    return ExecutionsActivityExecutionResultFromJSONTyped(json, false);
}

export function ExecutionsActivityExecutionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExecutionsActivityExecutionResult {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        endTimestamp: !exists(json, "end_timestamp") ? undefined : new Date(json["end_timestamp"]),
        errorCode: !exists(json, "error_code") ? undefined : json["error_code"],
        errorMessage: !exists(json, "error_message") ? undefined : json["error_message"],
        id: json["id"],
        mocked: !exists(json, "mocked") ? undefined : json["mocked"],
        name: json["name"],
        nodeId: json["node_id"],
        references: !exists(json, "references") ? undefined : (json["references"] as Array<any>).map(ExecutionsReferenceLinkFromJSON),
        result: !exists(json, "result") ? undefined : json["result"],
        startTimestamp: new Date(json["start_timestamp"]),
        status: json["status"],
        type: json["type"],
    };
}

export function ExecutionsActivityExecutionResultToJSON(value?: ExecutionsActivityExecutionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        end_timestamp: value.endTimestamp === undefined ? undefined : value.endTimestamp.toISOString(),
        error_code: value.errorCode,
        error_message: value.errorMessage,
        id: value.id,
        mocked: value.mocked,
        name: value.name,
        node_id: value.nodeId,
        references: value.references === undefined ? undefined : (value.references as Array<any>).map(ExecutionsReferenceLinkToJSON),
        result: value.result,
        start_timestamp: value.startTimestamp.toISOString(),
        status: value.status,
        type: value.type,
    };
}
