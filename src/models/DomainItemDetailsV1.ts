/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainAttachment } from "./DomainAttachment";
import { DomainAttachmentFromJSON, DomainAttachmentFromJSONTyped, DomainAttachmentToJSON } from "./DomainAttachment";
import type { DomainFragmentInfo } from "./DomainFragmentInfo";
import { DomainFragmentInfoFromJSON, DomainFragmentInfoFromJSONTyped, DomainFragmentInfoToJSON } from "./DomainFragmentInfo";
import type { DomainIOC } from "./DomainIOC";
import { DomainIOCFromJSON, DomainIOCFromJSONTyped, DomainIOCToJSON } from "./DomainIOC";
import type { DomainMarketplaceProduct } from "./DomainMarketplaceProduct";
import { DomainMarketplaceProductFromJSON, DomainMarketplaceProductFromJSONTyped, DomainMarketplaceProductToJSON } from "./DomainMarketplaceProduct";
import type { DomainTelegramInfo } from "./DomainTelegramInfo";
import { DomainTelegramInfoFromJSON, DomainTelegramInfoFromJSONTyped, DomainTelegramInfoToJSON } from "./DomainTelegramInfo";

/**
 *
 * @export
 * @interface DomainItemDetailsV1
 */
export interface DomainItemDetailsV1 {
    /**
     * Threat actor associated with the raw intelligence item, if available
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    actorSlug?: string;
    /**
     * Pointers to attachments items linked to this item
     * @type {Array<DomainAttachment>}
     * @memberof DomainItemDetailsV1
     */
    attachments?: Array<DomainAttachment>;
    /**
     * The raw intelligence item author username
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    author?: string;
    /**
     * The raw intelligence item author identifier in our system
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    authorId?: string;
    /**
     * Category of the source where the item was found
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    category: string;
    /**
     * The date when the raw intelligence item was scraped from the original source
     * @type {Date}
     * @memberof DomainItemDetailsV1
     */
    collectionDate?: Date;
    /**
     * Highlighted content based on the rule that generated the notifications. Highlights are surrounded with a `<cs-highlight>` tag
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    content: string;
    /**
     * The date when the raw intelligence item was created
     * @type {Date}
     * @memberof DomainItemDetailsV1
     */
    createdDate: Date;
    /**
     * Mime type of the file for file type items
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    fileType?: string;
    /**
     *
     * @type {DomainFragmentInfo}
     * @memberof DomainItemDetailsV1
     */
    fragmentInfo?: DomainFragmentInfo;
    /**
     * IOC types available in the raw intelligence item. List of keys populated in the iocs field
     * @type {Array<string>}
     * @memberof DomainItemDetailsV1
     */
    iocTypes?: Array<string>;
    /**
     *
     * @type {DomainIOC}
     * @memberof DomainItemDetailsV1
     */
    iocs?: DomainIOC;
    /**
     * The raw intelligence item labels. These contain hints around what is actually included in the item (malware, IPs, emails, etc).
     * @type {Array<string>}
     * @memberof DomainItemDetailsV1
     */
    labels?: Array<string>;
    /**
     * The raw intelligence item language
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    language?: string;
    /**
     *
     * @type {DomainMarketplaceProduct}
     * @memberof DomainItemDetailsV1
     */
    marketplaceProduct?: DomainMarketplaceProduct;
    /**
     * Mime type of the file for file type items
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    mimeType?: string;
    /**
     * SHA256 of the file contents for file type items
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    sha256?: string;
    /**
     * The site where the raw intelligence item was found
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    site?: string;
    /**
     * The ID of the site where the raw intelligence item was found
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    siteId: string;
    /**
     * Size of the item's content in bytes, if available
     * @type {number}
     * @memberof DomainItemDetailsV1
     */
    size?: number;
    /**
     *
     * @type {DomainTelegramInfo}
     * @memberof DomainItemDetailsV1
     */
    telegramInfo?: DomainTelegramInfo;
    /**
     * Identifier that groups all raw intelligence items belonging to the same 'conversation stream', i.e. chatroom, forum thread, etc.
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    threadId?: string;
    /**
     * The raw intelligence item title
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    title?: string;
    /**
     * The type of the raw intelligence item
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    type: string;
    /**
     * The date when the raw intelligence item was updated
     * @type {Date}
     * @memberof DomainItemDetailsV1
     */
    updatedDate: Date;
    /**
     * The raw intelligence item URL
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    url?: string;
    /**
     * The raw intelligence item author identifier in the original site
     * @type {string}
     * @memberof DomainItemDetailsV1
     */
    userId?: string;
}

/**
 * Check if a given object implements the DomainItemDetailsV1 interface.
 */
export function instanceOfDomainItemDetailsV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "siteId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updatedDate" in value;

    return isInstance;
}

export function DomainItemDetailsV1FromJSON(json: any): DomainItemDetailsV1 {
    return DomainItemDetailsV1FromJSONTyped(json, false);
}

export function DomainItemDetailsV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainItemDetailsV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        actorSlug: !exists(json, "actor_slug") ? undefined : json["actor_slug"],
        attachments: !exists(json, "attachments") ? undefined : (json["attachments"] as Array<any>).map(DomainAttachmentFromJSON),
        author: !exists(json, "author") ? undefined : json["author"],
        authorId: !exists(json, "author_id") ? undefined : json["author_id"],
        category: json["category"],
        collectionDate: !exists(json, "collection_date") ? undefined : new Date(json["collection_date"]),
        content: json["content"],
        createdDate: new Date(json["created_date"]),
        fileType: !exists(json, "file_type") ? undefined : json["file_type"],
        fragmentInfo: !exists(json, "fragment_info") ? undefined : DomainFragmentInfoFromJSON(json["fragment_info"]),
        iocTypes: !exists(json, "ioc_types") ? undefined : json["ioc_types"],
        iocs: !exists(json, "iocs") ? undefined : DomainIOCFromJSON(json["iocs"]),
        labels: !exists(json, "labels") ? undefined : json["labels"],
        language: !exists(json, "language") ? undefined : json["language"],
        marketplaceProduct: !exists(json, "marketplace_product") ? undefined : DomainMarketplaceProductFromJSON(json["marketplace_product"]),
        mimeType: !exists(json, "mime_type") ? undefined : json["mime_type"],
        sha256: !exists(json, "sha256") ? undefined : json["sha256"],
        site: !exists(json, "site") ? undefined : json["site"],
        siteId: json["site_id"],
        size: !exists(json, "size") ? undefined : json["size"],
        telegramInfo: !exists(json, "telegram_info") ? undefined : DomainTelegramInfoFromJSON(json["telegram_info"]),
        threadId: !exists(json, "thread_id") ? undefined : json["thread_id"],
        title: !exists(json, "title") ? undefined : json["title"],
        type: json["type"],
        updatedDate: new Date(json["updated_date"]),
        url: !exists(json, "url") ? undefined : json["url"],
        userId: !exists(json, "user_id") ? undefined : json["user_id"],
    };
}

export function DomainItemDetailsV1ToJSON(value?: DomainItemDetailsV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        actor_slug: value.actorSlug,
        attachments: value.attachments === undefined ? undefined : (value.attachments as Array<any>).map(DomainAttachmentToJSON),
        author: value.author,
        author_id: value.authorId,
        category: value.category,
        collection_date: value.collectionDate === undefined ? undefined : value.collectionDate.toISOString(),
        content: value.content,
        created_date: value.createdDate.toISOString(),
        file_type: value.fileType,
        fragment_info: DomainFragmentInfoToJSON(value.fragmentInfo),
        ioc_types: value.iocTypes,
        iocs: DomainIOCToJSON(value.iocs),
        labels: value.labels,
        language: value.language,
        marketplace_product: DomainMarketplaceProductToJSON(value.marketplaceProduct),
        mime_type: value.mimeType,
        sha256: value.sha256,
        site: value.site,
        site_id: value.siteId,
        size: value.size,
        telegram_info: DomainTelegramInfoToJSON(value.telegramInfo),
        thread_id: value.threadId,
        title: value.title,
        type: value.type,
        updated_date: value.updatedDate.toISOString(),
        url: value.url,
        user_id: value.userId,
    };
}
