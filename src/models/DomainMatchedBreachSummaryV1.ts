/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainFileDetailsV1 } from "./DomainFileDetailsV1";
import { DomainFileDetailsV1FromJSON, DomainFileDetailsV1FromJSONTyped, DomainFileDetailsV1ToJSON } from "./DomainFileDetailsV1";

/**
 *
 * @export
 * @interface DomainMatchedBreachSummaryV1
 */
export interface DomainMatchedBreachSummaryV1 {
    /**
     * Community/colloquial exposed data event name.
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    communityName?: string;
    /**
     * The level of confidence regarding data veridicality. Options for likely authentic, confirmed authentic (default: unverified).
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    confidenceLevel?: string;
    /**
     * The description of the breach
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    description: string;
    /**
     * The date the exposed data event occurred.
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    eventDate?: string;
    /**
     * CrowdStrike-generated unique exposed data event identifier.
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    eventId?: string;
    /**
     * The date when the data was leaked online
     * @type {Date}
     * @memberof DomainMatchedBreachSummaryV1
     */
    exposureDate?: Date;
    /**
     * The set of fields which were breached: 'email', 'password', 'login_id', 'phone', etc.
     * @type {Array<string>}
     * @memberof DomainMatchedBreachSummaryV1
     */
    fields: Array<string>;
    /**
     * Metadata regarding the file(s) where exposed data records where found.
     * @type {Array<DomainFileDetailsV1>}
     * @memberof DomainMatchedBreachSummaryV1
     */
    files?: Array<DomainFileDetailsV1>;
    /**
     * Where the exposed data event happened. (e.g. LinkedIn or linkedin[.]com)
     * @type {Array<string>}
     * @memberof DomainMatchedBreachSummaryV1
     */
    impactedDomains?: Array<string>;
    /**
     * Where the exposed data event happened
     * @type {Array<string>}
     * @memberof DomainMatchedBreachSummaryV1
     */
    impactedIps?: Array<string>;
    /**
     * The name of the breach
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    name: string;
    /**
     * Exposed Data Event Threat Actor/Group: Moniker(s) or real name(s) of the individual/group who unveiled confidential data.
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    obtainedBy?: string;
    /**
     * Where the leak was found.
     * @type {string}
     * @memberof DomainMatchedBreachSummaryV1
     */
    url?: string;
}

/**
 * Check if a given object implements the DomainMatchedBreachSummaryV1 interface.
 */
export function instanceOfDomainMatchedBreachSummaryV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "fields" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function DomainMatchedBreachSummaryV1FromJSON(json: any): DomainMatchedBreachSummaryV1 {
    return DomainMatchedBreachSummaryV1FromJSONTyped(json, false);
}

export function DomainMatchedBreachSummaryV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainMatchedBreachSummaryV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        communityName: !exists(json, "community_name") ? undefined : json["community_name"],
        confidenceLevel: !exists(json, "confidence_level") ? undefined : json["confidence_level"],
        description: json["description"],
        eventDate: !exists(json, "event_date") ? undefined : json["event_date"],
        eventId: !exists(json, "event_id") ? undefined : json["event_id"],
        exposureDate: !exists(json, "exposure_date") ? undefined : new Date(json["exposure_date"]),
        fields: json["fields"],
        files: !exists(json, "files") ? undefined : (json["files"] as Array<any>).map(DomainFileDetailsV1FromJSON),
        impactedDomains: !exists(json, "impacted_domains") ? undefined : json["impacted_domains"],
        impactedIps: !exists(json, "impacted_ips") ? undefined : json["impacted_ips"],
        name: json["name"],
        obtainedBy: !exists(json, "obtained_by") ? undefined : json["obtained_by"],
        url: !exists(json, "url") ? undefined : json["url"],
    };
}

export function DomainMatchedBreachSummaryV1ToJSON(value?: DomainMatchedBreachSummaryV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        community_name: value.communityName,
        confidence_level: value.confidenceLevel,
        description: value.description,
        event_date: value.eventDate,
        event_id: value.eventId,
        exposure_date: value.exposureDate === undefined ? undefined : value.exposureDate.toISOString(),
        fields: value.fields,
        files: value.files === undefined ? undefined : (value.files as Array<any>).map(DomainFileDetailsV1ToJSON),
        impacted_domains: value.impactedDomains,
        impacted_ips: value.impactedIps,
        name: value.name,
        obtained_by: value.obtainedBy,
        url: value.url,
    };
}
