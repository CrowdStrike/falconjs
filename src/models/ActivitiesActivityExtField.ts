/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FielddataFieldSource } from './FielddataFieldSource';
import {
    FielddataFieldSourceFromJSON,
    FielddataFieldSourceFromJSONTyped,
    FielddataFieldSourceToJSON,
} from './FielddataFieldSource';

/**
 * 
 * @export
 * @interface ActivitiesActivityExtField
 */
export interface ActivitiesActivityExtField {
    /**
     * Description for the field.
     * @type {string}
     * @memberof ActivitiesActivityExtField
     */
    description?: string;
    /**
     * User friendly display name for the field
     * @type {string}
     * @memberof ActivitiesActivityExtField
     */
    display: string;
    /**
     * 
     * @type {object}
     * @memberof ActivitiesActivityExtField
     */
    example?: object;
    /**
     * Nested fields of this object, only set when field type is complex
     * @type {Array<ActivitiesActivityExtField>}
     * @memberof ActivitiesActivityExtField
     */
    fields?: Array<ActivitiesActivityExtField>;
    /**
     * Name of the field as it should be passed back to the API through conditions or data mapping.
     * @type {string}
     * @memberof ActivitiesActivityExtField
     */
    name: string;
    /**
     * 
     * @type {FielddataFieldSource}
     * @memberof ActivitiesActivityExtField
     */
    source?: FielddataFieldSource;
    /**
     * Underlying type for the field, can be a primitive json schema type or signal field type.
     * @type {string}
     * @memberof ActivitiesActivityExtField
     */
    type?: string;
    /**
     * This property is set if the notPramaterizable is set to true.
     * @type {boolean}
     * @memberof ActivitiesActivityExtField
     */
    xCsNotParameterizable?: boolean;
}

/**
 * Check if a given object implements the ActivitiesActivityExtField interface.
 */
export function instanceOfActivitiesActivityExtField(value: object): value is ActivitiesActivityExtField {
    if (!('display' in value) || value['display'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ActivitiesActivityExtFieldFromJSON(json: any): ActivitiesActivityExtField {
    return ActivitiesActivityExtFieldFromJSONTyped(json, false);
}

export function ActivitiesActivityExtFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivitiesActivityExtField {
    if (json == null) {
        return json;
    }
    return {
        
        'description': json['description'] == null ? undefined : json['description'],
        'display': json['display'],
        'example': json['example'] == null ? undefined : json['example'],
        'fields': json['fields'] == null ? undefined : ((json['fields'] as Array<any>).map(ActivitiesActivityExtFieldFromJSON)),
        'name': json['name'],
        'source': json['source'] == null ? undefined : FielddataFieldSourceFromJSON(json['source']),
        'type': json['type'] == null ? undefined : json['type'],
        'xCsNotParameterizable': json['x-cs-not-parameterizable'] == null ? undefined : json['x-cs-not-parameterizable'],
    };
}

export function ActivitiesActivityExtFieldToJSON(value?: ActivitiesActivityExtField | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'description': value['description'],
        'display': value['display'],
        'example': value['example'],
        'fields': value['fields'] == null ? undefined : ((value['fields'] as Array<any>).map(ActivitiesActivityExtFieldToJSON)),
        'name': value['name'],
        'source': FielddataFieldSourceToJSON(value['source']),
        'type': value['type'],
        'x-cs-not-parameterizable': value['xCsNotParameterizable'],
    };
}

