/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainBotnetInject } from "./DomainBotnetInject";
import { DomainBotnetInjectFromJSON, DomainBotnetInjectFromJSONTyped, DomainBotnetInjectToJSON } from "./DomainBotnetInject";
import type { DomainKeyValuePair } from "./DomainKeyValuePair";
import { DomainKeyValuePairFromJSON, DomainKeyValuePairFromJSONTyped, DomainKeyValuePairToJSON } from "./DomainKeyValuePair";

/**
 *
 * @export
 * @interface DomainBotnetConfigSource
 */
export interface DomainBotnetConfigSource {
    /**
     * Populated for action botnets. List of action key value pairs, defined as the action and its type
     * @type {Array<DomainKeyValuePair>}
     * @memberof DomainBotnetConfigSource
     */
    actions: Array<DomainKeyValuePair>;
    /**
     * Populated for spam botnets. The body of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config
     * @type {string}
     * @memberof DomainBotnetConfigSource
     */
    body: string;
    /**
     * The botnet's name
     * @type {string}
     * @memberof DomainBotnetConfigSource
     */
    botnet: string;
    /**
     * The type of botnet: `action`, `inject`, or `spam`
     * @type {string}
     * @memberof DomainBotnetConfigSource
     */
    configType: string;
    /**
     * Populated for inject botnets. List of inject targets and their data
     * @type {Array<DomainBotnetInject>}
     * @memberof DomainBotnetConfigSource
     */
    injects: Array<DomainBotnetInject>;
    /**
     * Optional sub-botnet differentiator
     * @type {string}
     * @memberof DomainBotnetConfigSource
     */
    subBotnet: string;
    /**
     * Populated for spam botnets. The subject of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config
     * @type {string}
     * @memberof DomainBotnetConfigSource
     */
    subject: string;
    /**
     * Populated for spam botnets. List of key value pairs for any replaceable variables in the spam template
     * @type {Array<DomainKeyValuePair>}
     * @memberof DomainBotnetConfigSource
     */
    variables: Array<DomainKeyValuePair>;
}

/**
 * Check if a given object implements the DomainBotnetConfigSource interface.
 */
export function instanceOfDomainBotnetConfigSource(value: object): value is DomainBotnetConfigSource {
    if (!("actions" in value) || value["actions"] === undefined) return false;
    if (!("body" in value) || value["body"] === undefined) return false;
    if (!("botnet" in value) || value["botnet"] === undefined) return false;
    if (!("configType" in value) || value["configType"] === undefined) return false;
    if (!("injects" in value) || value["injects"] === undefined) return false;
    if (!("subBotnet" in value) || value["subBotnet"] === undefined) return false;
    if (!("subject" in value) || value["subject"] === undefined) return false;
    if (!("variables" in value) || value["variables"] === undefined) return false;
    return true;
}

export function DomainBotnetConfigSourceFromJSON(json: any): DomainBotnetConfigSource {
    return DomainBotnetConfigSourceFromJSONTyped(json, false);
}

export function DomainBotnetConfigSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainBotnetConfigSource {
    if (json == null) {
        return json;
    }
    return {
        actions: (json["actions"] as Array<any>).map(DomainKeyValuePairFromJSON),
        body: json["body"],
        botnet: json["botnet"],
        configType: json["config_type"],
        injects: (json["injects"] as Array<any>).map(DomainBotnetInjectFromJSON),
        subBotnet: json["sub_botnet"],
        subject: json["subject"],
        variables: (json["variables"] as Array<any>).map(DomainKeyValuePairFromJSON),
    };
}

export function DomainBotnetConfigSourceToJSON(value?: DomainBotnetConfigSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        actions: (value["actions"] as Array<any>).map(DomainKeyValuePairToJSON),
        body: value["body"],
        botnet: value["botnet"],
        config_type: value["configType"],
        injects: (value["injects"] as Array<any>).map(DomainBotnetInjectToJSON),
        sub_botnet: value["subBotnet"],
        subject: value["subject"],
        variables: (value["variables"] as Array<any>).map(DomainKeyValuePairToJSON),
    };
}
