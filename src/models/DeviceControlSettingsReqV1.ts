/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DeviceControlUSBClassExceptionsReqV1 } from "./DeviceControlUSBClassExceptionsReqV1";
import { DeviceControlUSBClassExceptionsReqV1FromJSON, DeviceControlUSBClassExceptionsReqV1FromJSONTyped, DeviceControlUSBClassExceptionsReqV1ToJSON } from "./DeviceControlUSBClassExceptionsReqV1";
import type { DeviceControlUSBCustomNotifications } from "./DeviceControlUSBCustomNotifications";
import { DeviceControlUSBCustomNotificationsFromJSON, DeviceControlUSBCustomNotificationsFromJSONTyped, DeviceControlUSBCustomNotificationsToJSON } from "./DeviceControlUSBCustomNotifications";

/**
 *
 * @export
 * @interface DeviceControlSettingsReqV1
 */
export interface DeviceControlSettingsReqV1 {
    /**
     * Settings that apply to a USB Class
     * @type {Array<DeviceControlUSBClassExceptionsReqV1>}
     * @memberof DeviceControlSettingsReqV1
     */
    classes: Array<DeviceControlUSBClassExceptionsReqV1>;
    /**
     *
     * @type {DeviceControlUSBCustomNotifications}
     * @memberof DeviceControlSettingsReqV1
     */
    customNotifications?: DeviceControlUSBCustomNotifications;
    /**
     * An array of exception IDs to delete from the policy
     * @type {Array<string>}
     * @memberof DeviceControlSettingsReqV1
     */
    deleteExceptions: Array<string>;
    /**
     * Does the end user receives a notification when the policy is violated
     * @type {string}
     * @memberof DeviceControlSettingsReqV1
     */
    endUserNotification: DeviceControlSettingsReqV1EndUserNotificationEnum;
    /**
     * How is this policy enforced
     * @type {string}
     * @memberof DeviceControlSettingsReqV1
     */
    enforcementMode: DeviceControlSettingsReqV1EnforcementModeEnum;
    /**
     * A bool value that enables file metadata functionality on the sensor or not
     * @type {boolean}
     * @memberof DeviceControlSettingsReqV1
     */
    enhancedFileMetadata?: boolean;
}

/**
 * @export
 */
export const DeviceControlSettingsReqV1EndUserNotificationEnum = {
    Silent: "SILENT",
    NotifyUser: "NOTIFY_USER",
} as const;
export type DeviceControlSettingsReqV1EndUserNotificationEnum = (typeof DeviceControlSettingsReqV1EndUserNotificationEnum)[keyof typeof DeviceControlSettingsReqV1EndUserNotificationEnum];

/**
 * @export
 */
export const DeviceControlSettingsReqV1EnforcementModeEnum = {
    Only: "MONITOR_ONLY",
    Enforce: "MONITOR_ENFORCE",
} as const;
export type DeviceControlSettingsReqV1EnforcementModeEnum = (typeof DeviceControlSettingsReqV1EnforcementModeEnum)[keyof typeof DeviceControlSettingsReqV1EnforcementModeEnum];

/**
 * Check if a given object implements the DeviceControlSettingsReqV1 interface.
 */
export function instanceOfDeviceControlSettingsReqV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "classes" in value;
    isInstance = isInstance && "deleteExceptions" in value;
    isInstance = isInstance && "endUserNotification" in value;
    isInstance = isInstance && "enforcementMode" in value;

    return isInstance;
}

export function DeviceControlSettingsReqV1FromJSON(json: any): DeviceControlSettingsReqV1 {
    return DeviceControlSettingsReqV1FromJSONTyped(json, false);
}

export function DeviceControlSettingsReqV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceControlSettingsReqV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        classes: (json["classes"] as Array<any>).map(DeviceControlUSBClassExceptionsReqV1FromJSON),
        customNotifications: !exists(json, "custom_notifications") ? undefined : DeviceControlUSBCustomNotificationsFromJSON(json["custom_notifications"]),
        deleteExceptions: json["delete_exceptions"],
        endUserNotification: json["end_user_notification"],
        enforcementMode: json["enforcement_mode"],
        enhancedFileMetadata: !exists(json, "enhanced_file_metadata") ? undefined : json["enhanced_file_metadata"],
    };
}

export function DeviceControlSettingsReqV1ToJSON(value?: DeviceControlSettingsReqV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        classes: (value.classes as Array<any>).map(DeviceControlUSBClassExceptionsReqV1ToJSON),
        custom_notifications: DeviceControlUSBCustomNotificationsToJSON(value.customNotifications),
        delete_exceptions: value.deleteExceptions,
        end_user_notification: value.endUserNotification,
        enforcement_mode: value.enforcementMode,
        enhanced_file_metadata: value.enhancedFileMetadata,
    };
}
