/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface UploadSampleV2Request
 */
export interface UploadSampleV2Request {
    /**
     * Content of the uploaded sample in binary format. For example, use `--data-binary @$FILE_PATH` when using cURL. Max file size: 256 MB.
     *
     * Accepted file formats:
     *
     * - Portable executables: `.exe`, `.scr`, `.pif`, `.dll`, `.com`, `.cpl`, etc.
     * - Office documents: `.doc`, `.docx`, `.ppt`, `.pps`, `.pptx`, `.ppsx`, `.xls`, `.xlsx`, `.rtf`, `.pub`
     * - PDF
     * - APK
     * - Executable JAR
     * - Windows script component: `.sct`
     * - Windows shortcut: `.lnk`
     * - Windows help: `.chm`
     * - HTML application: `.hta`
     * - Windows script file: `.wsf`
     * - Javascript: `.js`
     * - Visual Basic: `.vbs`,  `.vbe`
     * - Shockwave Flash: `.swf`
     * - Perl: `.pl`
     * - Powershell: `.ps1`, `.psd1`, `.psm1`
     * - Scalable vector graphics: `.svg`
     * - Python: `.py`
     * - Linux ELF executables
     * - Email files: MIME RFC 822 `.eml`, Outlook `.msg`.
     * @type {Blob}
     * @memberof UploadSampleV2Request
     */
    sample: Blob;
    /**
     * Name of the file.
     * @type {string}
     * @memberof UploadSampleV2Request
     */
    fileName: string;
    /**
     * A descriptive comment to identify the file for other users.
     * @type {string}
     * @memberof UploadSampleV2Request
     */
    comment?: string;
    /**
     * Defines visibility of this file in Falcon MalQuery, either via the API or the Falcon console.
     *
     * - `true`: File is only shown to users within your customer account
     * - `false`: File can be seen by other CrowdStrike customers
     *
     * Default: `true`.
     * @type {boolean}
     * @memberof UploadSampleV2Request
     */
    isConfidential?: boolean;
}

/**
 * Check if a given object implements the UploadSampleV2Request interface.
 */
export function instanceOfUploadSampleV2Request(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sample" in value;
    isInstance = isInstance && "fileName" in value;

    return isInstance;
}

export function UploadSampleV2RequestFromJSON(json: any): UploadSampleV2Request {
    return UploadSampleV2RequestFromJSONTyped(json, false);
}

export function UploadSampleV2RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadSampleV2Request {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        sample: json["sample"],
        fileName: json["file_name"],
        comment: !exists(json, "comment") ? undefined : json["comment"],
        isConfidential: !exists(json, "is_confidential") ? undefined : json["is_confidential"],
    };
}

export function UploadSampleV2RequestToJSON(value?: UploadSampleV2Request | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        sample: value.sample,
        file_name: value.fileName,
        comment: value.comment,
        is_confidential: value.isConfidential,
    };
}
