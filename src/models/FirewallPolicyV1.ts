/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { HostGroupsHostGroupV1 } from "./HostGroupsHostGroupV1";
import { HostGroupsHostGroupV1FromJSON, HostGroupsHostGroupV1FromJSONTyped, HostGroupsHostGroupV1ToJSON } from "./HostGroupsHostGroupV1";

/**
 *
 * @export
 * @interface FirewallPolicyV1
 */
export interface FirewallPolicyV1 {
    /**
     * Channel file version for the policy
     * @type {number}
     * @memberof FirewallPolicyV1
     */
    channelVersion: number;
    /**
     * The customer id associated with the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    cid: string;
    /**
     * The email of the user which created the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    createdBy: string;
    /**
     * The time at which the policy was created
     * @type {Date}
     * @memberof FirewallPolicyV1
     */
    createdTimestamp: Date;
    /**
     * The description of a policy. Use this field to provide a high level summary of what this policy enforces
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    description: string;
    /**
     * If a policy is enabled it will be used during the course of policy evaluation
     * @type {boolean}
     * @memberof FirewallPolicyV1
     */
    enabled: boolean;
    /**
     * The groups that are currently attached to the policy
     * @type {Array<HostGroupsHostGroupV1>}
     * @memberof FirewallPolicyV1
     */
    groups: Array<HostGroupsHostGroupV1>;
    /**
     * The unique id of the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    id: string;
    /**
     * The email of the user which last modified the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    modifiedBy: string;
    /**
     * The time at which the policy was last modified
     * @type {Date}
     * @memberof FirewallPolicyV1
     */
    modifiedTimestamp: Date;
    /**
     * The human readable name of the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    name: string;
    /**
     * The name of the platform
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    platformName: FirewallPolicyV1PlatformNameEnum;
    /**
     * Firewall rule set id. This id combines several firewall rules and gets attached to the policy
     * @type {string}
     * @memberof FirewallPolicyV1
     */
    ruleSetId: string;
}

/**
 * @export
 */
export const FirewallPolicyV1PlatformNameEnum = {
    Windows: "Windows",
    Mac: "Mac",
    Linux: "Linux",
} as const;
export type FirewallPolicyV1PlatformNameEnum = (typeof FirewallPolicyV1PlatformNameEnum)[keyof typeof FirewallPolicyV1PlatformNameEnum];

/**
 * Check if a given object implements the FirewallPolicyV1 interface.
 */
export function instanceOfFirewallPolicyV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "channelVersion" in value;
    isInstance = isInstance && "cid" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "createdTimestamp" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "groups" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "modifiedBy" in value;
    isInstance = isInstance && "modifiedTimestamp" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "platformName" in value;
    isInstance = isInstance && "ruleSetId" in value;

    return isInstance;
}

export function FirewallPolicyV1FromJSON(json: any): FirewallPolicyV1 {
    return FirewallPolicyV1FromJSONTyped(json, false);
}

export function FirewallPolicyV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): FirewallPolicyV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        channelVersion: json["channel_version"],
        cid: json["cid"],
        createdBy: json["created_by"],
        createdTimestamp: new Date(json["created_timestamp"]),
        description: json["description"],
        enabled: json["enabled"],
        groups: (json["groups"] as Array<any>).map(HostGroupsHostGroupV1FromJSON),
        id: json["id"],
        modifiedBy: json["modified_by"],
        modifiedTimestamp: new Date(json["modified_timestamp"]),
        name: json["name"],
        platformName: json["platform_name"],
        ruleSetId: json["rule_set_id"],
    };
}

export function FirewallPolicyV1ToJSON(value?: FirewallPolicyV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        channel_version: value.channelVersion,
        cid: value.cid,
        created_by: value.createdBy,
        created_timestamp: value.createdTimestamp.toISOString(),
        description: value.description,
        enabled: value.enabled,
        groups: (value.groups as Array<any>).map(HostGroupsHostGroupV1ToJSON),
        id: value.id,
        modified_by: value.modifiedBy,
        modified_timestamp: value.modifiedTimestamp.toISOString(),
        name: value.name,
        platform_name: value.platformName,
        rule_set_id: value.ruleSetId,
    };
}
