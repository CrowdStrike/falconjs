/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { StoreDomainEventFilter } from "./StoreDomainEventFilter";
import { StoreDomainEventFilterFromJSON, StoreDomainEventFilterFromJSONTyped, StoreDomainEventFilterToJSON } from "./StoreDomainEventFilter";
import type { StoreDomainRTRCommandDetailsV1 } from "./StoreDomainRTRCommandDetailsV1";
import { StoreDomainRTRCommandDetailsV1FromJSON, StoreDomainRTRCommandDetailsV1FromJSONTyped, StoreDomainRTRCommandDetailsV1ToJSON } from "./StoreDomainRTRCommandDetailsV1";

/**
 *
 * @export
 * @interface StoreDomainVersionDetailsV1
 */
export interface StoreDomainVersionDetailsV1 {
    /**
     * list of API scopes the app needs for integration
     * @type {Array<string>}
     * @memberof StoreDomainVersionDetailsV1
     */
    apiScopes: Array<string>;
    /**
     * the UTC timestamp when the version was approved by CrowdStrike
     * @type {string}
     * @memberof StoreDomainVersionDetailsV1
     */
    approvalDate?: string;
    /**
     * the changes associated with the version
     * @type {Array<string>}
     * @memberof StoreDomainVersionDetailsV1
     */
    changeLog?: Array<string>;
    /**
     *
     * @type {StoreDomainEventFilter}
     * @memberof StoreDomainVersionDetailsV1
     */
    eventFilter: StoreDomainEventFilter;
    /**
     * the version of the partner's product that corresponds to the access version in the marketplace'
     * @type {string}
     * @memberof StoreDomainVersionDetailsV1
     */
    partnerVersion?: string;
    /**
     * list of Partner RTR commands associated with the version
     * @type {Array<StoreDomainRTRCommandDetailsV1>}
     * @memberof StoreDomainVersionDetailsV1
     */
    rtrCommands: Array<StoreDomainRTRCommandDetailsV1>;
    /**
     * the current state of the version in the approval process
     * @type {string}
     * @memberof StoreDomainVersionDetailsV1
     */
    state?: string;
    /**
     * the internal app version represented as a date (YYYY-MM-DD)
     * @type {string}
     * @memberof StoreDomainVersionDetailsV1
     */
    version: string;
}

/**
 * Check if a given object implements the StoreDomainVersionDetailsV1 interface.
 */
export function instanceOfStoreDomainVersionDetailsV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "apiScopes" in value;
    isInstance = isInstance && "eventFilter" in value;
    isInstance = isInstance && "rtrCommands" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function StoreDomainVersionDetailsV1FromJSON(json: any): StoreDomainVersionDetailsV1 {
    return StoreDomainVersionDetailsV1FromJSONTyped(json, false);
}

export function StoreDomainVersionDetailsV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreDomainVersionDetailsV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        apiScopes: json["api_scopes"],
        approvalDate: !exists(json, "approval_date") ? undefined : json["approval_date"],
        changeLog: !exists(json, "change_log") ? undefined : json["change_log"],
        eventFilter: StoreDomainEventFilterFromJSON(json["event_filter"]),
        partnerVersion: !exists(json, "partner_version") ? undefined : json["partner_version"],
        rtrCommands: (json["rtr_commands"] as Array<any>).map(StoreDomainRTRCommandDetailsV1FromJSON),
        state: !exists(json, "state") ? undefined : json["state"],
        version: json["version"],
    };
}

export function StoreDomainVersionDetailsV1ToJSON(value?: StoreDomainVersionDetailsV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        api_scopes: value.apiScopes,
        approval_date: value.approvalDate,
        change_log: value.changeLog,
        event_filter: StoreDomainEventFilterToJSON(value.eventFilter),
        partner_version: value.partnerVersion,
        rtr_commands: (value.rtrCommands as Array<any>).map(StoreDomainRTRCommandDetailsV1ToJSON),
        state: value.state,
        version: value.version,
    };
}
