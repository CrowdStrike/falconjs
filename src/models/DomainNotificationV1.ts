/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SadomainNotificationLog } from "./SadomainNotificationLog";
import { SadomainNotificationLogFromJSON, SadomainNotificationLogFromJSONTyped, SadomainNotificationLogToJSON } from "./SadomainNotificationLog";
import type { DomainMatchedBreachSummaryV1 } from "./DomainMatchedBreachSummaryV1";
import { DomainMatchedBreachSummaryV1FromJSON, DomainMatchedBreachSummaryV1FromJSONTyped, DomainMatchedBreachSummaryV1ToJSON } from "./DomainMatchedBreachSummaryV1";
import type { SadomainTyposquattingComponent } from "./SadomainTyposquattingComponent";
import { SadomainTyposquattingComponentFromJSON, SadomainTyposquattingComponentFromJSONTyped, SadomainTyposquattingComponentToJSON } from "./SadomainTyposquattingComponent";

/**
 *
 * @export
 * @interface DomainNotificationV1
 */
export interface DomainNotificationV1 {
    /**
     *
     * @type {string}
     * @memberof DomainNotificationV1
     */
    actorSlug: string;
    /**
     * The email of the user who is assigned to this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    assignedToUid?: string;
    /**
     * The name of the user who is assigned to this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    assignedToUsername?: string;
    /**
     * The unique ID of the user who is assigned to this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    assignedToUuid?: string;
    /**
     *
     * @type {DomainMatchedBreachSummaryV1}
     * @memberof DomainNotificationV1
     */
    breachSummary?: DomainMatchedBreachSummaryV1;
    /**
     *
     * @type {string}
     * @memberof DomainNotificationV1
     */
    cid: string;
    /**
     * The date when the notification was generated
     * @type {Date}
     * @memberof DomainNotificationV1
     */
    createdDate: Date;
    /**
     * Highlighted content based on the rule that generated the notifications. Highlights are surrounded with a `<cs-highlight>` tag
     * @type {Array<string>}
     * @memberof DomainNotificationV1
     */
    highlights?: Array<string>;
    /**
     * The ID of the notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    id: string;
    /**
     * The author who posted the intelligence item
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemAuthor?: string;
    /**
     * The ID of the author who posted the intelligence item
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemAuthorId?: string;
    /**
     * Timestamp when the item is considered to have been created
     * @type {Date}
     * @memberof DomainNotificationV1
     */
    itemDate: Date;
    /**
     * ID of the item which matched the rule
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemId: string;
    /**
     * The site where the intelligence item was found
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemSite?: string;
    /**
     * The ID of the site where the intelligence item was found
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemSiteId?: string;
    /**
     * Type of the item which matched the rule: `post`, `reply`, `botnet_config`, `breach`, etc.
     * @type {string}
     * @memberof DomainNotificationV1
     */
    itemType: string;
    /**
     *
     * @type {Array<SadomainNotificationLog>}
     * @memberof DomainNotificationV1
     */
    logs?: Array<SadomainNotificationLog>;
    /**
     * ID of the raw intel item that matched the rule
     * @type {string}
     * @memberof DomainNotificationV1
     */
    rawIntelId: string;
    /**
     * The name of the user who created the rule
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleCreatorName?: string;
    /**
     * The user ID of the user who created the rule
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleCreatorUid?: string;
    /**
     * The unique UUID of the user who created the rule
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleCreatorUuid?: string;
    /**
     * The ID of the rule that generated this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleId: string;
    /**
     * The name of the rule that generated this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleName: string;
    /**
     * The priority of the rule that generated this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    rulePriority: string;
    /**
     * The topic of the rule that generated this notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    ruleTopic: string;
    /**
     * Category of the source that generated the notification
     * @type {string}
     * @memberof DomainNotificationV1
     */
    sourceCategory?: string;
    /**
     * The notification status. This can be one of: `new`, `in-progress`, `closed-false-positive`, `closed-true-positive`.
     * @type {string}
     * @memberof DomainNotificationV1
     */
    status: string;
    /**
     *
     * @type {SadomainTyposquattingComponent}
     * @memberof DomainNotificationV1
     */
    typosquatting?: SadomainTyposquattingComponent;
    /**
     * The date when the notification was updated
     * @type {Date}
     * @memberof DomainNotificationV1
     */
    updatedDate: Date;
}

/**
 * Check if a given object implements the DomainNotificationV1 interface.
 */
export function instanceOfDomainNotificationV1(value: object): value is DomainNotificationV1 {
    if (!("actorSlug" in value) || value["actorSlug"] === undefined) return false;
    if (!("cid" in value) || value["cid"] === undefined) return false;
    if (!("createdDate" in value) || value["createdDate"] === undefined) return false;
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("itemDate" in value) || value["itemDate"] === undefined) return false;
    if (!("itemId" in value) || value["itemId"] === undefined) return false;
    if (!("itemType" in value) || value["itemType"] === undefined) return false;
    if (!("rawIntelId" in value) || value["rawIntelId"] === undefined) return false;
    if (!("ruleId" in value) || value["ruleId"] === undefined) return false;
    if (!("ruleName" in value) || value["ruleName"] === undefined) return false;
    if (!("rulePriority" in value) || value["rulePriority"] === undefined) return false;
    if (!("ruleTopic" in value) || value["ruleTopic"] === undefined) return false;
    if (!("status" in value) || value["status"] === undefined) return false;
    if (!("updatedDate" in value) || value["updatedDate"] === undefined) return false;
    return true;
}

export function DomainNotificationV1FromJSON(json: any): DomainNotificationV1 {
    return DomainNotificationV1FromJSONTyped(json, false);
}

export function DomainNotificationV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainNotificationV1 {
    if (json == null) {
        return json;
    }
    return {
        actorSlug: json["actor_slug"],
        assignedToUid: json["assigned_to_uid"] == null ? undefined : json["assigned_to_uid"],
        assignedToUsername: json["assigned_to_username"] == null ? undefined : json["assigned_to_username"],
        assignedToUuid: json["assigned_to_uuid"] == null ? undefined : json["assigned_to_uuid"],
        breachSummary: json["breach_summary"] == null ? undefined : DomainMatchedBreachSummaryV1FromJSON(json["breach_summary"]),
        cid: json["cid"],
        createdDate: new Date(json["created_date"]),
        highlights: json["highlights"] == null ? undefined : json["highlights"],
        id: json["id"],
        itemAuthor: json["item_author"] == null ? undefined : json["item_author"],
        itemAuthorId: json["item_author_id"] == null ? undefined : json["item_author_id"],
        itemDate: new Date(json["item_date"]),
        itemId: json["item_id"],
        itemSite: json["item_site"] == null ? undefined : json["item_site"],
        itemSiteId: json["item_site_id"] == null ? undefined : json["item_site_id"],
        itemType: json["item_type"],
        logs: json["logs"] == null ? undefined : (json["logs"] as Array<any>).map(SadomainNotificationLogFromJSON),
        rawIntelId: json["raw_intel_id"],
        ruleCreatorName: json["rule_creator_name"] == null ? undefined : json["rule_creator_name"],
        ruleCreatorUid: json["rule_creator_uid"] == null ? undefined : json["rule_creator_uid"],
        ruleCreatorUuid: json["rule_creator_uuid"] == null ? undefined : json["rule_creator_uuid"],
        ruleId: json["rule_id"],
        ruleName: json["rule_name"],
        rulePriority: json["rule_priority"],
        ruleTopic: json["rule_topic"],
        sourceCategory: json["source_category"] == null ? undefined : json["source_category"],
        status: json["status"],
        typosquatting: json["typosquatting"] == null ? undefined : SadomainTyposquattingComponentFromJSON(json["typosquatting"]),
        updatedDate: new Date(json["updated_date"]),
    };
}

export function DomainNotificationV1ToJSON(value?: DomainNotificationV1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        actor_slug: value["actorSlug"],
        assigned_to_uid: value["assignedToUid"],
        assigned_to_username: value["assignedToUsername"],
        assigned_to_uuid: value["assignedToUuid"],
        breach_summary: DomainMatchedBreachSummaryV1ToJSON(value["breachSummary"]),
        cid: value["cid"],
        created_date: value["createdDate"].toISOString(),
        highlights: value["highlights"],
        id: value["id"],
        item_author: value["itemAuthor"],
        item_author_id: value["itemAuthorId"],
        item_date: value["itemDate"].toISOString(),
        item_id: value["itemId"],
        item_site: value["itemSite"],
        item_site_id: value["itemSiteId"],
        item_type: value["itemType"],
        logs: value["logs"] == null ? undefined : (value["logs"] as Array<any>).map(SadomainNotificationLogToJSON),
        raw_intel_id: value["rawIntelId"],
        rule_creator_name: value["ruleCreatorName"],
        rule_creator_uid: value["ruleCreatorUid"],
        rule_creator_uuid: value["ruleCreatorUuid"],
        rule_id: value["ruleId"],
        rule_name: value["ruleName"],
        rule_priority: value["rulePriority"],
        rule_topic: value["ruleTopic"],
        source_category: value["sourceCategory"],
        status: value["status"],
        typosquatting: SadomainTyposquattingComponentToJSON(value["typosquatting"]),
        updated_date: value["updatedDate"].toISOString(),
    };
}
