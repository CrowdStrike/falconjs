/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainExternalAssetSSLRecord } from "./DomainExternalAssetSSLRecord";
import { DomainExternalAssetSSLRecordFromJSON, DomainExternalAssetSSLRecordFromJSONTyped, DomainExternalAssetSSLRecordToJSON } from "./DomainExternalAssetSSLRecord";
import type { DomainExternalAssetSubsidiary } from "./DomainExternalAssetSubsidiary";
import { DomainExternalAssetSubsidiaryFromJSON, DomainExternalAssetSubsidiaryFromJSONTyped, DomainExternalAssetSubsidiaryToJSON } from "./DomainExternalAssetSubsidiary";
import type { DomainExternalAssetServiceBlobsLinks } from "./DomainExternalAssetServiceBlobsLinks";
import { DomainExternalAssetServiceBlobsLinksFromJSON, DomainExternalAssetServiceBlobsLinksFromJSONTyped, DomainExternalAssetServiceBlobsLinksToJSON } from "./DomainExternalAssetServiceBlobsLinks";
import type { DomainExternalAssetApplication } from "./DomainExternalAssetApplication";
import { DomainExternalAssetApplicationFromJSON, DomainExternalAssetApplicationFromJSONTyped, DomainExternalAssetApplicationToJSON } from "./DomainExternalAssetApplication";
import type { DomainExternalAssetHTTPAttributes } from "./DomainExternalAssetHTTPAttributes";
import { DomainExternalAssetHTTPAttributesFromJSON, DomainExternalAssetHTTPAttributesFromJSONTyped, DomainExternalAssetHTTPAttributesToJSON } from "./DomainExternalAssetHTTPAttributes";

/**
 *
 * @export
 * @interface DomainExternalAssetService
 */
export interface DomainExternalAssetService {
    /**
     * Details about the applications associated to the service
     * @type {Array<DomainExternalAssetApplication>}
     * @memberof DomainExternalAssetService
     */
    applications?: Array<DomainExternalAssetApplication>;
    /**
     *
     * @type {DomainExternalAssetServiceBlobsLinks}
     * @memberof DomainExternalAssetService
     */
    blobLinks?: DomainExternalAssetServiceBlobsLinks;
    /**
     * The cloud provider name
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    cloudProvider?: string;
    /**
     * A list of Common Platform Enumeration identifiers for this service. The schema format is: cpe:<cpe_version>:<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>:<sw_edition>:<target_sw>:<target_hw>:<other>
     * @type {Array<string>}
     * @memberof DomainExternalAssetService
     */
    cpes?: Array<string>;
    /**
     * The first time this service was observed
     * @type {Date}
     * @memberof DomainExternalAssetService
     */
    firstSeen?: Date;
    /**
     * The hosting provider name
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    hostingProvider?: string;
    /**
     *
     * @type {DomainExternalAssetHTTPAttributes}
     * @memberof DomainExternalAssetService
     */
    httpAttributes?: DomainExternalAssetHTTPAttributes;
    /**
     * The unique external asset identifier
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    id: string;
    /**
     * The date on which this was last scanned
     * @type {Date}
     * @memberof DomainExternalAssetService
     */
    lastSeen: Date;
    /**
     * The operating system the service is running on
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    os?: string;
    /**
     * The name of the platform on which the service is running (Windows, Mac, Linux).
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    platformName?: string;
    /**
     * The port on which the service is accessible
     * @type {number}
     * @memberof DomainExternalAssetService
     */
    port: number;
    /**
     * The protocol used to access this service
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    protocol: string;
    /**
     * The availability status for this service
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    status: string;
    /**
     * The status code returned by the service
     * @type {number}
     * @memberof DomainExternalAssetService
     */
    statusCode: number;
    /**
     * List of subsidiaries that the asset belongs to
     * @type {Array<DomainExternalAssetSubsidiary>}
     * @memberof DomainExternalAssetService
     */
    subsidiaries?: Array<DomainExternalAssetSubsidiary>;
    /**
     *
     * @type {DomainExternalAssetSSLRecord}
     * @memberof DomainExternalAssetService
     */
    tls?: DomainExternalAssetSSLRecord;
    /**
     * The network transport used to access this service
     * @type {string}
     * @memberof DomainExternalAssetService
     */
    transport: string;
}

/**
 * Check if a given object implements the DomainExternalAssetService interface.
 */
export function instanceOfDomainExternalAssetService(value: object): value is DomainExternalAssetService {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("lastSeen" in value) || value["lastSeen"] === undefined) return false;
    if (!("port" in value) || value["port"] === undefined) return false;
    if (!("protocol" in value) || value["protocol"] === undefined) return false;
    if (!("status" in value) || value["status"] === undefined) return false;
    if (!("statusCode" in value) || value["statusCode"] === undefined) return false;
    if (!("transport" in value) || value["transport"] === undefined) return false;
    return true;
}

export function DomainExternalAssetServiceFromJSON(json: any): DomainExternalAssetService {
    return DomainExternalAssetServiceFromJSONTyped(json, false);
}

export function DomainExternalAssetServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainExternalAssetService {
    if (json == null) {
        return json;
    }
    return {
        applications: json["applications"] == null ? undefined : (json["applications"] as Array<any>).map(DomainExternalAssetApplicationFromJSON),
        blobLinks: json["blob_links"] == null ? undefined : DomainExternalAssetServiceBlobsLinksFromJSON(json["blob_links"]),
        cloudProvider: json["cloud_provider"] == null ? undefined : json["cloud_provider"],
        cpes: json["cpes"] == null ? undefined : json["cpes"],
        firstSeen: json["first_seen"] == null ? undefined : new Date(json["first_seen"]),
        hostingProvider: json["hosting_provider"] == null ? undefined : json["hosting_provider"],
        httpAttributes: json["http_attributes"] == null ? undefined : DomainExternalAssetHTTPAttributesFromJSON(json["http_attributes"]),
        id: json["id"],
        lastSeen: new Date(json["last_seen"]),
        os: json["os"] == null ? undefined : json["os"],
        platformName: json["platform_name"] == null ? undefined : json["platform_name"],
        port: json["port"],
        protocol: json["protocol"],
        status: json["status"],
        statusCode: json["status_code"],
        subsidiaries: json["subsidiaries"] == null ? undefined : (json["subsidiaries"] as Array<any>).map(DomainExternalAssetSubsidiaryFromJSON),
        tls: json["tls"] == null ? undefined : DomainExternalAssetSSLRecordFromJSON(json["tls"]),
        transport: json["transport"],
    };
}

export function DomainExternalAssetServiceToJSON(value?: DomainExternalAssetService | null): any {
    if (value == null) {
        return value;
    }
    return {
        applications: value["applications"] == null ? undefined : (value["applications"] as Array<any>).map(DomainExternalAssetApplicationToJSON),
        blob_links: DomainExternalAssetServiceBlobsLinksToJSON(value["blobLinks"]),
        cloud_provider: value["cloudProvider"],
        cpes: value["cpes"],
        first_seen: value["firstSeen"] == null ? undefined : value["firstSeen"].toISOString(),
        hosting_provider: value["hostingProvider"],
        http_attributes: DomainExternalAssetHTTPAttributesToJSON(value["httpAttributes"]),
        id: value["id"],
        last_seen: value["lastSeen"].toISOString(),
        os: value["os"],
        platform_name: value["platformName"],
        port: value["port"],
        protocol: value["protocol"],
        status: value["status"],
        status_code: value["statusCode"],
        subsidiaries: value["subsidiaries"] == null ? undefined : (value["subsidiaries"] as Array<any>).map(DomainExternalAssetSubsidiaryToJSON),
        tls: DomainExternalAssetSSLRecordToJSON(value["tls"]),
        transport: value["transport"],
    };
}
