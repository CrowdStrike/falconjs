/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GraphConfiguredActivity } from './GraphConfiguredActivity';
import {
    GraphConfiguredActivityFromJSON,
    GraphConfiguredActivityFromJSONTyped,
    GraphConfiguredActivityToJSON,
} from './GraphConfiguredActivity';
import type { GraphEnd } from './GraphEnd';
import {
    GraphEndFromJSON,
    GraphEndFromJSONTyped,
    GraphEndToJSON,
} from './GraphEnd';
import type { GraphSubModel } from './GraphSubModel';
import {
    GraphSubModelFromJSON,
    GraphSubModelFromJSONTyped,
    GraphSubModelToJSON,
} from './GraphSubModel';
import type { GraphFlow } from './GraphFlow';
import {
    GraphFlowFromJSON,
    GraphFlowFromJSONTyped,
    GraphFlowToJSON,
} from './GraphFlow';
import type { GraphGateway } from './GraphGateway';
import {
    GraphGatewayFromJSON,
    GraphGatewayFromJSONTyped,
    GraphGatewayToJSON,
} from './GraphGateway';
import type { GraphConfiguredTrigger } from './GraphConfiguredTrigger';
import {
    GraphConfiguredTriggerFromJSON,
    GraphConfiguredTriggerFromJSONTyped,
    GraphConfiguredTriggerToJSON,
} from './GraphConfiguredTrigger';

/**
 * 
 * @export
 * @interface GraphDefinitionModel
 */
export interface GraphDefinitionModel {
    /**
     * Details of all the activities within the model. Each activity has a unique node ID as the key, that is set by the caller.
     * @type {{ [key: string]: GraphConfiguredActivity; }}
     * @memberof GraphDefinitionModel
     */
    activities?: { [key: string]: GraphConfiguredActivity; };
    /**
     * 
     * @type {GraphEnd}
     * @memberof GraphDefinitionModel
     */
    end?: GraphEnd;
    /**
     * Details all the sequence flows within the model. Each flow has a unique node ID as the key, that is set by the caller.
     * @type {{ [key: string]: GraphFlow; }}
     * @memberof GraphDefinitionModel
     */
    flows: { [key: string]: GraphFlow; };
    /**
     * Details all the gateways within the model. Each gateway has a unique node ID as the key, that is set by the caller.
     * @type {{ [key: string]: GraphGateway; }}
     * @memberof GraphDefinitionModel
     */
    gateways?: { [key: string]: GraphGateway; };
    /**
     * 
     * @type {object}
     * @memberof GraphDefinitionModel
     */
    nodeRegistry: object;
    /**
     * Details of all sub-models within the model. Each sub-model has a unique node ID as the key set by the caller.
     * @type {{ [key: string]: GraphSubModel; }}
     * @memberof GraphDefinitionModel
     */
    subModels?: { [key: string]: GraphSubModel; };
    /**
     * 
     * @type {GraphConfiguredTrigger}
     * @memberof GraphDefinitionModel
     */
    trigger: GraphConfiguredTrigger;
}

/**
 * Check if a given object implements the GraphDefinitionModel interface.
 */
export function instanceOfGraphDefinitionModel(value: object): value is GraphDefinitionModel {
    if (!('flows' in value) || value['flows'] === undefined) return false;
    if (!('nodeRegistry' in value) || value['nodeRegistry'] === undefined) return false;
    if (!('trigger' in value) || value['trigger'] === undefined) return false;
    return true;
}

export function GraphDefinitionModelFromJSON(json: any): GraphDefinitionModel {
    return GraphDefinitionModelFromJSONTyped(json, false);
}

export function GraphDefinitionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphDefinitionModel {
    if (json == null) {
        return json;
    }
    return {
        
        'activities': json['activities'] == null ? undefined : (mapValues(json['activities'], GraphConfiguredActivityFromJSON)),
        'end': json['end'] == null ? undefined : GraphEndFromJSON(json['end']),
        'flows': (mapValues(json['flows'], GraphFlowFromJSON)),
        'gateways': json['gateways'] == null ? undefined : (mapValues(json['gateways'], GraphGatewayFromJSON)),
        'nodeRegistry': json['nodeRegistry'],
        'subModels': json['sub_models'] == null ? undefined : (mapValues(json['sub_models'], GraphSubModelFromJSON)),
        'trigger': GraphConfiguredTriggerFromJSON(json['trigger']),
    };
}

export function GraphDefinitionModelToJSON(value?: GraphDefinitionModel | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'activities': value['activities'] == null ? undefined : (mapValues(value['activities'], GraphConfiguredActivityToJSON)),
        'end': GraphEndToJSON(value['end']),
        'flows': (mapValues(value['flows'], GraphFlowToJSON)),
        'gateways': value['gateways'] == null ? undefined : (mapValues(value['gateways'], GraphGatewayToJSON)),
        'nodeRegistry': value['nodeRegistry'],
        'sub_models': value['subModels'] == null ? undefined : (mapValues(value['subModels'], GraphSubModelToJSON)),
        'trigger': GraphConfiguredTriggerToJSON(value['trigger']),
    };
}

