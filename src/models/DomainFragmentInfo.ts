/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface DomainFragmentInfo
 */
export interface DomainFragmentInfo {
    /**
     * Offset of the content field from the start of data, in characters
     * @type {number}
     * @memberof DomainFragmentInfo
     */
    contentOffset?: number;
    /**
     * Total number of fragments for this group
     * @type {number}
     * @memberof DomainFragmentInfo
     */
    count?: number;
    /**
     *  List of fields that have been split, such as: content, iocs, translated_content, ...
     * @type {Array<string>}
     * @memberof DomainFragmentInfo
     */
    fragmentedFields?: Array<string>;
    /**
     * HEX string, similar to stream_id, ties all fragments together
     * @type {string}
     * @memberof DomainFragmentInfo
     */
    groupId?: string;
    /**
     * Zero-based index of fragment in the group
     * @type {number}
     * @memberof DomainFragmentInfo
     */
    index?: number;
    /**
     * Offset of the translated_content field from the start of data, in characters
     * @type {number}
     * @memberof DomainFragmentInfo
     */
    translatedContentOffset?: number;
    /**
     * List of fields that have been truncated or deleted
     * @type {Array<string>}
     * @memberof DomainFragmentInfo
     */
    truncatedFields?: Array<string>;
}

/**
 * Check if a given object implements the DomainFragmentInfo interface.
 */
export function instanceOfDomainFragmentInfo(value: object): value is DomainFragmentInfo {
    return true;
}

export function DomainFragmentInfoFromJSON(json: any): DomainFragmentInfo {
    return DomainFragmentInfoFromJSONTyped(json, false);
}

export function DomainFragmentInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainFragmentInfo {
    if (json == null) {
        return json;
    }
    return {
        contentOffset: json["content_offset"] == null ? undefined : json["content_offset"],
        count: json["count"] == null ? undefined : json["count"],
        fragmentedFields: json["fragmented_fields"] == null ? undefined : json["fragmented_fields"],
        groupId: json["group_id"] == null ? undefined : json["group_id"],
        index: json["index"] == null ? undefined : json["index"],
        translatedContentOffset: json["translated_content_offset"] == null ? undefined : json["translated_content_offset"],
        truncatedFields: json["truncated_fields"] == null ? undefined : json["truncated_fields"],
    };
}

export function DomainFragmentInfoToJSON(value?: DomainFragmentInfo | null): any {
    if (value == null) {
        return value;
    }
    return {
        content_offset: value["contentOffset"],
        count: value["count"],
        fragmented_fields: value["fragmentedFields"],
        group_id: value["groupId"],
        index: value["index"],
        translated_content_offset: value["translatedContentOffset"],
        truncated_fields: value["truncatedFields"],
    };
}
