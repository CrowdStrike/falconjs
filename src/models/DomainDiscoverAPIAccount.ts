/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * Represents information about an account.
 * @export
 * @interface DomainDiscoverAPIAccount
 */
export interface DomainDiscoverAPIAccount {
    /**
     * The account's name (Domain\Username or Hostname\Username).
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    accountName?: string;
    /**
     * The type of the account (Local or Domain).
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    accountType?: string;
    /**
     * Whether the account has administrator privileges (Yes, No, or Unknown).
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    adminPrivileges?: string;
    /**
     * The account's customer ID.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    cid: string;
    /**
     * The first time the account was seen successfully logging in to your environment.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    firstSeenTimestamp?: string;
    /**
     * The unique ID of the account.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    id: string;
    /**
     * The hostname of the asset on which the account last made a failed login.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastFailedLoginHostname?: string;
    /**
     * The date and time of the account's most recent failed login.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastFailedLoginTimestamp?: string;
    /**
     * The type of the account's most recent failed login. <ul><li>Interactive</li><li>Network</li><li>Batch</li><li>Service</li><li>Unlock</li><li>Network cleartext</li><li>New credentials</li><li>Terminal server</li><li>Cached credentials</li><li>Auditing</li></ul>
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastFailedLoginType?: string;
    /**
     * The name of the city where the asset is located on which the account last successfully logged in.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginHostCity?: string;
    /**
     * The name of the country where the asset is located on which the account last successfully logged in.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginHostCountry?: string;
    /**
     * The hostname of the asset on which the account last successfully logged in.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginHostname?: string;
    /**
     * The remote IP address of the asset on which the account last successfully logged in.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginRemoteIp?: string;
    /**
     * The date and time of the account's most recent successful login.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginTimestamp?: string;
    /**
     * The type of the account's most recent successful login. <ul><li>Interactive</li><li>Service</li><li>Terminal server</li><li>Cached credentials</li><li>Auditing</li></ul>
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    lastSuccessfulLoginType?: string;
    /**
     * Whether the account has local administrator privileges (Yes, No).
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    localAdminPrivileges?: string;
    /**
     * The domain of the asset the account successfully logged in to.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    loginDomain?: string;
    /**
     * The most recent date and time the account's password was changed.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    passwordLastSetTimestamp?: string;
    /**
     * The account's security identifier on Windows assets.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    userSid?: string;
    /**
     * The account's username.
     * @type {string}
     * @memberof DomainDiscoverAPIAccount
     */
    username?: string;
}

/**
 * Check if a given object implements the DomainDiscoverAPIAccount interface.
 */
export function instanceOfDomainDiscoverAPIAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cid" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DomainDiscoverAPIAccountFromJSON(json: any): DomainDiscoverAPIAccount {
    return DomainDiscoverAPIAccountFromJSONTyped(json, false);
}

export function DomainDiscoverAPIAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDiscoverAPIAccount {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        accountName: !exists(json, "account_name") ? undefined : json["account_name"],
        accountType: !exists(json, "account_type") ? undefined : json["account_type"],
        adminPrivileges: !exists(json, "admin_privileges") ? undefined : json["admin_privileges"],
        cid: json["cid"],
        firstSeenTimestamp: !exists(json, "first_seen_timestamp") ? undefined : json["first_seen_timestamp"],
        id: json["id"],
        lastFailedLoginHostname: !exists(json, "last_failed_login_hostname") ? undefined : json["last_failed_login_hostname"],
        lastFailedLoginTimestamp: !exists(json, "last_failed_login_timestamp") ? undefined : json["last_failed_login_timestamp"],
        lastFailedLoginType: !exists(json, "last_failed_login_type") ? undefined : json["last_failed_login_type"],
        lastSuccessfulLoginHostCity: !exists(json, "last_successful_login_host_city") ? undefined : json["last_successful_login_host_city"],
        lastSuccessfulLoginHostCountry: !exists(json, "last_successful_login_host_country") ? undefined : json["last_successful_login_host_country"],
        lastSuccessfulLoginHostname: !exists(json, "last_successful_login_hostname") ? undefined : json["last_successful_login_hostname"],
        lastSuccessfulLoginRemoteIp: !exists(json, "last_successful_login_remote_ip") ? undefined : json["last_successful_login_remote_ip"],
        lastSuccessfulLoginTimestamp: !exists(json, "last_successful_login_timestamp") ? undefined : json["last_successful_login_timestamp"],
        lastSuccessfulLoginType: !exists(json, "last_successful_login_type") ? undefined : json["last_successful_login_type"],
        localAdminPrivileges: !exists(json, "local_admin_privileges") ? undefined : json["local_admin_privileges"],
        loginDomain: !exists(json, "login_domain") ? undefined : json["login_domain"],
        passwordLastSetTimestamp: !exists(json, "password_last_set_timestamp") ? undefined : json["password_last_set_timestamp"],
        userSid: !exists(json, "user_sid") ? undefined : json["user_sid"],
        username: !exists(json, "username") ? undefined : json["username"],
    };
}

export function DomainDiscoverAPIAccountToJSON(value?: DomainDiscoverAPIAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        account_name: value.accountName,
        account_type: value.accountType,
        admin_privileges: value.adminPrivileges,
        cid: value.cid,
        first_seen_timestamp: value.firstSeenTimestamp,
        id: value.id,
        last_failed_login_hostname: value.lastFailedLoginHostname,
        last_failed_login_timestamp: value.lastFailedLoginTimestamp,
        last_failed_login_type: value.lastFailedLoginType,
        last_successful_login_host_city: value.lastSuccessfulLoginHostCity,
        last_successful_login_host_country: value.lastSuccessfulLoginHostCountry,
        last_successful_login_hostname: value.lastSuccessfulLoginHostname,
        last_successful_login_remote_ip: value.lastSuccessfulLoginRemoteIp,
        last_successful_login_timestamp: value.lastSuccessfulLoginTimestamp,
        last_successful_login_type: value.lastSuccessfulLoginType,
        local_admin_privileges: value.localAdminPrivileges,
        login_domain: value.loginDomain,
        password_last_set_timestamp: value.passwordLastSetTimestamp,
        user_sid: value.userSid,
        username: value.username,
    };
}
