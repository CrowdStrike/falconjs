/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainDiscoverAPIApplicationHost } from "./DomainDiscoverAPIApplicationHost";
import { DomainDiscoverAPIApplicationHostFromJSON, DomainDiscoverAPIApplicationHostFromJSONTyped, DomainDiscoverAPIApplicationHostToJSON } from "./DomainDiscoverAPIApplicationHost";

/**
 * Represents information about an application.
 * @export
 * @interface DomainDiscoverAPIApplication
 */
export interface DomainDiscoverAPIApplication {
    /**
     * Represents the application architectures (x86 / x64).
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplication
     */
    architectures?: Array<string>;
    /**
     * The category of the application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    category?: string;
    /**
     * The customer ID of this application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    cid: string;
    /**
     * Timestamp when this application was first seen by the cloud.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    firstSeenTimestamp?: string;
    /**
     * The user defined groups this application is part of.
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplication
     */
    groups?: Array<string>;
    /**
     *
     * @type {DomainDiscoverAPIApplicationHost}
     * @memberof DomainDiscoverAPIApplication
     */
    host?: DomainDiscoverAPIApplicationHost;
    /**
     * The unique ID for the application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    id: string;
    /**
     * The file paths where the application is installed on the host. Or the locations of the executables.
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplication
     */
    installationPaths?: Array<string>;
    /**
     * Timestamp when the application was installed on the host. We might not have this data.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    installationTimestamp?: string;
    /**
     * Whether or not the application is normalized
     * @type {boolean}
     * @memberof DomainDiscoverAPIApplication
     */
    isNormalized?: boolean;
    /**
     * Whether or not the application is suspicious
     * @type {boolean}
     * @memberof DomainDiscoverAPIApplication
     */
    isSuspicious?: boolean;
    /**
     * Timestamp when this application was last updated (something changed in the application or in the host data).
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUpdatedTimestamp?: string;
    /**
     * The file hash that was last used for this application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUsedFileHash?: string;
    /**
     * The file name that was last used for this application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUsedFileName?: string;
    /**
     * Timestamp when this application was last used.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUsedTimestamp?: string;
    /**
     * The username of the user that last used this application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUsedUserName?: string;
    /**
     * The user SID of the last user that used this application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    lastUsedUserSid?: string;
    /**
     * The name of the application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    name?: string;
    /**
     * The combined field on which we will be able to group by app.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    nameVendor?: string;
    /**
     * The combined field on which we will be able to group by app + version.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    nameVendorVersion?: string;
    /**
     * The name the application's vendor.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    vendor?: string;
    /**
     * The version of the application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    version?: string;
    /**
     * The version scheme of the application.
     * @type {string}
     * @memberof DomainDiscoverAPIApplication
     */
    versioningScheme?: string;
}

/**
 * Check if a given object implements the DomainDiscoverAPIApplication interface.
 */
export function instanceOfDomainDiscoverAPIApplication(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cid" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DomainDiscoverAPIApplicationFromJSON(json: any): DomainDiscoverAPIApplication {
    return DomainDiscoverAPIApplicationFromJSONTyped(json, false);
}

export function DomainDiscoverAPIApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDiscoverAPIApplication {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        architectures: !exists(json, "architectures") ? undefined : json["architectures"],
        category: !exists(json, "category") ? undefined : json["category"],
        cid: json["cid"],
        firstSeenTimestamp: !exists(json, "first_seen_timestamp") ? undefined : json["first_seen_timestamp"],
        groups: !exists(json, "groups") ? undefined : json["groups"],
        host: !exists(json, "host") ? undefined : DomainDiscoverAPIApplicationHostFromJSON(json["host"]),
        id: json["id"],
        installationPaths: !exists(json, "installation_paths") ? undefined : json["installation_paths"],
        installationTimestamp: !exists(json, "installation_timestamp") ? undefined : json["installation_timestamp"],
        isNormalized: !exists(json, "is_normalized") ? undefined : json["is_normalized"],
        isSuspicious: !exists(json, "is_suspicious") ? undefined : json["is_suspicious"],
        lastUpdatedTimestamp: !exists(json, "last_updated_timestamp") ? undefined : json["last_updated_timestamp"],
        lastUsedFileHash: !exists(json, "last_used_file_hash") ? undefined : json["last_used_file_hash"],
        lastUsedFileName: !exists(json, "last_used_file_name") ? undefined : json["last_used_file_name"],
        lastUsedTimestamp: !exists(json, "last_used_timestamp") ? undefined : json["last_used_timestamp"],
        lastUsedUserName: !exists(json, "last_used_user_name") ? undefined : json["last_used_user_name"],
        lastUsedUserSid: !exists(json, "last_used_user_sid") ? undefined : json["last_used_user_sid"],
        name: !exists(json, "name") ? undefined : json["name"],
        nameVendor: !exists(json, "name_vendor") ? undefined : json["name_vendor"],
        nameVendorVersion: !exists(json, "name_vendor_version") ? undefined : json["name_vendor_version"],
        vendor: !exists(json, "vendor") ? undefined : json["vendor"],
        version: !exists(json, "version") ? undefined : json["version"],
        versioningScheme: !exists(json, "versioning_scheme") ? undefined : json["versioning_scheme"],
    };
}

export function DomainDiscoverAPIApplicationToJSON(value?: DomainDiscoverAPIApplication | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        architectures: value.architectures,
        category: value.category,
        cid: value.cid,
        first_seen_timestamp: value.firstSeenTimestamp,
        groups: value.groups,
        host: DomainDiscoverAPIApplicationHostToJSON(value.host),
        id: value.id,
        installation_paths: value.installationPaths,
        installation_timestamp: value.installationTimestamp,
        is_normalized: value.isNormalized,
        is_suspicious: value.isSuspicious,
        last_updated_timestamp: value.lastUpdatedTimestamp,
        last_used_file_hash: value.lastUsedFileHash,
        last_used_file_name: value.lastUsedFileName,
        last_used_timestamp: value.lastUsedTimestamp,
        last_used_user_name: value.lastUsedUserName,
        last_used_user_sid: value.lastUsedUserSid,
        name: value.name,
        name_vendor: value.nameVendor,
        name_vendor_version: value.nameVendorVersion,
        vendor: value.vendor,
        version: value.version,
        versioning_scheme: value.versioningScheme,
    };
}
