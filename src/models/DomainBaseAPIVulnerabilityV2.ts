/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainAPIVulnerabilityExtendedAppV2 } from "./DomainAPIVulnerabilityExtendedAppV2";
import { DomainAPIVulnerabilityExtendedAppV2FromJSON, DomainAPIVulnerabilityExtendedAppV2FromJSONTyped, DomainAPIVulnerabilityExtendedAppV2ToJSON } from "./DomainAPIVulnerabilityExtendedAppV2";
import type { DomainAPIVulnerabilityAppV2 } from "./DomainAPIVulnerabilityAppV2";
import { DomainAPIVulnerabilityAppV2FromJSON, DomainAPIVulnerabilityAppV2FromJSONTyped, DomainAPIVulnerabilityAppV2ToJSON } from "./DomainAPIVulnerabilityAppV2";
import type { DomainAPIVulnerabilityRemediationFacetV2 } from "./DomainAPIVulnerabilityRemediationFacetV2";
import {
    DomainAPIVulnerabilityRemediationFacetV2FromJSON,
    DomainAPIVulnerabilityRemediationFacetV2FromJSONTyped,
    DomainAPIVulnerabilityRemediationFacetV2ToJSON,
} from "./DomainAPIVulnerabilityRemediationFacetV2";
import type { DomainAPIVulnerabilityCVEDetailsFacetV2 } from "./DomainAPIVulnerabilityCVEDetailsFacetV2";
import {
    DomainAPIVulnerabilityCVEDetailsFacetV2FromJSON,
    DomainAPIVulnerabilityCVEDetailsFacetV2FromJSONTyped,
    DomainAPIVulnerabilityCVEDetailsFacetV2ToJSON,
} from "./DomainAPIVulnerabilityCVEDetailsFacetV2";
import type { DomainAPIVulnerabilityServiceV2 } from "./DomainAPIVulnerabilityServiceV2";
import { DomainAPIVulnerabilityServiceV2FromJSON, DomainAPIVulnerabilityServiceV2FromJSONTyped, DomainAPIVulnerabilityServiceV2ToJSON } from "./DomainAPIVulnerabilityServiceV2";
import type { DomainAPIVulnerabilityDataProviderV1 } from "./DomainAPIVulnerabilityDataProviderV1";
import { DomainAPIVulnerabilityDataProviderV1FromJSON, DomainAPIVulnerabilityDataProviderV1FromJSONTyped, DomainAPIVulnerabilityDataProviderV1ToJSON } from "./DomainAPIVulnerabilityDataProviderV1";
import type { DomainAPIVulnerabilitySuppressionInfoV2 } from "./DomainAPIVulnerabilitySuppressionInfoV2";
import {
    DomainAPIVulnerabilitySuppressionInfoV2FromJSON,
    DomainAPIVulnerabilitySuppressionInfoV2FromJSONTyped,
    DomainAPIVulnerabilitySuppressionInfoV2ToJSON,
} from "./DomainAPIVulnerabilitySuppressionInfoV2";
import type { DomainAPIVulnerabilityHostFacetV2 } from "./DomainAPIVulnerabilityHostFacetV2";
import { DomainAPIVulnerabilityHostFacetV2FromJSON, DomainAPIVulnerabilityHostFacetV2FromJSONTyped, DomainAPIVulnerabilityHostFacetV2ToJSON } from "./DomainAPIVulnerabilityHostFacetV2";

/**
 *
 * @export
 * @interface DomainBaseAPIVulnerabilityV2
 */
export interface DomainBaseAPIVulnerabilityV2 {
    /**
     * Asset ID for which the vulnerability has been detected. For managed assets it can correspond to the sensor ID, for unmanaged assets can be a stand alone ID
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    aid: string;
    /**
     *
     * @type {DomainAPIVulnerabilityAppV2}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    app?: DomainAPIVulnerabilityAppV2;
    /**
     * Provide details related to the products for which a the vulnerability has been detected
     * @type {Array<DomainAPIVulnerabilityExtendedAppV2>}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    apps?: Array<DomainAPIVulnerabilityExtendedAppV2>;
    /**
     * Contains the customer identifier associated with the asset for which the vulnerability has been detected
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    cid: string;
    /**
     * A timestamp corresponding to the point in time when the vulnerability has no longer been detected (eg: it got fixed)
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    closedTimestamp?: string;
    /**
     * Represents the confidence level of a vulnerability
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    confidence?: string;
    /**
     * A timestamp corresponding to the point in time when the vulnerability has been created (detected) in our system
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    createdTimestamp: string;
    /**
     *
     * @type {DomainAPIVulnerabilityCVEDetailsFacetV2}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    cve?: DomainAPIVulnerabilityCVEDetailsFacetV2;
    /**
     * Contains information about the vulnerability data providers of this entity
     * @type {Array<DomainAPIVulnerabilityDataProviderV1>}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    dataProviders?: Array<DomainAPIVulnerabilityDataProviderV1>;
    /**
     *
     * @type {DomainAPIVulnerabilityHostFacetV2}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    hostInfo?: DomainAPIVulnerabilityHostFacetV2;
    /**
     * Vulnerability unique ID
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    id: string;
    /**
     *
     * @type {DomainAPIVulnerabilityRemediationFacetV2}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    remediation?: DomainAPIVulnerabilityRemediationFacetV2;
    /**
     * Contains details about the vulnerable services
     * @type {Array<DomainAPIVulnerabilityServiceV2>}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    services?: Array<DomainAPIVulnerabilityServiceV2>;
    /**
     * Current status of a vulnerability (open, closed, reopen)
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    status: string;
    /**
     *
     * @type {DomainAPIVulnerabilitySuppressionInfoV2}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    suppressionInfo?: DomainAPIVulnerabilitySuppressionInfoV2;
    /**
     * A timestamp corresponding to the point in time when a vulnerability's information or status have been updated
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    updatedTimestamp: string;
    /**
     * Dynamic label that contains the CVE ID if applicable, otherwise the vulnerability metadata ID or label from the provider
     * @type {string}
     * @memberof DomainBaseAPIVulnerabilityV2
     */
    vulnerabilityId?: string;
}

/**
 * Check if a given object implements the DomainBaseAPIVulnerabilityV2 interface.
 */
export function instanceOfDomainBaseAPIVulnerabilityV2(value: object): value is DomainBaseAPIVulnerabilityV2 {
    if (!("aid" in value) || value["aid"] === undefined) return false;
    if (!("cid" in value) || value["cid"] === undefined) return false;
    if (!("createdTimestamp" in value) || value["createdTimestamp"] === undefined) return false;
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("status" in value) || value["status"] === undefined) return false;
    if (!("updatedTimestamp" in value) || value["updatedTimestamp"] === undefined) return false;
    return true;
}

export function DomainBaseAPIVulnerabilityV2FromJSON(json: any): DomainBaseAPIVulnerabilityV2 {
    return DomainBaseAPIVulnerabilityV2FromJSONTyped(json, false);
}

export function DomainBaseAPIVulnerabilityV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainBaseAPIVulnerabilityV2 {
    if (json == null) {
        return json;
    }
    return {
        aid: json["aid"],
        app: json["app"] == null ? undefined : DomainAPIVulnerabilityAppV2FromJSON(json["app"]),
        apps: json["apps"] == null ? undefined : (json["apps"] as Array<any>).map(DomainAPIVulnerabilityExtendedAppV2FromJSON),
        cid: json["cid"],
        closedTimestamp: json["closed_timestamp"] == null ? undefined : json["closed_timestamp"],
        confidence: json["confidence"] == null ? undefined : json["confidence"],
        createdTimestamp: json["created_timestamp"],
        cve: json["cve"] == null ? undefined : DomainAPIVulnerabilityCVEDetailsFacetV2FromJSON(json["cve"]),
        dataProviders: json["data_providers"] == null ? undefined : (json["data_providers"] as Array<any>).map(DomainAPIVulnerabilityDataProviderV1FromJSON),
        hostInfo: json["host_info"] == null ? undefined : DomainAPIVulnerabilityHostFacetV2FromJSON(json["host_info"]),
        id: json["id"],
        remediation: json["remediation"] == null ? undefined : DomainAPIVulnerabilityRemediationFacetV2FromJSON(json["remediation"]),
        services: json["services"] == null ? undefined : (json["services"] as Array<any>).map(DomainAPIVulnerabilityServiceV2FromJSON),
        status: json["status"],
        suppressionInfo: json["suppression_info"] == null ? undefined : DomainAPIVulnerabilitySuppressionInfoV2FromJSON(json["suppression_info"]),
        updatedTimestamp: json["updated_timestamp"],
        vulnerabilityId: json["vulnerability_id"] == null ? undefined : json["vulnerability_id"],
    };
}

export function DomainBaseAPIVulnerabilityV2ToJSON(value?: DomainBaseAPIVulnerabilityV2 | null): any {
    if (value == null) {
        return value;
    }
    return {
        aid: value["aid"],
        app: DomainAPIVulnerabilityAppV2ToJSON(value["app"]),
        apps: value["apps"] == null ? undefined : (value["apps"] as Array<any>).map(DomainAPIVulnerabilityExtendedAppV2ToJSON),
        cid: value["cid"],
        closed_timestamp: value["closedTimestamp"],
        confidence: value["confidence"],
        created_timestamp: value["createdTimestamp"],
        cve: DomainAPIVulnerabilityCVEDetailsFacetV2ToJSON(value["cve"]),
        data_providers: value["dataProviders"] == null ? undefined : (value["dataProviders"] as Array<any>).map(DomainAPIVulnerabilityDataProviderV1ToJSON),
        host_info: DomainAPIVulnerabilityHostFacetV2ToJSON(value["hostInfo"]),
        id: value["id"],
        remediation: DomainAPIVulnerabilityRemediationFacetV2ToJSON(value["remediation"]),
        services: value["services"] == null ? undefined : (value["services"] as Array<any>).map(DomainAPIVulnerabilityServiceV2ToJSON),
        status: value["status"],
        suppression_info: DomainAPIVulnerabilitySuppressionInfoV2ToJSON(value["suppressionInfo"]),
        updated_timestamp: value["updatedTimestamp"],
        vulnerability_id: value["vulnerabilityId"],
    };
}
