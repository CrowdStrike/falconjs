/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainAPIVulnerabilityCVECISAInfo } from "./DomainAPIVulnerabilityCVECISAInfo";
import { DomainAPIVulnerabilityCVECISAInfoFromJSON, DomainAPIVulnerabilityCVECISAInfoFromJSONTyped, DomainAPIVulnerabilityCVECISAInfoToJSON } from "./DomainAPIVulnerabilityCVECISAInfo";

/**
 *
 * @export
 * @interface DomainAPIVulnerabilityCVEDetailsFacetV2
 */
export interface DomainAPIVulnerabilityCVEDetailsFacetV2 {
    /**
     * Contains a list of actors that are known for exploiting this vulnerability ot in the wild
     * @type {Array<string>}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    actors?: Array<string>;
    /**
     * The base score for a Common Vulnerability Enumeration (CVE) is a numerical value that represents the intrinsic severity and impact of a security vulnerability.
     * @type {number}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    baseScore?: number;
    /**
     *
     * @type {DomainAPIVulnerabilityCVECISAInfo}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    cisaInfo?: DomainAPIVulnerabilityCVECISAInfo;
    /**
     * Refers to description of the vulnerability
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    description?: string;
    /**
     * Exploit status refers to the current state or availability of known exploits for a specific vulnerability, indicating whether there are known techniques or tools to leverage the vulnerability in an attack.
     * @type {number}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    exploitStatus?: number;
    /**
     * Represents a numerical value that indicates the relative ease or difficulty for an attacker to exploit a vulnerability
     * @type {number}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    exploitabilityScore?: number;
    /**
     * Expert.AI score on the vulnerability
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    exprtRating?: string;
    /**
     *
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    id: string;
    /**
     * Refers to a numerical value that represents the potential impact or severity of a vulnerability when it is successfully exploited
     * @type {number}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    impactScore?: number;
    /**
     * Vulnerability name
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    name?: string;
    /**
     * Refers to a point in time when the vulnerability has been disclosed
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    publishedDate?: string;
    /**
     * Refers to one or more references with more details about the vulnerability
     * @type {Array<string>}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    references?: Array<string>;
    /**
     * Remediation level indicates the required effort to mitigate a security vulnerability, ranging from official fixes to unavailable remedies
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    remediationLevel?: string;
    /**
     * Severity refers to the level of impact or potential harm caused by a security vulnerability. It is often assessed using metrics such as the CVSS base score, which takes into account factors such as exploitability, impact on confidentiality, integrity, and availability, and other relevant parameters to determine the severity level of a vulnerability.
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    severity?: string;
    /**
     * Corresponds to a point in time when Spotlight offered support for detecting a specific vulnerability
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    spotlightPublishedDate?: string;
    /**
     * The types of vulnerability. Can be of: Vulnerability, Misconfiguration, and Unsupported software
     * @type {Array<string>}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    types?: Array<string>;
    /**
     * Refers to the vector of attack or the specific method or path through which an attacker can exploit a vulnerability
     * @type {string}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    vector?: string;
    /**
     * Refers to one or more URLs that points to vendor advisories
     * @type {Array<string>}
     * @memberof DomainAPIVulnerabilityCVEDetailsFacetV2
     */
    vendorAdvisory?: Array<string>;
}

/**
 * Check if a given object implements the DomainAPIVulnerabilityCVEDetailsFacetV2 interface.
 */
export function instanceOfDomainAPIVulnerabilityCVEDetailsFacetV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DomainAPIVulnerabilityCVEDetailsFacetV2FromJSON(json: any): DomainAPIVulnerabilityCVEDetailsFacetV2 {
    return DomainAPIVulnerabilityCVEDetailsFacetV2FromJSONTyped(json, false);
}

export function DomainAPIVulnerabilityCVEDetailsFacetV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainAPIVulnerabilityCVEDetailsFacetV2 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        actors: !exists(json, "actors") ? undefined : json["actors"],
        baseScore: !exists(json, "base_score") ? undefined : json["base_score"],
        cisaInfo: !exists(json, "cisa_info") ? undefined : DomainAPIVulnerabilityCVECISAInfoFromJSON(json["cisa_info"]),
        description: !exists(json, "description") ? undefined : json["description"],
        exploitStatus: !exists(json, "exploit_status") ? undefined : json["exploit_status"],
        exploitabilityScore: !exists(json, "exploitability_score") ? undefined : json["exploitability_score"],
        exprtRating: !exists(json, "exprt_rating") ? undefined : json["exprt_rating"],
        id: json["id"],
        impactScore: !exists(json, "impact_score") ? undefined : json["impact_score"],
        name: !exists(json, "name") ? undefined : json["name"],
        publishedDate: !exists(json, "published_date") ? undefined : json["published_date"],
        references: !exists(json, "references") ? undefined : json["references"],
        remediationLevel: !exists(json, "remediation_level") ? undefined : json["remediation_level"],
        severity: !exists(json, "severity") ? undefined : json["severity"],
        spotlightPublishedDate: !exists(json, "spotlight_published_date") ? undefined : json["spotlight_published_date"],
        types: !exists(json, "types") ? undefined : json["types"],
        vector: !exists(json, "vector") ? undefined : json["vector"],
        vendorAdvisory: !exists(json, "vendor_advisory") ? undefined : json["vendor_advisory"],
    };
}

export function DomainAPIVulnerabilityCVEDetailsFacetV2ToJSON(value?: DomainAPIVulnerabilityCVEDetailsFacetV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        actors: value.actors,
        base_score: value.baseScore,
        cisa_info: DomainAPIVulnerabilityCVECISAInfoToJSON(value.cisaInfo),
        description: value.description,
        exploit_status: value.exploitStatus,
        exploitability_score: value.exploitabilityScore,
        exprt_rating: value.exprtRating,
        id: value.id,
        impact_score: value.impactScore,
        name: value.name,
        published_date: value.publishedDate,
        references: value.references,
        remediation_level: value.remediationLevel,
        severity: value.severity,
        spotlight_published_date: value.spotlightPublishedDate,
        types: value.types,
        vector: value.vector,
        vendor_advisory: value.vendorAdvisory,
    };
}
