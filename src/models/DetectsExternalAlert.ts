/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface DetectsExternalAlert
 */
export interface DetectsExternalAlert {
    [key: string]: any | any;
    /**
     * Device or sensor ID for which the Alert was generated
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    agentId: string;
    /**
     * Common linkage between multiple Alerts that belong to the same detection bouquet
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    aggregateId: string;
    /**
     * Name of the person this Alert is assigned to
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    assignedToName: string;
    /**
     * UserID to which this Alert is assigned to
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    assignedToUid: string;
    /**
     * UUID to which this Alert is assigned to
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    assignedToUuid: string;
    /**
     * Unique ID of CrowdStrike customers
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    cid: string;
    /**
     * An opaque internal identifier that can uniquely identify an Alert
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    compositeId: string;
    /**
     * Confidence is a 1-100 integer value denoting the confidence that, when this Alert fires, it is indicative of malicious activity
     * @type {number}
     * @memberof DetectsExternalAlert
     */
    confidence: number;
    /**
     * indicates when ThreatGraph was crawled to gather info for this alert creation/update
     * @type {Date}
     * @memberof DetectsExternalAlert
     */
    crawledTimestamp: Date;
    /**
     * indicates when the Alert was first written to backend store
     * @type {Date}
     * @memberof DetectsExternalAlert
     */
    createdTimestamp: Date;
    /**
     * Data Domains represents domains to which this alert belongs to
     * @type {Array<string>}
     * @memberof DetectsExternalAlert
     */
    dataDomains: Array<string>;
    /**
     * Short, customer-visible summary of the detected activity
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    description: string;
    /**
     * Customer visible name for the Alert&#39;s pattern
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    displayName: string;
    /**
     * Boolean to know if we sent email regarding this Alert
     * @type {boolean}
     * @memberof DetectsExternalAlert
     */
    emailSent: boolean;
    /**
     * Boolean indicating if this Alert is internal or external
     * @type {boolean}
     * @memberof DetectsExternalAlert
     */
    external: boolean;
    /**
     * Vertex key which triggers the formation of the Alert
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    id: string;
    /**
     * Pattern Name coming either from Taxonomy or directly from the ingested Alert
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    name: string;
    /**
     * End goal that an attack adversary intends to achieve according to MITRE
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    objective: string;
    /**
     * Taxonomy patternID for this Alert
     * @type {number}
     * @memberof DetectsExternalAlert
     */
    patternId: number;
    /**
     * Platform that this Alert was triggered on e.g. Android, Windows, etc..
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    platform: string;
    /**
     * Product specifies the SKU that this Alert belongs to e.g. mobile, idp, epp
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    product: string;
    /**
     * Scenario was used pre-Handrails to display additional killchain context for UI alerts. With handrails, this field is mostly  obsolete in favor of tactic/technique. Still, it can be useful for determining specific pattern types that are not straightforward to distinguish from other fields alone
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    scenario: string;
    /**
     * Seconds To Resolved represents the seconds elapsed since this alert has been resolved
     * @type {number}
     * @memberof DetectsExternalAlert
     */
    secondsToResolved: number;
    /**
     * Seconds To Triage represents the seconds elapsed since this alert has been triaged
     * @type {number}
     * @memberof DetectsExternalAlert
     */
    secondsToTriaged: number;
    /**
     * Severity is also a 1-100 integer value, but unlike confidence severity impacts how a Alert is displayed in the UI
     * @type {number}
     * @memberof DetectsExternalAlert
     */
    severity: number;
    /**
     * Severity name is a UI friendly bucketing of the severity integer
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    severityName: string;
    /**
     * Boolean indicating if this Alert will be shown in the UI or if it&#39;s hidden&#39;
     * @type {boolean}
     * @memberof DetectsExternalAlert
     */
    showInUi: boolean;
    /**
     * Source Products are products that produced events which contributed to this alert
     * @type {Array<string>}
     * @memberof DetectsExternalAlert
     */
    sourceProducts: Array<string>;
    /**
     * Source Vendors are vendors that produced events which contributed to this alert
     * @type {Array<string>}
     * @memberof DetectsExternalAlert
     */
    sourceVendors: Array<string>;
    /**
     * Could be one of the following - New, closed, in_progress, reopened
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    status: string;
    /**
     * Tactic and Technique are references to MITRE ATT&amp;CK, which is a public framework for tracking and modeling adversary tools techniques and procedures
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    tactic: string;
    /**
     * Unique ID for the tactic seen in the Alert
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    tacticId: string;
    /**
     * Tags are string values associated with the alert that can be added or removed through the API
     * @type {Array<string>}
     * @memberof DetectsExternalAlert
     */
    tags: Array<string>;
    /**
     * Tactic and Technique are references to MITRE ATT&amp;CK, which is a public framework for tracking and modeling adversary tools techniques and procedures
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    technique: string;
    /**
     * Unique ID for the technique seen in the Alert
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    techniqueId: string;
    /**
     * stored value coming in directly from the ingested event or set by cloud in the absence of it
     * @type {Date}
     * @memberof DetectsExternalAlert
     */
    timestamp: Date;
    /**
     * Type of definition Detections Extensibility use. Keyed-off of Pattern of the incoming events/Alerts
     * @type {string}
     * @memberof DetectsExternalAlert
     */
    type: string;
    /**
     * indicates when the Alert was last modified
     * @type {Date}
     * @memberof DetectsExternalAlert
     */
    updatedTimestamp: Date;
}

/**
 * Check if a given object implements the DetectsExternalAlert interface.
 */
export function instanceOfDetectsExternalAlert(value: object): value is DetectsExternalAlert {
    if (!("agentId" in value) || value["agentId"] === undefined) return false;
    if (!("aggregateId" in value) || value["aggregateId"] === undefined) return false;
    if (!("assignedToName" in value) || value["assignedToName"] === undefined) return false;
    if (!("assignedToUid" in value) || value["assignedToUid"] === undefined) return false;
    if (!("assignedToUuid" in value) || value["assignedToUuid"] === undefined) return false;
    if (!("cid" in value) || value["cid"] === undefined) return false;
    if (!("compositeId" in value) || value["compositeId"] === undefined) return false;
    if (!("confidence" in value) || value["confidence"] === undefined) return false;
    if (!("crawledTimestamp" in value) || value["crawledTimestamp"] === undefined) return false;
    if (!("createdTimestamp" in value) || value["createdTimestamp"] === undefined) return false;
    if (!("dataDomains" in value) || value["dataDomains"] === undefined) return false;
    if (!("description" in value) || value["description"] === undefined) return false;
    if (!("displayName" in value) || value["displayName"] === undefined) return false;
    if (!("emailSent" in value) || value["emailSent"] === undefined) return false;
    if (!("external" in value) || value["external"] === undefined) return false;
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("name" in value) || value["name"] === undefined) return false;
    if (!("objective" in value) || value["objective"] === undefined) return false;
    if (!("patternId" in value) || value["patternId"] === undefined) return false;
    if (!("platform" in value) || value["platform"] === undefined) return false;
    if (!("product" in value) || value["product"] === undefined) return false;
    if (!("scenario" in value) || value["scenario"] === undefined) return false;
    if (!("secondsToResolved" in value) || value["secondsToResolved"] === undefined) return false;
    if (!("secondsToTriaged" in value) || value["secondsToTriaged"] === undefined) return false;
    if (!("severity" in value) || value["severity"] === undefined) return false;
    if (!("severityName" in value) || value["severityName"] === undefined) return false;
    if (!("showInUi" in value) || value["showInUi"] === undefined) return false;
    if (!("sourceProducts" in value) || value["sourceProducts"] === undefined) return false;
    if (!("sourceVendors" in value) || value["sourceVendors"] === undefined) return false;
    if (!("status" in value) || value["status"] === undefined) return false;
    if (!("tactic" in value) || value["tactic"] === undefined) return false;
    if (!("tacticId" in value) || value["tacticId"] === undefined) return false;
    if (!("tags" in value) || value["tags"] === undefined) return false;
    if (!("technique" in value) || value["technique"] === undefined) return false;
    if (!("techniqueId" in value) || value["techniqueId"] === undefined) return false;
    if (!("timestamp" in value) || value["timestamp"] === undefined) return false;
    if (!("type" in value) || value["type"] === undefined) return false;
    if (!("updatedTimestamp" in value) || value["updatedTimestamp"] === undefined) return false;
    return true;
}

export function DetectsExternalAlertFromJSON(json: any): DetectsExternalAlert {
    return DetectsExternalAlertFromJSONTyped(json, false);
}

export function DetectsExternalAlertFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetectsExternalAlert {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        agentId: json["agent_id"],
        aggregateId: json["aggregate_id"],
        assignedToName: json["assigned_to_name"],
        assignedToUid: json["assigned_to_uid"],
        assignedToUuid: json["assigned_to_uuid"],
        cid: json["cid"],
        compositeId: json["composite_id"],
        confidence: json["confidence"],
        crawledTimestamp: new Date(json["crawled_timestamp"]),
        createdTimestamp: new Date(json["created_timestamp"]),
        dataDomains: json["data_domains"],
        description: json["description"],
        displayName: json["display_name"],
        emailSent: json["email_sent"],
        external: json["external"],
        id: json["id"],
        name: json["name"],
        objective: json["objective"],
        patternId: json["pattern_id"],
        platform: json["platform"],
        product: json["product"],
        scenario: json["scenario"],
        secondsToResolved: json["seconds_to_resolved"],
        secondsToTriaged: json["seconds_to_triaged"],
        severity: json["severity"],
        severityName: json["severity_name"],
        showInUi: json["show_in_ui"],
        sourceProducts: json["source_products"],
        sourceVendors: json["source_vendors"],
        status: json["status"],
        tactic: json["tactic"],
        tacticId: json["tactic_id"],
        tags: json["tags"],
        technique: json["technique"],
        techniqueId: json["technique_id"],
        timestamp: new Date(json["timestamp"]),
        type: json["type"],
        updatedTimestamp: new Date(json["updated_timestamp"]),
    };
}

export function DetectsExternalAlertToJSON(value?: DetectsExternalAlert | null): any {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        agent_id: value["agentId"],
        aggregate_id: value["aggregateId"],
        assigned_to_name: value["assignedToName"],
        assigned_to_uid: value["assignedToUid"],
        assigned_to_uuid: value["assignedToUuid"],
        cid: value["cid"],
        composite_id: value["compositeId"],
        confidence: value["confidence"],
        crawled_timestamp: value["crawledTimestamp"].toISOString(),
        created_timestamp: value["createdTimestamp"].toISOString(),
        data_domains: value["dataDomains"],
        description: value["description"],
        display_name: value["displayName"],
        email_sent: value["emailSent"],
        external: value["external"],
        id: value["id"],
        name: value["name"],
        objective: value["objective"],
        pattern_id: value["patternId"],
        platform: value["platform"],
        product: value["product"],
        scenario: value["scenario"],
        seconds_to_resolved: value["secondsToResolved"],
        seconds_to_triaged: value["secondsToTriaged"],
        severity: value["severity"],
        severity_name: value["severityName"],
        show_in_ui: value["showInUi"],
        source_products: value["sourceProducts"],
        source_vendors: value["sourceVendors"],
        status: value["status"],
        tactic: value["tactic"],
        tactic_id: value["tacticId"],
        tags: value["tags"],
        technique: value["technique"],
        technique_id: value["techniqueId"],
        timestamp: value["timestamp"].toISOString(),
        type: value["type"],
        updated_timestamp: value["updatedTimestamp"].toISOString(),
    };
}
