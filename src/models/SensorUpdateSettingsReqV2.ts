/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { PolicySensorUpdateScheduler } from "./PolicySensorUpdateScheduler";
import { PolicySensorUpdateSchedulerFromJSON, PolicySensorUpdateSchedulerFromJSONTyped, PolicySensorUpdateSchedulerToJSON } from "./PolicySensorUpdateScheduler";
import type { SensorUpdateBuildReqV1 } from "./SensorUpdateBuildReqV1";
import { SensorUpdateBuildReqV1FromJSON, SensorUpdateBuildReqV1FromJSONTyped, SensorUpdateBuildReqV1ToJSON } from "./SensorUpdateBuildReqV1";

/**
 *
 * @export
 * @interface SensorUpdateSettingsReqV2
 */
export interface SensorUpdateSettingsReqV2 {
    /**
     * The target build to apply to the policy
     * @type {string}
     * @memberof SensorUpdateSettingsReqV2
     */
    build?: string;
    /**
     *
     * @type {PolicySensorUpdateScheduler}
     * @memberof SensorUpdateSettingsReqV2
     */
    scheduler: PolicySensorUpdateScheduler;
    /**
     * If true, early adopter builds will be visible on the sensor update policy page
     * @type {boolean}
     * @memberof SensorUpdateSettingsReqV2
     */
    showEarlyAdopterBuilds?: boolean;
    /**
     * The uninstall protection state to apply to the policy
     * @type {string}
     * @memberof SensorUpdateSettingsReqV2
     */
    uninstallProtection?: SensorUpdateSettingsReqV2UninstallProtectionEnum;
    /**
     *
     * @type {Array<SensorUpdateBuildReqV1>}
     * @memberof SensorUpdateSettingsReqV2
     */
    variants: Array<SensorUpdateBuildReqV1>;
}

/**
 * @export
 */
export const SensorUpdateSettingsReqV2UninstallProtectionEnum = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
    MaintenanceMode: "MAINTENANCE_MODE",
    Ignore: "IGNORE",
    Unknown: "UNKNOWN",
} as const;
export type SensorUpdateSettingsReqV2UninstallProtectionEnum = (typeof SensorUpdateSettingsReqV2UninstallProtectionEnum)[keyof typeof SensorUpdateSettingsReqV2UninstallProtectionEnum];

/**
 * Check if a given object implements the SensorUpdateSettingsReqV2 interface.
 */
export function instanceOfSensorUpdateSettingsReqV2(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "scheduler" in value;
    isInstance = isInstance && "variants" in value;

    return isInstance;
}

export function SensorUpdateSettingsReqV2FromJSON(json: any): SensorUpdateSettingsReqV2 {
    return SensorUpdateSettingsReqV2FromJSONTyped(json, false);
}

export function SensorUpdateSettingsReqV2FromJSONTyped(json: any, ignoreDiscriminator: boolean): SensorUpdateSettingsReqV2 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        build: !exists(json, "build") ? undefined : json["build"],
        scheduler: PolicySensorUpdateSchedulerFromJSON(json["scheduler"]),
        showEarlyAdopterBuilds: !exists(json, "show_early_adopter_builds") ? undefined : json["show_early_adopter_builds"],
        uninstallProtection: !exists(json, "uninstall_protection") ? undefined : json["uninstall_protection"],
        variants: (json["variants"] as Array<any>).map(SensorUpdateBuildReqV1FromJSON),
    };
}

export function SensorUpdateSettingsReqV2ToJSON(value?: SensorUpdateSettingsReqV2 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        build: value.build,
        scheduler: PolicySensorUpdateSchedulerToJSON(value.scheduler),
        show_early_adopter_builds: value.showEarlyAdopterBuilds,
        uninstall_protection: value.uninstallProtection,
        variants: (value.variants as Array<any>).map(SensorUpdateBuildReqV1ToJSON),
    };
}
