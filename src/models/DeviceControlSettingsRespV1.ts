/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceControlUSBCustomNotifications } from './DeviceControlUSBCustomNotifications';
import {
    DeviceControlUSBCustomNotificationsFromJSON,
    DeviceControlUSBCustomNotificationsFromJSONTyped,
    DeviceControlUSBCustomNotificationsToJSON,
} from './DeviceControlUSBCustomNotifications';
import type { DeviceControlUSBClassExceptionsResponse } from './DeviceControlUSBClassExceptionsResponse';
import {
    DeviceControlUSBClassExceptionsResponseFromJSON,
    DeviceControlUSBClassExceptionsResponseFromJSONTyped,
    DeviceControlUSBClassExceptionsResponseToJSON,
} from './DeviceControlUSBClassExceptionsResponse';

/**
 * 
 * @export
 * @interface DeviceControlSettingsRespV1
 */
export interface DeviceControlSettingsRespV1 {
    /**
     * List of class_settings this policy applies to
     * @type {Array<DeviceControlUSBClassExceptionsResponse>}
     * @memberof DeviceControlSettingsRespV1
     */
    classes: Array<DeviceControlUSBClassExceptionsResponse>;
    /**
     * 
     * @type {DeviceControlUSBCustomNotifications}
     * @memberof DeviceControlSettingsRespV1
     */
    customNotifications?: DeviceControlUSBCustomNotifications;
    /**
     * Does the end user receives a notification when the policy is violated
     * @type {string}
     * @memberof DeviceControlSettingsRespV1
     */
    endUserNotification: DeviceControlSettingsRespV1EndUserNotificationEnum;
    /**
     * [How] is this policy enforced
     * @type {string}
     * @memberof DeviceControlSettingsRespV1
     */
    enforcementMode: DeviceControlSettingsRespV1EnforcementModeEnum;
    /**
     * Is file metadata processor enabled or not? true|false
     * @type {boolean}
     * @memberof DeviceControlSettingsRespV1
     */
    enhancedFileMetadata: boolean;
}


/**
 * @export
 */
export const DeviceControlSettingsRespV1EndUserNotificationEnum = {
    Silent: 'SILENT',
    NotifyUser: 'NOTIFY_USER'
} as const;
export type DeviceControlSettingsRespV1EndUserNotificationEnum = typeof DeviceControlSettingsRespV1EndUserNotificationEnum[keyof typeof DeviceControlSettingsRespV1EndUserNotificationEnum];

/**
 * @export
 */
export const DeviceControlSettingsRespV1EnforcementModeEnum = {
    MonitorOnly: 'MONITOR_ONLY',
    MonitorEnforce: 'MONITOR_ENFORCE',
    Off: 'OFF'
} as const;
export type DeviceControlSettingsRespV1EnforcementModeEnum = typeof DeviceControlSettingsRespV1EnforcementModeEnum[keyof typeof DeviceControlSettingsRespV1EnforcementModeEnum];


/**
 * Check if a given object implements the DeviceControlSettingsRespV1 interface.
 */
export function instanceOfDeviceControlSettingsRespV1(value: object): value is DeviceControlSettingsRespV1 {
    if (!('classes' in value) || value['classes'] === undefined) return false;
    if (!('endUserNotification' in value) || value['endUserNotification'] === undefined) return false;
    if (!('enforcementMode' in value) || value['enforcementMode'] === undefined) return false;
    if (!('enhancedFileMetadata' in value) || value['enhancedFileMetadata'] === undefined) return false;
    return true;
}

export function DeviceControlSettingsRespV1FromJSON(json: any): DeviceControlSettingsRespV1 {
    return DeviceControlSettingsRespV1FromJSONTyped(json, false);
}

export function DeviceControlSettingsRespV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceControlSettingsRespV1 {
    if (json == null) {
        return json;
    }
    return {
        
        'classes': ((json['classes'] as Array<any>).map(DeviceControlUSBClassExceptionsResponseFromJSON)),
        'customNotifications': json['custom_notifications'] == null ? undefined : DeviceControlUSBCustomNotificationsFromJSON(json['custom_notifications']),
        'endUserNotification': json['end_user_notification'],
        'enforcementMode': json['enforcement_mode'],
        'enhancedFileMetadata': json['enhanced_file_metadata'],
    };
}

export function DeviceControlSettingsRespV1ToJSON(value?: DeviceControlSettingsRespV1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'classes': ((value['classes'] as Array<any>).map(DeviceControlUSBClassExceptionsResponseToJSON)),
        'custom_notifications': DeviceControlUSBCustomNotificationsToJSON(value['customNotifications']),
        'end_user_notification': value['endUserNotification'],
        'enforcement_mode': value['enforcementMode'],
        'enhanced_file_metadata': value['enhancedFileMetadata'],
    };
}

