/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainDiscoverAPIApplicationBrowserExtensionInstallation } from "./DomainDiscoverAPIApplicationBrowserExtensionInstallation";
import {
    DomainDiscoverAPIApplicationBrowserExtensionInstallationFromJSON,
    DomainDiscoverAPIApplicationBrowserExtensionInstallationFromJSONTyped,
    DomainDiscoverAPIApplicationBrowserExtensionInstallationToJSON,
} from "./DomainDiscoverAPIApplicationBrowserExtensionInstallation";

/**
 * Uniquely identifies a browser extension.
 * @export
 * @interface DomainDiscoverAPIApplicationBrowserExtension
 */
export interface DomainDiscoverAPIApplicationBrowserExtension {
    /**
     * The name of the browser that's running the extension
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    browserName?: string;
    /**
     * Describes if the extension is enabled on the host on at least one browser profile
     * @type {boolean}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    enabled: boolean;
    /**
     * The unique ID of the browser extension.
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    id: string;
    /**
     * The installations of this browser extension for each browser profile
     * @type {Array<DomainDiscoverAPIApplicationBrowserExtensionInstallation>}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    installations?: Array<DomainDiscoverAPIApplicationBrowserExtensionInstallation>;
    /**
     * The computed serverity of all permissions requested by the browser extension
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    permissionSeverity?: string;
    /**
     * The browser permissions the extension requires to run
     * @type {Array<string>}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    permissions?: Array<string>;
    /**
     * The calculated browser webstore URL for this extension
     * @type {string}
     * @memberof DomainDiscoverAPIApplicationBrowserExtension
     */
    storeUrl?: string;
}

/**
 * Check if a given object implements the DomainDiscoverAPIApplicationBrowserExtension interface.
 */
export function instanceOfDomainDiscoverAPIApplicationBrowserExtension(value: object): value is DomainDiscoverAPIApplicationBrowserExtension {
    if (!("enabled" in value) || value["enabled"] === undefined) return false;
    if (!("id" in value) || value["id"] === undefined) return false;
    return true;
}

export function DomainDiscoverAPIApplicationBrowserExtensionFromJSON(json: any): DomainDiscoverAPIApplicationBrowserExtension {
    return DomainDiscoverAPIApplicationBrowserExtensionFromJSONTyped(json, false);
}

export function DomainDiscoverAPIApplicationBrowserExtensionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDiscoverAPIApplicationBrowserExtension {
    if (json == null) {
        return json;
    }
    return {
        browserName: json["browser_name"] == null ? undefined : json["browser_name"],
        enabled: json["enabled"],
        id: json["id"],
        installations: json["installations"] == null ? undefined : (json["installations"] as Array<any>).map(DomainDiscoverAPIApplicationBrowserExtensionInstallationFromJSON),
        permissionSeverity: json["permission_severity"] == null ? undefined : json["permission_severity"],
        permissions: json["permissions"] == null ? undefined : json["permissions"],
        storeUrl: json["store_url"] == null ? undefined : json["store_url"],
    };
}

export function DomainDiscoverAPIApplicationBrowserExtensionToJSON(value?: DomainDiscoverAPIApplicationBrowserExtension | null): any {
    if (value == null) {
        return value;
    }
    return {
        browser_name: value["browserName"],
        enabled: value["enabled"],
        id: value["id"],
        installations: value["installations"] == null ? undefined : (value["installations"] as Array<any>).map(DomainDiscoverAPIApplicationBrowserExtensionInstallationToJSON),
        permission_severity: value["permissionSeverity"],
        permissions: value["permissions"],
        store_url: value["storeUrl"],
    };
}
