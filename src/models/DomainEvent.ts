/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainDDOSAttackSource } from "./DomainDDOSAttackSource";
import { DomainDDOSAttackSourceFromJSON, DomainDDOSAttackSourceFromJSONTyped, DomainDDOSAttackSourceToJSON } from "./DomainDDOSAttackSource";
import type { DomainPastebinTextSource } from "./DomainPastebinTextSource";
import { DomainPastebinTextSourceFromJSON, DomainPastebinTextSourceFromJSONTyped, DomainPastebinTextSourceToJSON } from "./DomainPastebinTextSource";
import type { DomainMatchedRule } from "./DomainMatchedRule";
import { DomainMatchedRuleFromJSON, DomainMatchedRuleFromJSONTyped, DomainMatchedRuleToJSON } from "./DomainMatchedRule";
import type { DomainTweetSource } from "./DomainTweetSource";
import { DomainTweetSourceFromJSON, DomainTweetSourceFromJSONTyped, DomainTweetSourceToJSON } from "./DomainTweetSource";
import type { DomainBotnetConfigSource } from "./DomainBotnetConfigSource";
import { DomainBotnetConfigSourceFromJSON, DomainBotnetConfigSourceFromJSONTyped, DomainBotnetConfigSourceToJSON } from "./DomainBotnetConfigSource";

/**
 *
 * @export
 * @interface DomainEvent
 */
export interface DomainEvent {
    /**
     * The raw body of the event
     * @type {string}
     * @memberof DomainEvent
     */
    body: string;
    /**
     * By default, event bodies are truncated to 64kb and bodyIsTruncated is set to True. For event bodies larger than 64kb, call the /events-full-body endpoint with the respective eventId
     * @type {boolean}
     * @memberof DomainEvent
     */
    bodyIsTruncated: boolean;
    /**
     * Link to the event, can be missing
     * @type {string}
     * @memberof DomainEvent
     */
    bodyLink?: string;
    /**
     *
     * @type {DomainBotnetConfigSource}
     * @memberof DomainEvent
     */
    botnetConfigSource?: DomainBotnetConfigSource;
    /**
     * The date the event was created (in UTC format)
     * @type {string}
     * @memberof DomainEvent
     */
    createdDate: string;
    /**
     *
     * @type {DomainDDOSAttackSource}
     * @memberof DomainEvent
     */
    ddosAttackSource?: DomainDDOSAttackSource;
    /**
     * The type of event. One of `TweetEvent`, `CodePasteEvent`, `BotnetConfigEvent`, `DdosAttackEvent`
     * @type {string}
     * @memberof DomainEvent
     */
    eventType: string;
    /**
     * The event's fingerprint
     * @type {string}
     * @memberof DomainEvent
     */
    fingerprint: string;
    /**
     * The unique event ID
     * @type {string}
     * @memberof DomainEvent
     */
    id: string;
    /**
     * List of objects with rules that matched the event
     * @type {Array<DomainMatchedRule>}
     * @memberof DomainEvent
     */
    matchedRules?: Array<DomainMatchedRule>;
    /**
     *
     * @type {DomainPastebinTextSource}
     * @memberof DomainEvent
     */
    pastebinTextSource?: DomainPastebinTextSource;
    /**
     * A list of tags summarizing event content
     * @type {Array<string>}
     * @memberof DomainEvent
     */
    tags?: Array<string>;
    /**
     *
     * @type {DomainTweetSource}
     * @memberof DomainEvent
     */
    tweetSource?: DomainTweetSource;
    /**
     * The date the event was last updated (in UTC format)
     * @type {string}
     * @memberof DomainEvent
     */
    updatedDate: string;
}

/**
 * Check if a given object implements the DomainEvent interface.
 */
export function instanceOfDomainEvent(value: object): value is DomainEvent {
    if (!("body" in value) || value["body"] === undefined) return false;
    if (!("bodyIsTruncated" in value) || value["bodyIsTruncated"] === undefined) return false;
    if (!("createdDate" in value) || value["createdDate"] === undefined) return false;
    if (!("eventType" in value) || value["eventType"] === undefined) return false;
    if (!("fingerprint" in value) || value["fingerprint"] === undefined) return false;
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("updatedDate" in value) || value["updatedDate"] === undefined) return false;
    return true;
}

export function DomainEventFromJSON(json: any): DomainEvent {
    return DomainEventFromJSONTyped(json, false);
}

export function DomainEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainEvent {
    if (json == null) {
        return json;
    }
    return {
        body: json["body"],
        bodyIsTruncated: json["body_is_truncated"],
        bodyLink: json["body_link"] == null ? undefined : json["body_link"],
        botnetConfigSource: json["botnet_config_source"] == null ? undefined : DomainBotnetConfigSourceFromJSON(json["botnet_config_source"]),
        createdDate: json["created_date"],
        ddosAttackSource: json["ddos_attack_source"] == null ? undefined : DomainDDOSAttackSourceFromJSON(json["ddos_attack_source"]),
        eventType: json["event_type"],
        fingerprint: json["fingerprint"],
        id: json["id"],
        matchedRules: json["matched_rules"] == null ? undefined : (json["matched_rules"] as Array<any>).map(DomainMatchedRuleFromJSON),
        pastebinTextSource: json["pastebin_text_source"] == null ? undefined : DomainPastebinTextSourceFromJSON(json["pastebin_text_source"]),
        tags: json["tags"] == null ? undefined : json["tags"],
        tweetSource: json["tweet_source"] == null ? undefined : DomainTweetSourceFromJSON(json["tweet_source"]),
        updatedDate: json["updated_date"],
    };
}

export function DomainEventToJSON(value?: DomainEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        body: value["body"],
        body_is_truncated: value["bodyIsTruncated"],
        body_link: value["bodyLink"],
        botnet_config_source: DomainBotnetConfigSourceToJSON(value["botnetConfigSource"]),
        created_date: value["createdDate"],
        ddos_attack_source: DomainDDOSAttackSourceToJSON(value["ddosAttackSource"]),
        event_type: value["eventType"],
        fingerprint: value["fingerprint"],
        id: value["id"],
        matched_rules: value["matchedRules"] == null ? undefined : (value["matchedRules"] as Array<any>).map(DomainMatchedRuleToJSON),
        pastebin_text_source: DomainPastebinTextSourceToJSON(value["pastebinTextSource"]),
        tags: value["tags"],
        tweet_source: DomainTweetSourceToJSON(value["tweetSource"]),
        updated_date: value["updatedDate"],
    };
}
