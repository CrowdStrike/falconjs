/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DomainDDOSTargetDetails } from "./DomainDDOSTargetDetails";
import { DomainDDOSTargetDetailsFromJSON, DomainDDOSTargetDetailsFromJSONTyped, DomainDDOSTargetDetailsToJSON } from "./DomainDDOSTargetDetails";

/**
 *
 * @export
 * @interface DomainDDOSAttackSource
 */
export interface DomainDDOSAttackSource {
    /**
     * The type of attack. One of `Amplification`, `Botnet`, `Other`
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    attackType: string;
    /**
     * The confidence level. One of `Low`, `Medium`, `High`
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    confidence: string;
    /**
     * The duration of the attack in seconds
     * @type {number}
     * @memberof DomainDDOSAttackSource
     */
    duration: number;
    /**
     * The hash over target and date
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    key: string;
    /**
     * The network protocol used. One of `TCP`, `UDP`, `ICMP`, `Other`
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    networkProtocol: string;
    /**
     * The protocols used in the attack
     * @type {Array<string>}
     * @memberof DomainDDOSAttackSource
     */
    protocols: Array<string>;
    /**
     * The number of requests against the target
     * @type {number}
     * @memberof DomainDDOSAttackSource
     */
    requests: number;
    /**
     * The ISO-8601 date for the attack start time
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    startTime: string;
    /**
     * The target's IPv4/6 address or hostname
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    target: string;
    /**
     *
     * @type {DomainDDOSTargetDetails}
     * @memberof DomainDDOSAttackSource
     */
    targetDetails: DomainDDOSTargetDetails;
    /**
     * The target's domain
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    targetDomain: string;
    /**
     * The target's IPv4/6 address
     * @type {string}
     * @memberof DomainDDOSAttackSource
     */
    targetIp: string;
    /**
     * List of ports where the attack took place
     * @type {Array<number>}
     * @memberof DomainDDOSAttackSource
     */
    targetPorts: Array<number>;
}

/**
 * Check if a given object implements the DomainDDOSAttackSource interface.
 */
export function instanceOfDomainDDOSAttackSource(value: object): value is DomainDDOSAttackSource {
    if (!("attackType" in value) || value["attackType"] === undefined) return false;
    if (!("confidence" in value) || value["confidence"] === undefined) return false;
    if (!("duration" in value) || value["duration"] === undefined) return false;
    if (!("key" in value) || value["key"] === undefined) return false;
    if (!("networkProtocol" in value) || value["networkProtocol"] === undefined) return false;
    if (!("protocols" in value) || value["protocols"] === undefined) return false;
    if (!("requests" in value) || value["requests"] === undefined) return false;
    if (!("startTime" in value) || value["startTime"] === undefined) return false;
    if (!("target" in value) || value["target"] === undefined) return false;
    if (!("targetDetails" in value) || value["targetDetails"] === undefined) return false;
    if (!("targetDomain" in value) || value["targetDomain"] === undefined) return false;
    if (!("targetIp" in value) || value["targetIp"] === undefined) return false;
    if (!("targetPorts" in value) || value["targetPorts"] === undefined) return false;
    return true;
}

export function DomainDDOSAttackSourceFromJSON(json: any): DomainDDOSAttackSource {
    return DomainDDOSAttackSourceFromJSONTyped(json, false);
}

export function DomainDDOSAttackSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainDDOSAttackSource {
    if (json == null) {
        return json;
    }
    return {
        attackType: json["attack_type"],
        confidence: json["confidence"],
        duration: json["duration"],
        key: json["key"],
        networkProtocol: json["network_protocol"],
        protocols: json["protocols"],
        requests: json["requests"],
        startTime: json["start_time"],
        target: json["target"],
        targetDetails: DomainDDOSTargetDetailsFromJSON(json["target_details"]),
        targetDomain: json["target_domain"],
        targetIp: json["target_ip"],
        targetPorts: json["target_ports"],
    };
}

export function DomainDDOSAttackSourceToJSON(value?: DomainDDOSAttackSource | null): any {
    if (value == null) {
        return value;
    }
    return {
        attack_type: value["attackType"],
        confidence: value["confidence"],
        duration: value["duration"],
        key: value["key"],
        network_protocol: value["networkProtocol"],
        protocols: value["protocols"],
        requests: value["requests"],
        start_time: value["startTime"],
        target: value["target"],
        target_details: DomainDDOSTargetDetailsToJSON(value["targetDetails"]),
        target_domain: value["targetDomain"],
        target_ip: value["targetIp"],
        target_ports: value["targetPorts"],
    };
}
