/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * A prevention policy setting
 * @export
 * @interface PreventionSettingRespV1
 */
export interface PreventionSettingRespV1 {
    /**
     * The human readable description of the setting
     * @type {string}
     * @memberof PreventionSettingRespV1
     */
    description?: string;
    /**
     * The id of the setting
     * @type {string}
     * @memberof PreventionSettingRespV1
     */
    id: string;
    /**
     * The name of the setting
     * @type {string}
     * @memberof PreventionSettingRespV1
     */
    name: string;
    /**
     * The type of the setting which can be used as a hint when displaying in the UI
     * @type {string}
     * @memberof PreventionSettingRespV1
     */
    type: PreventionSettingRespV1TypeEnum;
    /**
     * The value for the setting. For a toggle this value will take the form {'enabled':true|false}. For an mlslider this will take the form {'detection':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE','prevention':'DISABLED|CAUTIOUS|MODERATE|AGGRESSIVE|EXTRA_AGGRESSIVE'}
     * @type {object}
     * @memberof PreventionSettingRespV1
     */
    value: object;
}

/**
 * @export
 */
export const PreventionSettingRespV1TypeEnum = {
    Toggle: "toggle",
    Mlslider: "mlslider",
} as const;
export type PreventionSettingRespV1TypeEnum = (typeof PreventionSettingRespV1TypeEnum)[keyof typeof PreventionSettingRespV1TypeEnum];

/**
 * Check if a given object implements the PreventionSettingRespV1 interface.
 */
export function instanceOfPreventionSettingRespV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function PreventionSettingRespV1FromJSON(json: any): PreventionSettingRespV1 {
    return PreventionSettingRespV1FromJSONTyped(json, false);
}

export function PreventionSettingRespV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): PreventionSettingRespV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        description: !exists(json, "description") ? undefined : json["description"],
        id: json["id"],
        name: json["name"],
        type: json["type"],
        value: json["value"],
    };
}

export function PreventionSettingRespV1ToJSON(value?: PreventionSettingRespV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        description: value.description,
        id: value.id,
        name: value.name,
        type: value.type,
        value: value.value,
    };
}
