/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainExternalAssetSubsidiary } from './DomainExternalAssetSubsidiary';
import {
    DomainExternalAssetSubsidiaryFromJSON,
    DomainExternalAssetSubsidiaryFromJSONTyped,
    DomainExternalAssetSubsidiaryToJSON,
} from './DomainExternalAssetSubsidiary';
import type { DomainExternalAssetDiscoveryAttributes } from './DomainExternalAssetDiscoveryAttributes';
import {
    DomainExternalAssetDiscoveryAttributesFromJSON,
    DomainExternalAssetDiscoveryAttributesFromJSONTyped,
    DomainExternalAssetDiscoveryAttributesToJSON,
} from './DomainExternalAssetDiscoveryAttributes';
import type { DomainExternalAssetsAPITriage } from './DomainExternalAssetsAPITriage';
import {
    DomainExternalAssetsAPITriageFromJSON,
    DomainExternalAssetsAPITriageFromJSONTyped,
    DomainExternalAssetsAPITriageToJSON,
} from './DomainExternalAssetsAPITriage';
import type { DomainFemDNSDomain } from './DomainFemDNSDomain';
import {
    DomainFemDNSDomainFromJSON,
    DomainFemDNSDomainFromJSONTyped,
    DomainFemDNSDomainToJSON,
} from './DomainFemDNSDomain';
import type { DomainFemExternalIP } from './DomainFemExternalIP';
import {
    DomainFemExternalIPFromJSON,
    DomainFemExternalIPFromJSONTyped,
    DomainFemExternalIPToJSON,
} from './DomainFemExternalIP';

/**
 * 
 * @export
 * @interface DomainFemExternalAsset
 */
export interface DomainFemExternalAsset {
    /**
     * Lists the user actions can be taken on this asset (triage, delete, etc)
     * @type {Array<string>}
     * @memberof DomainFemExternalAsset
     */
    applicableActions: Array<string>;
    /**
     * The type of external asset (ip, dns_domain)
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    assetType: string;
    /**
     * The customer ID
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    cid: string;
    /**
     * Confidence level for the asset association to the organization
     * @type {number}
     * @memberof DomainFemExternalAsset
     */
    confidence: number;
    /**
     * The criticality level of the asset (Critical, High, Noncritical, or Unassigned)
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    criticality?: string;
    /**
     * The description the user entered when manually assigning a criticality level
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    criticalityDescription?: string;
    /**
     * The date and time the criticality level was manually assigned
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    criticalityTimestamp?: string;
    /**
     * The username of the account that manually assigned the criticality level
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    criticalityUsername?: string;
    /**
     * A list of the source providers for the asset information
     * @type {Array<string>}
     * @memberof DomainFemExternalAsset
     */
    dataProviders: Array<string>;
    /**
     * The identifier of the asset
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    discoveredBy?: string;
    /**
     * 
     * @type {DomainExternalAssetDiscoveryAttributes}
     * @memberof DomainFemExternalAsset
     */
    discovery?: DomainExternalAssetDiscoveryAttributes;
    /**
     * 
     * @type {DomainFemDNSDomain}
     * @memberof DomainFemExternalAsset
     */
    dnsDomain?: DomainFemDNSDomain;
    /**
     * this is similar with the entity_type field from DiscoverAPIHost; it will be always 'external' and it aligns this structure with other assets structures, making UI handling of assets more generic
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    entityType: string;
    /**
     * The first time this asset has been observed as externally exposed
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    firstSeen?: string;
    /**
     * The unique external asset identifier
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    id: string;
    /**
     * The internet exposure status of the asset
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    internetExposure?: string;
    /**
     * 
     * @type {DomainFemExternalIP}
     * @memberof DomainFemExternalAsset
     */
    ip?: DomainFemExternalIP;
    /**
     * The last time this asset has been observed as externally exposed
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    lastSeen?: string;
    /**
     * Flag indicating if the asset has been manually added
     * @type {boolean}
     * @memberof DomainFemExternalAsset
     */
    manual?: boolean;
    /**
     * Perimeter of this asset (Official/Unofficial)
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    perimeter?: string;
    /**
     * The availability status for the asset
     * @type {string}
     * @memberof DomainFemExternalAsset
     */
    status: string;
    /**
     * List of subsidiaries that the asset belongs to
     * @type {Array<DomainExternalAssetSubsidiary>}
     * @memberof DomainFemExternalAsset
     */
    subsidiaries?: Array<DomainExternalAssetSubsidiary>;
    /**
     * 
     * @type {DomainExternalAssetsAPITriage}
     * @memberof DomainFemExternalAsset
     */
    triage?: DomainExternalAssetsAPITriage;
}

/**
 * Check if a given object implements the DomainFemExternalAsset interface.
 */
export function instanceOfDomainFemExternalAsset(value: object): value is DomainFemExternalAsset {
    if (!('applicableActions' in value) || value['applicableActions'] === undefined) return false;
    if (!('assetType' in value) || value['assetType'] === undefined) return false;
    if (!('cid' in value) || value['cid'] === undefined) return false;
    if (!('confidence' in value) || value['confidence'] === undefined) return false;
    if (!('dataProviders' in value) || value['dataProviders'] === undefined) return false;
    if (!('entityType' in value) || value['entityType'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function DomainFemExternalAssetFromJSON(json: any): DomainFemExternalAsset {
    return DomainFemExternalAssetFromJSONTyped(json, false);
}

export function DomainFemExternalAssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainFemExternalAsset {
    if (json == null) {
        return json;
    }
    return {
        
        'applicableActions': json['applicable_actions'],
        'assetType': json['asset_type'],
        'cid': json['cid'],
        'confidence': json['confidence'],
        'criticality': json['criticality'] == null ? undefined : json['criticality'],
        'criticalityDescription': json['criticality_description'] == null ? undefined : json['criticality_description'],
        'criticalityTimestamp': json['criticality_timestamp'] == null ? undefined : json['criticality_timestamp'],
        'criticalityUsername': json['criticality_username'] == null ? undefined : json['criticality_username'],
        'dataProviders': json['data_providers'],
        'discoveredBy': json['discovered_by'] == null ? undefined : json['discovered_by'],
        'discovery': json['discovery'] == null ? undefined : DomainExternalAssetDiscoveryAttributesFromJSON(json['discovery']),
        'dnsDomain': json['dns_domain'] == null ? undefined : DomainFemDNSDomainFromJSON(json['dns_domain']),
        'entityType': json['entity_type'],
        'firstSeen': json['first_seen'] == null ? undefined : json['first_seen'],
        'id': json['id'],
        'internetExposure': json['internet_exposure'] == null ? undefined : json['internet_exposure'],
        'ip': json['ip'] == null ? undefined : DomainFemExternalIPFromJSON(json['ip']),
        'lastSeen': json['last_seen'] == null ? undefined : json['last_seen'],
        'manual': json['manual'] == null ? undefined : json['manual'],
        'perimeter': json['perimeter'] == null ? undefined : json['perimeter'],
        'status': json['status'],
        'subsidiaries': json['subsidiaries'] == null ? undefined : ((json['subsidiaries'] as Array<any>).map(DomainExternalAssetSubsidiaryFromJSON)),
        'triage': json['triage'] == null ? undefined : DomainExternalAssetsAPITriageFromJSON(json['triage']),
    };
}

export function DomainFemExternalAssetToJSON(value?: DomainFemExternalAsset | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'applicable_actions': value['applicableActions'],
        'asset_type': value['assetType'],
        'cid': value['cid'],
        'confidence': value['confidence'],
        'criticality': value['criticality'],
        'criticality_description': value['criticalityDescription'],
        'criticality_timestamp': value['criticalityTimestamp'],
        'criticality_username': value['criticalityUsername'],
        'data_providers': value['dataProviders'],
        'discovered_by': value['discoveredBy'],
        'discovery': DomainExternalAssetDiscoveryAttributesToJSON(value['discovery']),
        'dns_domain': DomainFemDNSDomainToJSON(value['dnsDomain']),
        'entity_type': value['entityType'],
        'first_seen': value['firstSeen'],
        'id': value['id'],
        'internet_exposure': value['internetExposure'],
        'ip': DomainFemExternalIPToJSON(value['ip']),
        'last_seen': value['lastSeen'],
        'manual': value['manual'],
        'perimeter': value['perimeter'],
        'status': value['status'],
        'subsidiaries': value['subsidiaries'] == null ? undefined : ((value['subsidiaries'] as Array<any>).map(DomainExternalAssetSubsidiaryToJSON)),
        'triage': DomainExternalAssetsAPITriageToJSON(value['triage']),
    };
}

