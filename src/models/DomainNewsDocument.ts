/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainEntity } from "./DomainEntity";
import { DomainEntityFromJSON, DomainEntityFromJSONTyped, DomainEntityToJSON } from "./DomainEntity";
import type { DomainFile } from "./DomainFile";
import { DomainFileFromJSON, DomainFileFromJSONTyped, DomainFileToJSON } from "./DomainFile";
import type { DomainImage } from "./DomainImage";
import { DomainImageFromJSON, DomainImageFromJSONTyped, DomainImageToJSON } from "./DomainImage";
import type { DomainReportMalware } from "./DomainReportMalware";
import { DomainReportMalwareFromJSON, DomainReportMalwareFromJSONTyped, DomainReportMalwareToJSON } from "./DomainReportMalware";
import type { DomainSimpleActor } from "./DomainSimpleActor";
import { DomainSimpleActorFromJSON, DomainSimpleActorFromJSONTyped, DomainSimpleActorToJSON } from "./DomainSimpleActor";

/**
 *
 * @export
 * @interface DomainNewsDocument
 */
export interface DomainNewsDocument {
    /**
     * legacy field, not used
     * @type {boolean}
     * @memberof DomainNewsDocument
     */
    active?: boolean;
    /**
     * Actors mentioned, related or referenced in the news/report
     * @type {Array<DomainSimpleActor>}
     * @memberof DomainNewsDocument
     */
    actors: Array<DomainSimpleActor>;
    /**
     * News attachment, containing either pdf url or feeds zip and/or gzip archive
     * @type {Array<DomainFile>}
     * @memberof DomainNewsDocument
     */
    attachments?: Array<DomainFile>;
    /**
     * Date of the news document creation, unix timestampt
     * @type {number}
     * @memberof DomainNewsDocument
     */
    createdDate: number;
    /**
     * Full report description, extracted from the document
     * @type {string}
     * @memberof DomainNewsDocument
     */
    description?: string;
    /**
     * internal property used for permissions check of access, not returned or explicitly filterable
     * @type {Array<DomainEntity>}
     * @memberof DomainNewsDocument
     */
    entitlements?: Array<DomainEntity>;
    /**
     * Integer ID of the News document
     * @type {number}
     * @memberof DomainNewsDocument
     */
    id: number;
    /**
     *
     * @type {DomainImage}
     * @memberof DomainNewsDocument
     */
    image?: DomainImage;
    /**
     * Date of the news document last modification, unix timestampt
     * @type {number}
     * @memberof DomainNewsDocument
     */
    lastModifiedDate: number;
    /**
     * Malware mentioned, related or referenced in the news/report
     * @type {Array<DomainReportMalware>}
     * @memberof DomainNewsDocument
     */
    malware?: Array<DomainReportMalware>;
    /**
     * News mentioned motivation or motivation of related actors and malware families
     * @type {Array<DomainEntity>}
     * @memberof DomainNewsDocument
     */
    motivations: Array<DomainEntity>;
    /**
     * News title
     * @type {string}
     * @memberof DomainNewsDocument
     */
    name: string;
    /**
     * internal field, not used
     * @type {boolean}
     * @memberof DomainNewsDocument
     */
    notifyUsers?: boolean;
    /**
     * Rich text description with markup
     * @type {string}
     * @memberof DomainNewsDocument
     */
    richTextDescription?: string;
    /**
     * Short description of the report content
     * @type {string}
     * @memberof DomainNewsDocument
     */
    shortDescription?: string;
    /**
     * News title in a url friendly way, which is title in lowercase and special characters including space replaced with dash
     * @type {string}
     * @memberof DomainNewsDocument
     */
    slug: string;
    /**
     *
     * @type {DomainEntity}
     * @memberof DomainNewsDocument
     */
    subType?: DomainEntity;
    /**
     * News tags, which contains MITRE, Vulnerability community identifiers, capabilities, malware family name, customer target, activity cluster, notable event, geopolitical issue
     * @type {Array<DomainEntity>}
     * @memberof DomainNewsDocument
     */
    tags: Array<DomainEntity>;
    /**
     * News mentioned target countries or related actor's target countries
     * @type {Array<DomainEntity>}
     * @memberof DomainNewsDocument
     */
    targetCountries: Array<DomainEntity>;
    /**
     * News mentioned target industries or related actor's target industries
     * @type {Array<DomainEntity>}
     * @memberof DomainNewsDocument
     */
    targetIndustries: Array<DomainEntity>;
    /**
     *
     * @type {DomainImage}
     * @memberof DomainNewsDocument
     */
    thumbnail: DomainImage;
    /**
     *
     * @type {DomainEntity}
     * @memberof DomainNewsDocument
     */
    topic?: DomainEntity;
    /**
     *
     * @type {DomainEntity}
     * @memberof DomainNewsDocument
     */
    type?: DomainEntity;
    /**
     * URL of the news document where it can be accessed in the Falcon Portal
     * @type {string}
     * @memberof DomainNewsDocument
     */
    url?: string;
}

/**
 * Check if a given object implements the DomainNewsDocument interface.
 */
export function instanceOfDomainNewsDocument(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "actors" in value;
    isInstance = isInstance && "createdDate" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "lastModifiedDate" in value;
    isInstance = isInstance && "motivations" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "targetCountries" in value;
    isInstance = isInstance && "targetIndustries" in value;
    isInstance = isInstance && "thumbnail" in value;

    return isInstance;
}

export function DomainNewsDocumentFromJSON(json: any): DomainNewsDocument {
    return DomainNewsDocumentFromJSONTyped(json, false);
}

export function DomainNewsDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainNewsDocument {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        active: !exists(json, "active") ? undefined : json["active"],
        actors: (json["actors"] as Array<any>).map(DomainSimpleActorFromJSON),
        attachments: !exists(json, "attachments") ? undefined : (json["attachments"] as Array<any>).map(DomainFileFromJSON),
        createdDate: json["created_date"],
        description: !exists(json, "description") ? undefined : json["description"],
        entitlements: !exists(json, "entitlements") ? undefined : (json["entitlements"] as Array<any>).map(DomainEntityFromJSON),
        id: json["id"],
        image: !exists(json, "image") ? undefined : DomainImageFromJSON(json["image"]),
        lastModifiedDate: json["last_modified_date"],
        malware: !exists(json, "malware") ? undefined : (json["malware"] as Array<any>).map(DomainReportMalwareFromJSON),
        motivations: (json["motivations"] as Array<any>).map(DomainEntityFromJSON),
        name: json["name"],
        notifyUsers: !exists(json, "notify_users") ? undefined : json["notify_users"],
        richTextDescription: !exists(json, "rich_text_description") ? undefined : json["rich_text_description"],
        shortDescription: !exists(json, "short_description") ? undefined : json["short_description"],
        slug: json["slug"],
        subType: !exists(json, "sub_type") ? undefined : DomainEntityFromJSON(json["sub_type"]),
        tags: (json["tags"] as Array<any>).map(DomainEntityFromJSON),
        targetCountries: (json["target_countries"] as Array<any>).map(DomainEntityFromJSON),
        targetIndustries: (json["target_industries"] as Array<any>).map(DomainEntityFromJSON),
        thumbnail: DomainImageFromJSON(json["thumbnail"]),
        topic: !exists(json, "topic") ? undefined : DomainEntityFromJSON(json["topic"]),
        type: !exists(json, "type") ? undefined : DomainEntityFromJSON(json["type"]),
        url: !exists(json, "url") ? undefined : json["url"],
    };
}

export function DomainNewsDocumentToJSON(value?: DomainNewsDocument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        active: value.active,
        actors: (value.actors as Array<any>).map(DomainSimpleActorToJSON),
        attachments: value.attachments === undefined ? undefined : (value.attachments as Array<any>).map(DomainFileToJSON),
        created_date: value.createdDate,
        description: value.description,
        entitlements: value.entitlements === undefined ? undefined : (value.entitlements as Array<any>).map(DomainEntityToJSON),
        id: value.id,
        image: DomainImageToJSON(value.image),
        last_modified_date: value.lastModifiedDate,
        malware: value.malware === undefined ? undefined : (value.malware as Array<any>).map(DomainReportMalwareToJSON),
        motivations: (value.motivations as Array<any>).map(DomainEntityToJSON),
        name: value.name,
        notify_users: value.notifyUsers,
        rich_text_description: value.richTextDescription,
        short_description: value.shortDescription,
        slug: value.slug,
        sub_type: DomainEntityToJSON(value.subType),
        tags: (value.tags as Array<any>).map(DomainEntityToJSON),
        target_countries: (value.targetCountries as Array<any>).map(DomainEntityToJSON),
        target_industries: (value.targetIndustries as Array<any>).map(DomainEntityToJSON),
        thumbnail: DomainImageToJSON(value.thumbnail),
        topic: DomainEntityToJSON(value.topic),
        type: DomainEntityToJSON(value.type),
        url: value.url,
    };
}
