/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { MalquerySampleMetadata } from "./MalquerySampleMetadata";
import { MalquerySampleMetadataFromJSON, MalquerySampleMetadataFromJSONTyped, MalquerySampleMetadataToJSON } from "./MalquerySampleMetadata";

/**
 *
 * @export
 * @interface MalqueryExternalResource
 */
export interface MalqueryExternalResource {
    /**
     * Sample family
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    family?: string;
    /**
     * Sample size
     * @type {number}
     * @memberof MalqueryExternalResource
     */
    filesize?: number;
    /**
     * Sample file type
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    filetype?: string;
    /**
     * Date when it was first seen
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    firstSeen?: string;
    /**
     * Reason why the resource is ignored
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    ignoreReason?: string;
    /**
     * Sample label
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    label?: string;
    /**
     * Resource label confidence
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    labelConfidence?: string;
    /**
     * Sample MD5
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    md5?: string;
    /**
     * Search pattern
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    pattern?: string;
    /**
     * Search pattern type
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    patternType?: string;
    /**
     * List of sample metadata
     * @type {Array<MalquerySampleMetadata>}
     * @memberof MalqueryExternalResource
     */
    samples: Array<MalquerySampleMetadata>;
    /**
     * Sample SHA1
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    sha1?: string;
    /**
     * Sample SHA256
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    sha256?: string;
    /**
     * List of resource tags
     * @type {Array<string>}
     * @memberof MalqueryExternalResource
     */
    tags?: Array<string>;
    /**
     * Search YARA rule
     * @type {string}
     * @memberof MalqueryExternalResource
     */
    yaraRule?: string;
    /**
     * List of YARA rules for related files
     * @type {Array<string>}
     * @memberof MalqueryExternalResource
     */
    yaraRules?: Array<string>;
}

/**
 * Check if a given object implements the MalqueryExternalResource interface.
 */
export function instanceOfMalqueryExternalResource(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "samples" in value;

    return isInstance;
}

export function MalqueryExternalResourceFromJSON(json: any): MalqueryExternalResource {
    return MalqueryExternalResourceFromJSONTyped(json, false);
}

export function MalqueryExternalResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): MalqueryExternalResource {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        family: !exists(json, "family") ? undefined : json["family"],
        filesize: !exists(json, "filesize") ? undefined : json["filesize"],
        filetype: !exists(json, "filetype") ? undefined : json["filetype"],
        firstSeen: !exists(json, "first_seen") ? undefined : json["first_seen"],
        ignoreReason: !exists(json, "ignore_reason") ? undefined : json["ignore_reason"],
        label: !exists(json, "label") ? undefined : json["label"],
        labelConfidence: !exists(json, "label_confidence") ? undefined : json["label_confidence"],
        md5: !exists(json, "md5") ? undefined : json["md5"],
        pattern: !exists(json, "pattern") ? undefined : json["pattern"],
        patternType: !exists(json, "pattern_type") ? undefined : json["pattern_type"],
        samples: (json["samples"] as Array<any>).map(MalquerySampleMetadataFromJSON),
        sha1: !exists(json, "sha1") ? undefined : json["sha1"],
        sha256: !exists(json, "sha256") ? undefined : json["sha256"],
        tags: !exists(json, "tags") ? undefined : json["tags"],
        yaraRule: !exists(json, "yara_rule") ? undefined : json["yara_rule"],
        yaraRules: !exists(json, "yara_rules") ? undefined : json["yara_rules"],
    };
}

export function MalqueryExternalResourceToJSON(value?: MalqueryExternalResource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        family: value.family,
        filesize: value.filesize,
        filetype: value.filetype,
        first_seen: value.firstSeen,
        ignore_reason: value.ignoreReason,
        label: value.label,
        label_confidence: value.labelConfidence,
        md5: value.md5,
        pattern: value.pattern,
        pattern_type: value.patternType,
        samples: (value.samples as Array<any>).map(MalquerySampleMetadataToJSON),
        sha1: value.sha1,
        sha256: value.sha256,
        tags: value.tags,
        yara_rule: value.yaraRule,
        yara_rules: value.yaraRules,
    };
}
