/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface DomainActionV1
 */
export interface DomainActionV1 {
    /**
     * The ID of the customer who created the action
     * @type {string}
     * @memberof DomainActionV1
     */
    cid: string;
    /**
     * The level of detail in which the content will be delivered. It can be either 'standard' or 'enhanced'
     * @type {string}
     * @memberof DomainActionV1
     */
    contentFormat: string;
    /**
     * The date when the action was created
     * @type {Date}
     * @memberof DomainActionV1
     */
    createdTimestamp: Date;
    /**
     * The time interval between the action's triggers. It can be one of the values: 'asap', 'daily' or 'weekly'
     * @type {string}
     * @memberof DomainActionV1
     */
    frequency: string;
    /**
     * The ID of the action
     * @type {string}
     * @memberof DomainActionV1
     */
    id: string;
    /**
     * The address list who will be notified by this action.
     * @type {Array<string>}
     * @memberof DomainActionV1
     */
    recipients: Array<string>;
    /**
     * The ID of the rule on which this action is attached
     * @type {string}
     * @memberof DomainActionV1
     */
    ruleId: string;
    /**
     * The action status. It can be either 'enabled' or 'muted'.
     * @type {string}
     * @memberof DomainActionV1
     */
    status: string;
    /**
     * Whether to periodically trigger the action based on the frequency, even when there are no new matches for the associated monitoring rule
     * @type {boolean}
     * @memberof DomainActionV1
     */
    triggerMatchless: boolean;
    /**
     * The action type. The only type currently supported is 'email'
     * @type {string}
     * @memberof DomainActionV1
     */
    type: string;
    /**
     * The date when the action was updated
     * @type {Date}
     * @memberof DomainActionV1
     */
    updatedTimestamp: Date;
    /**
     * The UUID of the user who created the action
     * @type {string}
     * @memberof DomainActionV1
     */
    userUuid: string;
}

/**
 * Check if a given object implements the DomainActionV1 interface.
 */
export function instanceOfDomainActionV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cid" in value;
    isInstance = isInstance && "contentFormat" in value;
    isInstance = isInstance && "createdTimestamp" in value;
    isInstance = isInstance && "frequency" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "recipients" in value;
    isInstance = isInstance && "ruleId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "triggerMatchless" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "updatedTimestamp" in value;
    isInstance = isInstance && "userUuid" in value;

    return isInstance;
}

export function DomainActionV1FromJSON(json: any): DomainActionV1 {
    return DomainActionV1FromJSONTyped(json, false);
}

export function DomainActionV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainActionV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        cid: json["cid"],
        contentFormat: json["content_format"],
        createdTimestamp: new Date(json["created_timestamp"]),
        frequency: json["frequency"],
        id: json["id"],
        recipients: json["recipients"],
        ruleId: json["rule_id"],
        status: json["status"],
        triggerMatchless: json["trigger_matchless"],
        type: json["type"],
        updatedTimestamp: new Date(json["updated_timestamp"]),
        userUuid: json["user_uuid"],
    };
}

export function DomainActionV1ToJSON(value?: DomainActionV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        cid: value.cid,
        content_format: value.contentFormat,
        created_timestamp: value.createdTimestamp.toISOString(),
        frequency: value.frequency,
        id: value.id,
        recipients: value.recipients,
        rule_id: value.ruleId,
        status: value.status,
        trigger_matchless: value.triggerMatchless,
        type: value.type,
        updated_timestamp: value.updatedTimestamp.toISOString(),
        user_uuid: value.userUuid,
    };
}
