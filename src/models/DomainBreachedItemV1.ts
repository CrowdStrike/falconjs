/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { DomainExposedDataRecordBotV1 } from "./DomainExposedDataRecordBotV1";
import { DomainExposedDataRecordBotV1FromJSON, DomainExposedDataRecordBotV1FromJSONTyped, DomainExposedDataRecordBotV1ToJSON } from "./DomainExposedDataRecordBotV1";
import type { DomainExposedDataRecordFinancialV1 } from "./DomainExposedDataRecordFinancialV1";
import { DomainExposedDataRecordFinancialV1FromJSON, DomainExposedDataRecordFinancialV1FromJSONTyped, DomainExposedDataRecordFinancialV1ToJSON } from "./DomainExposedDataRecordFinancialV1";
import type { DomainExposedDataRecordLocationV1 } from "./DomainExposedDataRecordLocationV1";
import { DomainExposedDataRecordLocationV1FromJSON, DomainExposedDataRecordLocationV1FromJSONTyped, DomainExposedDataRecordLocationV1ToJSON } from "./DomainExposedDataRecordLocationV1";
import type { DomainExposedDataRecordSocialV1 } from "./DomainExposedDataRecordSocialV1";
import { DomainExposedDataRecordSocialV1FromJSON, DomainExposedDataRecordSocialV1FromJSONTyped, DomainExposedDataRecordSocialV1ToJSON } from "./DomainExposedDataRecordSocialV1";

/**
 *
 * @export
 * @interface DomainBreachedItemV1
 */
export interface DomainBreachedItemV1 {
    /**
     *
     * @type {DomainExposedDataRecordBotV1}
     * @memberof DomainBreachedItemV1
     */
    bot?: DomainExposedDataRecordBotV1;
    /**
     * The company of the user
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    company?: string;
    /**
     * The status set after deduplication. Possible values: 'newly_detected', 'previously_reported', 'other'
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    credentialStatus?: string;
    /**
     * The domain where the credentials are valid
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    credentialsDomain?: string;
    /**
     * The IP where the credentials are valid
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    credentialsIp?: string;
    /**
     * The URL where the credentials are valid
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    credentialsUrl?: string;
    /**
     * The nickname of the user on the impacted site
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    displayName?: string;
    /**
     * The domain associated with the breached account.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    domain: string;
    /**
     * The email of the breached account.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    email: string;
    /**
     *
     * @type {DomainExposedDataRecordFinancialV1}
     * @memberof DomainBreachedItemV1
     */
    financial?: DomainExposedDataRecordFinancialV1;
    /**
     * The original hashing algorithm applied to the breached password. Possible values: 'plain', 'unknown', 'base64', 'md5', 'sha1', 'bcrypt', etc. The value 'plain' means that the password was originally found as plaintext.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    hashType: string;
    /**
     * The user's job at the company
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    jobPosition?: string;
    /**
     *
     * @type {DomainExposedDataRecordLocationV1}
     * @memberof DomainBreachedItemV1
     */
    location?: DomainExposedDataRecordLocationV1;
    /**
     * The username of the breached account.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    loginId: string;
    /**
     * The stealer log bot malware family
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    malwareFamily?: string;
    /**
     * The name of the person associated with the breached account.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    name: string;
    /**
     * The breached password. Passwords are returned as salted hashes, generated using the SHA256 algorithm and the CID as the salt.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    password: string;
    /**
     * The password hash
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    passwordHash?: string;
    /**
     * The password salt
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    passwordSalt?: string;
    /**
     * The phone number of the person associated with the breached account.
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    phone: string;
    /**
     *
     * @type {DomainExposedDataRecordSocialV1}
     * @memberof DomainBreachedItemV1
     */
    social?: DomainExposedDataRecordSocialV1;
    /**
     * The ID of the user on the impacted site
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    userId?: string;
    /**
     * The IP of the user on the impacted site
     * @type {string}
     * @memberof DomainBreachedItemV1
     */
    userIp?: string;
}

/**
 * Check if a given object implements the DomainBreachedItemV1 interface.
 */
export function instanceOfDomainBreachedItemV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "hashType" in value;
    isInstance = isInstance && "loginId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "password" in value;
    isInstance = isInstance && "phone" in value;

    return isInstance;
}

export function DomainBreachedItemV1FromJSON(json: any): DomainBreachedItemV1 {
    return DomainBreachedItemV1FromJSONTyped(json, false);
}

export function DomainBreachedItemV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainBreachedItemV1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        bot: !exists(json, "bot") ? undefined : DomainExposedDataRecordBotV1FromJSON(json["bot"]),
        company: !exists(json, "company") ? undefined : json["company"],
        credentialStatus: !exists(json, "credential_status") ? undefined : json["credential_status"],
        credentialsDomain: !exists(json, "credentials_domain") ? undefined : json["credentials_domain"],
        credentialsIp: !exists(json, "credentials_ip") ? undefined : json["credentials_ip"],
        credentialsUrl: !exists(json, "credentials_url") ? undefined : json["credentials_url"],
        displayName: !exists(json, "display_name") ? undefined : json["display_name"],
        domain: json["domain"],
        email: json["email"],
        financial: !exists(json, "financial") ? undefined : DomainExposedDataRecordFinancialV1FromJSON(json["financial"]),
        hashType: json["hash_type"],
        jobPosition: !exists(json, "job_position") ? undefined : json["job_position"],
        location: !exists(json, "location") ? undefined : DomainExposedDataRecordLocationV1FromJSON(json["location"]),
        loginId: json["login_id"],
        malwareFamily: !exists(json, "malware_family") ? undefined : json["malware_family"],
        name: json["name"],
        password: json["password"],
        passwordHash: !exists(json, "password_hash") ? undefined : json["password_hash"],
        passwordSalt: !exists(json, "password_salt") ? undefined : json["password_salt"],
        phone: json["phone"],
        social: !exists(json, "social") ? undefined : DomainExposedDataRecordSocialV1FromJSON(json["social"]),
        userId: !exists(json, "user_id") ? undefined : json["user_id"],
        userIp: !exists(json, "user_ip") ? undefined : json["user_ip"],
    };
}

export function DomainBreachedItemV1ToJSON(value?: DomainBreachedItemV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        bot: DomainExposedDataRecordBotV1ToJSON(value.bot),
        company: value.company,
        credential_status: value.credentialStatus,
        credentials_domain: value.credentialsDomain,
        credentials_ip: value.credentialsIp,
        credentials_url: value.credentialsUrl,
        display_name: value.displayName,
        domain: value.domain,
        email: value.email,
        financial: DomainExposedDataRecordFinancialV1ToJSON(value.financial),
        hash_type: value.hashType,
        job_position: value.jobPosition,
        location: DomainExposedDataRecordLocationV1ToJSON(value.location),
        login_id: value.loginId,
        malware_family: value.malwareFamily,
        name: value.name,
        password: value.password,
        password_hash: value.passwordHash,
        password_salt: value.passwordSalt,
        phone: value.phone,
        social: DomainExposedDataRecordSocialV1ToJSON(value.social),
        user_id: value.userId,
        user_ip: value.userIp,
    };
}
