/* tslint:disable */
/* eslint-disable */
/**
 * CrowdStrike API Specification
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and more information about API endpoints that don\'t yet support OAuth2, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation). To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`. Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: rolling
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiActivityCreationRequest,
    ApiActivityCreationRequestFromJSON,
    ApiActivityCreationRequestToJSON,
    ApiCaseCreationRequest,
    ApiCaseCreationRequestFromJSON,
    ApiCaseCreationRequestToJSON,
    ApiCaseUpdateRequest,
    ApiCaseUpdateRequestFromJSON,
    ApiCaseUpdateRequestToJSON,
    ApiMessageCenterActivityResponse,
    ApiMessageCenterActivityResponseFromJSON,
    ApiMessageCenterActivityResponseToJSON,
    ApiMessageCenterAttachmentUploadResponse,
    ApiMessageCenterAttachmentUploadResponseFromJSON,
    ApiMessageCenterAttachmentUploadResponseToJSON,
    ApiMessageCenterCasesResponse,
    ApiMessageCenterCasesResponseFromJSON,
    ApiMessageCenterCasesResponseToJSON,
    MsaAggregateQueryRequest,
    MsaAggregateQueryRequestFromJSON,
    MsaAggregateQueryRequestToJSON,
    MsaAggregatesResponse,
    MsaAggregatesResponseFromJSON,
    MsaAggregatesResponseToJSON,
    MsaIdsRequest,
    MsaIdsRequestFromJSON,
    MsaIdsRequestToJSON,
    MsaQueryResponse,
    MsaQueryResponseFromJSON,
    MsaQueryResponseToJSON,
    MsaReplyAffectedEntities,
    MsaReplyAffectedEntitiesFromJSON,
    MsaReplyAffectedEntitiesToJSON,
    MsaReplyMetaOnly,
    MsaReplyMetaOnlyFromJSON,
    MsaReplyMetaOnlyToJSON,
} from '../models';

export interface AggregateCasesRequest {
    body: Array<MsaAggregateQueryRequest>;
}

export interface CaseAddActivityRequest {
    body: ApiActivityCreationRequest;
}

export interface CaseAddAttachmentRequest {
    caseId: string;
    userUuid: string;
    file: Blob;
}

export interface CaseDownloadAttachmentRequest {
    id: string;
}

export interface CreateCaseRequest {
    body: ApiCaseCreationRequest;
}

export interface GetCaseActivityByIdsRequest {
    body: MsaIdsRequest;
}

export interface GetCaseEntitiesByIDsRequest {
    body: MsaIdsRequest;
}

export interface QueryActivityByCaseIDRequest {
    caseId: string;
    limit?: number;
    sort?: QueryActivityByCaseIDSortEnum;
    filter?: string;
    offset?: string;
}

export interface QueryCasesIdsByFilterRequest {
    limit?: number;
    sort?: QueryCasesIdsByFilterSortEnum;
    filter?: string;
    offset?: string;
}

export interface UpdateCaseRequest {
    body: ApiCaseUpdateRequest;
}

/**
 * 
 */
export class MessageCenterApi extends runtime.BaseAPI {

    /**
     * Retrieve aggregate case values based on the matched filter
     */
    async aggregateCasesRaw(requestParameters: AggregateCasesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaAggregatesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aggregateCases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/aggregates/cases/GET/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(MsaAggregateQueryRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve aggregate case values based on the matched filter
     */
    async aggregateCases(body: Array<MsaAggregateQueryRequest>, initOverrides?: RequestInit): Promise<MsaAggregatesResponse> {
        const response = await this.aggregateCasesRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Add an activity to case. Only activities of type comment are allowed via API
     */
    async caseAddActivityRaw(requestParameters: CaseAddActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaReplyMetaOnly>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling caseAddActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:write"]);
        }

        const response = await this.request({
            path: `/message-center/entities/case-activity/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiActivityCreationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyMetaOnlyFromJSON(jsonValue));
    }

    /**
     * Add an activity to case. Only activities of type comment are allowed via API
     */
    async caseAddActivity(body: ApiActivityCreationRequest, initOverrides?: RequestInit): Promise<MsaReplyMetaOnly> {
        const response = await this.caseAddActivityRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Upload an attachment for the case. Maximum upload size allowed is *15 MB*.   Filename must start with *[a-zA-Z0-9_-]*. Allowed characters in file name are *[a-zA-Z0-9-_.\\s]*.    Maximum file name is *255* characters      Following attachment types are allowed:   - png   - bmp   - jpg   - jpeg   - gif   - pdf   - doc   - docx   - xls   - xlsx   - pptx   - txt   - csv
     * Upload an attachment for the case.
     */
    async caseAddAttachmentRaw(requestParameters: CaseAddAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ApiMessageCenterAttachmentUploadResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling caseAddAttachment.');
        }

        if (requestParameters.userUuid === null || requestParameters.userUuid === undefined) {
            throw new runtime.RequiredError('userUuid','Required parameter requestParameters.userUuid was null or undefined when calling caseAddAttachment.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling caseAddAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:write"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.caseId !== undefined) {
            formParams.append('case_id', requestParameters.caseId as any);
        }

        if (requestParameters.userUuid !== undefined) {
            formParams.append('user_uuid', requestParameters.userUuid as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/message-center/entities/case-attachment/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMessageCenterAttachmentUploadResponseFromJSON(jsonValue));
    }

    /**
     * Upload an attachment for the case. Maximum upload size allowed is *15 MB*.   Filename must start with *[a-zA-Z0-9_-]*. Allowed characters in file name are *[a-zA-Z0-9-_.\\s]*.    Maximum file name is *255* characters      Following attachment types are allowed:   - png   - bmp   - jpg   - jpeg   - gif   - pdf   - doc   - docx   - xls   - xlsx   - pptx   - txt   - csv
     * Upload an attachment for the case.
     */
    async caseAddAttachment(caseId: string, userUuid: string, file: Blob, initOverrides?: RequestInit): Promise<ApiMessageCenterAttachmentUploadResponse> {
        const response = await this.caseAddAttachmentRaw({ caseId: caseId, userUuid: userUuid, file: file }, initOverrides);
        return await response.value();
    }

    /**
     * retrieves an attachment for the case, given the attachment id
     */
    async caseDownloadAttachmentRaw(requestParameters: CaseDownloadAttachmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling caseDownloadAttachment.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/entities/case-attachment/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * retrieves an attachment for the case, given the attachment id
     */
    async caseDownloadAttachment(id: string, initOverrides?: RequestInit): Promise<string> {
        const response = await this.caseDownloadAttachmentRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * create a new case
     */
    async createCaseRaw(requestParameters: CreateCaseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaReplyAffectedEntities>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:write"]);
        }

        const response = await this.request({
            path: `/message-center/entities/case/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCaseCreationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyAffectedEntitiesFromJSON(jsonValue));
    }

    /**
     * create a new case
     */
    async createCase(body: ApiCaseCreationRequest, initOverrides?: RequestInit): Promise<MsaReplyAffectedEntities> {
        const response = await this.createCaseRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve activities for given id\'s
     */
    async getCaseActivityByIdsRaw(requestParameters: GetCaseActivityByIdsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ApiMessageCenterActivityResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getCaseActivityByIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/entities/case-activities/GET/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MsaIdsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMessageCenterActivityResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve activities for given id\'s
     */
    async getCaseActivityByIds(body: MsaIdsRequest, initOverrides?: RequestInit): Promise<ApiMessageCenterActivityResponse> {
        const response = await this.getCaseActivityByIdsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve message center cases
     */
    async getCaseEntitiesByIDsRaw(requestParameters: GetCaseEntitiesByIDsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ApiMessageCenterCasesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getCaseEntitiesByIDs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/entities/cases/GET/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MsaIdsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiMessageCenterCasesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve message center cases
     */
    async getCaseEntitiesByIDs(body: MsaIdsRequest, initOverrides?: RequestInit): Promise<ApiMessageCenterCasesResponse> {
        const response = await this.getCaseEntitiesByIDsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve activities id\'s for a case
     */
    async queryActivityByCaseIDRaw(requestParameters: QueryActivityByCaseIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling queryActivityByCaseID.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.caseId !== undefined) {
            queryParameters['case_id'] = requestParameters.caseId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/queries/case-activities/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve activities id\'s for a case
     */
    async queryActivityByCaseID(caseId: string, limit?: number, sort?: QueryActivityByCaseIDSortEnum, filter?: string, offset?: string, initOverrides?: RequestInit): Promise<MsaQueryResponse> {
        const response = await this.queryActivityByCaseIDRaw({ caseId: caseId, limit: limit, sort: sort, filter: filter, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve case id\'s that match the provided filter criteria
     */
    async queryCasesIdsByFilterRaw(requestParameters: QueryCasesIdsByFilterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaQueryResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:read"]);
        }

        const response = await this.request({
            path: `/message-center/queries/cases/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve case id\'s that match the provided filter criteria
     */
    async queryCasesIdsByFilter(limit?: number, sort?: QueryCasesIdsByFilterSortEnum, filter?: string, offset?: string, initOverrides?: RequestInit): Promise<MsaQueryResponse> {
        const response = await this.queryCasesIdsByFilterRaw({ limit: limit, sort: sort, filter: filter, offset: offset }, initOverrides);
        return await response.value();
    }

    /**
     * update an existing case
     */
    async updateCaseRaw(requestParameters: UpdateCaseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MsaReplyAffectedEntities>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateCase.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["message-center:write"]);
        }

        const response = await this.request({
            path: `/message-center/entities/case/v1`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApiCaseUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsaReplyAffectedEntitiesFromJSON(jsonValue));
    }

    /**
     * update an existing case
     */
    async updateCase(body: ApiCaseUpdateRequest, initOverrides?: RequestInit): Promise<MsaReplyAffectedEntities> {
        const response = await this.updateCaseRaw({ body: body }, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum QueryActivityByCaseIDSortEnum {
    CreatedTimeAsc = 'activity.created_time.asc',
    CreatedTimeDesc = 'activity.created_time.desc',
    TypeAsc = 'activity.type.asc',
    TypeDesc = 'activity.type.desc'
}
/**
    * @export
    * @enum {string}
    */
export enum QueryCasesIdsByFilterSortEnum {
    CreatedTimeAsc = 'case.created_time.asc',
    CreatedTimeDesc = 'case.created_time.desc',
    IdAsc = 'case.id.asc',
    IdDesc = 'case.id.desc',
    LastModifiedTimeAsc = 'case.last_modified_time.asc',
    LastModifiedTimeDesc = 'case.last_modified_time.desc',
    StatusAsc = 'case.status.asc',
    StatusDesc = 'case.status.desc',
    TypeAsc = 'case.type.asc',
    TypeDesc = 'case.type.desc'
}
